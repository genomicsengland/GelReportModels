@namespace("org.gel.models.cva.avro")

protocol TransactionProtocol {

    // CVA references
    import idl "CvaVariant.avdl";

    /**
    The transaction status:

* PENDING: a transaction in the queue pending to be processed
* BLOCKED: a transaction already being processed
* PROCESSING: a transaction being processed (normalised, lifted over and annotated)
* PERSISTING: a transaction being persisted in the database
* BLOCKED: a transaction already being processed
* DONE: a transaction has been successfully processed
* CANCELLING: a transaction is being rolled back
* CANCELLED: a transaction has been rolled back
* ERROR: erroneous transaction that cannot be processed, nor retried (this is caused by reported variants already in the database)
* ROLLBACK_ERROR: a transaction failed to roll back (this may leave the database in an inconsistent state)
* DELETED: a transaction has been deleted by a user (same effect as CANCELLED but user triggered)

    The happy path is PENDING -> BLOCKED -> PROCESSING -> PERSISTING -> DONE
    */
    enum TransactionStatus {
        PENDING,
        BLOCKED,
        PROCESSING,
        PERSISTING,
        DONE,
        CANCELLING,
        CANCELLED,
        ERROR,
        ROLLBACK_ERROR,
        DELETED
    }

    /**
    Keeps track of a transaction status change
    */
    record TransactionStatusChange {
        /**
        The new transaction status
        */
        TransactionStatus to;
        /**
        A timestamp with the status change
        */
        string timestamp;
        /**
        A message
        */
        union {null,string} message;
        /**
        An error message in case the transaction ingestion failed
        */
        union {null, string} errorMessage;
        /**
        The stracktrace in case the transaction ingestion failed
        */
        union {null, string} stackTrace;
        /**
        The CVA version that processed the transaction
        */
        union {null, string} cvaVersion;
    }

    /**
    Details about the content of a transaction and some logs.
    */
    record TransactionDetails {
        /**
        The type of the transaction (e.g.: org.gel.models.cva.avro.InterpretationRequestRD)
        */
        string type;
        /**
        The number of elements contained in the transaction
        */
        int numberOfElements;
        /**
        Report avro models version
        */
        string reportModelVersion;
        /**
        The identifier for the entity containing this reported variant.
        */
        string id;
        /**
        The version for the entity containing this reported variant. This is a correlative number being the highest
        value the latest version.
        */
        int version;
        /**
        The identifier for the entity containing this reported variant.
        */
        string parentId;
        /**
        The version for the entity containing this reported variant. This is a correlative number being the highest
        value the latest version.
        */
        int parentVersion;
        /**
        The participant identifier or family identifier
        */
        string groupId;
        /**
        The cohort identifier (the same family can have several cohorts)
        */
        string cohortId;
        /**
        The author of the ReportedVariant, either tiering, exomiser, a given cip (e.g.: omicia) or a given GMCs user name
        */
        string author;
        /**
        The author version of the ReportedVariant, either tiering, exomiser or a given cip. Only applicable for automated processes.
        */
        union {null, string} authorVersion;
        /**
        The genome shall be assigned to the workspaces(projects or domains with a predefined set of users) to control user access
        */
        array<string> workspace;
        /**
        The assembly to which the variant refers
        */
        union {null, org.gel.models.report.avro.Assembly} assembly;
        /**
        Messages
        */
        array<TransactionStatusChange> history;
    }

    /**
    Details about the transaction sender
    */
    record RequestDetails {
        /**
        IP address
        */
        union {null,string} ip;
        /**
        Hostname
        */
        union {null,string} host;
        /**
        Port
        */
        union {null,int} port;
        /**
        User
        */
        union {null,string} user;
        /**
        URI
        */
        union {null,string} uri;
        /**
        URL
        */
        union {null,string} url;
        /**
        Authentication type
        */
        union {null,string} authType;
    }

    /**
    A transaction having all necessary data to process it into the database
    */
    record Transaction {
        /**
        The identifier of the transaction
        */
        string id;
        /**
        Timestamp of last transaction status modification
        */
        string lastModified;
        /**
        Transaction status
        */
        TransactionStatus status;
        /**
        The data to be ingested in CVA compressed
        */
        union {null, bytes} compressedData;
        /**
        A MD5 hash signature of the transaction used to discard identical requests.
        To have a 50% chance of a collision by the birthday paradox we need 2**64 transactions
        */
        string requestSignature;
        /**
        Options to process the transaction
        */
        map<string> options;
        /**
        The number of milliseconds to process the transaction.
        */
        union {null, int} processingMilli;
        /**
        The details of a transaction
        */
        TransactionDetails transactionDetails;
        /**
        The details of a request
        */
        union {null, RequestDetails} requestDetails;
    }
}
