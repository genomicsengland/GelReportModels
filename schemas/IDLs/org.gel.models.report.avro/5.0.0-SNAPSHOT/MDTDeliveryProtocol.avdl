@namespace("org.gel.models.report.avro")

/** This protocol defines the integration mechanism to store analysis results in
    the MDT (Multi-disciplinary Tool). */
protocol MDTDelivery {

    import idl "ReportVersionControl.avdl";
    import idl "CommonRequest.avdl";
    import idl "RDParticipant.avdl";
    import idl "CommonInterpreted.avdl";
    import idl "InterpretationRequestRD.avdl";
    import idl "InterpretedGenomesRD.avdl";

    enum AnalysisType {rare_disease, cancer}

    /**
    Defines a delivery task. A delivery task identifies an instance of the whole delivery
    interaction cycle, whether successful or not. This allows traceability and identification
    of failed deliveries
    */
    record DeliveryTask {
        /**
        Unique id of the delivery task, linked to one TieringResult
        */
        int tieringResultId;

        /**
        Base path on MDT storage where GEL should transfer files associated with the study
        */
        string basePath;

        string protocolVersion;
        AnalysisType analysisType;
    }

    /**
    Represents the results of a tiering process and its input patient data. TieringResult
    is simply a more specific, less ambiguous term for "cohort".
    We cannot use the InterpretationRequestRD structure because there may be many interpretation
    requests for the same tiering results.
    */
    record TieringResult {
        /** Model version number */
        ReportVersionControl versionControl;

        /** This is the version of the assembly used to align the reads */
        string genomeAssemblyVersion = "GRCh37.p13";

        /**  Cellbase version */
        string cellbaseVersion = "4.0";

        /** The genome shall be assigned to the
            workspaces(projects or domains with a predefined set of users) to control user access */
        array<string> workspace;

        /** BAMs Files */
        array<File> bams;

        /** VCFs Files where SVs and CNVs are represented  */
        array<File> vcfs;

        /** BigWig Files */
        union {null, array<File>} bigWigs;

        /**  Pedigree Diagram Files as an SGV */
        union {null, File} pedigreeDiagram;

        /**  Variant Annotation using cellbase */
        union {null, File} annotationFile;

        /** Other files that may be vendor specific
            map of key: type of file, value: record of type File */
        union {null, map<File>} otherFiles;

        /** Pedigree */
        org.gel.models.participant.avro.Pedigree pedigree;

        /** Tiered Variants */
        array<ReportedVariant> tieredVariants;

        /** Tiering Version */
        string tieringVersion;

        /** Internal Study id */
        string internalStudyId;

        /** Complex Genetic Phenomena */
        union {null, ComplexGeneticPhenomena} complexGeneticPhenomena;

        /** It is paternal or maternal with reference to the participant. */
        union {null, OtherFamilyHistory} otherFamilyHistory;

        /** This map of key: panel_name, value: (map of key: gene, value: (map of metrics of key: metric name, value: float))
            That is: a map of tables of genes and metrics */
        union {null, map<map<map<float>>>} genePanelsCoverage;

        /** Additional information */
        union {null, map<string>} additionalInfo;
    }



    /** Represents the set of all interpretation data (excluding file contents) to be stored in MDT for
        one TieringResult.
        Semantic restrictions (not automatically verifiable):
            - All InterpretedGenomesRD in interpretationResults refer to the TieringResult tieringResult.
            - All InterpretedGenomesRD in interpretationResults have passed the QC stage and have been
              approved by the originating GMCs
    */
    record InterpretationData {
        TieringResult tieringResult;
        array<InterpretedGenomeRD> interpretationResults;
    }


    /************ OPERATIONS EXPOSED BY BOTH SIDES *******************/

    /** Server returns a token to be used in subsequent calls.
        Token expires after 20 minutes of not being used.
        Token expires after 7 days of created - even if there is activity. */
    string login(string username, string password);

    /** Invalidate token */
    void logout(string token);


    /************ OPERATIONS EXPOSED BY MDT **************************/

    /** Creates a new delivery task and allocates a directory for it */
    DeliveryTask createDeliveryTask(string token, int tieringResultId, string protocolVersion, string rareOrCancer);

    /** Notifies that RSync file transfers for this task are complete and MDT can
    proceed to process them (validate, ingest, or whichever process they need to do).*/
    void filesDelivered(string token, int tieringResultId);

    /** Sets all interpretation data (excluding file contents) for this TieringResult. The server
        associates the metadata to the files. All files referenced by the TieringResult in interpretation_data
        must exist in MDT Server - i.e. must have been successfully and completely copied. If no associated
        data existed, it is created; if any data existed, it is completely replaced by the new data. */
    void putInterpretationData(string token, InterpretationData interpretationData);

    /** Deletes all data (including files) associated with the tieringResultId */
    void delete(string token, int tieringResultId);

    /* TODO: optionally, we could add operations to get a deliveryTask and to get interpretationData for a given TieringResultsId. This would be good mainly for debbugging purposes... thoughts? */


    /************ OPERATIONS EXPOSED BY GEL **************************/

    /** Notifies that MDT has correctly processed files for this tieringResultId, and that it is ready to
        receive interpretation data. */
    void filesOk(string token, int tieringResultId);

    /* TODO: how can file processing by MDT fail? *?

    /* TODO: is the receipt of interpretation data sync or async? If async, we may need some operation like this: */
    /** Notifies that MDT has finished processing interpretation data
        status: "OK" or "ERROR"
        message: description of error if any, or empty if success */
    void interpretationDataProcessed(int delivery_id, string status, string message);

}
