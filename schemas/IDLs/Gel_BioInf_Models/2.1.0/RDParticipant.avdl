@namespace("Gel_BioInf_Models")
/**
This protocol defines the Participants and Pedigree
*/
protocol Pedigrees {

import idl "CommonRequest.avdl";
import idl "CommonParticipant.avdl";
import idl "VersionControl.avdl";

/**
This is quite GEL specific. This is the way is stored in ModelCatalogue and PanelApp.
Currently all specific disease titles are assigned to a disease subgroup so really only specificDisease needs to be
completed but we add the others for generality
*/
record Disorder {
    /**
    This is Level2 Title for this disorder
    */
    union {null,string} diseaseGroup;

    /**
    This is Level3 Title for this disorder
    */
    union {null,string} diseaseSubGroup;

    /**
    This is Level4 Title for this disorder
    */
    union {null,string} specificDisease;

    /**
    Age of onset in months
    */
    union {null, string} ageOfOnset;
}


/**
This defines an HPO term and its modifiers (possibly multiple)
If HPO term presence is unknown we don't have a entry on the list
*/
record HpoTerm {
    /**
    Identifier of the HPO term
    */
    string term;

    /**
    This is whether the term is present in the participant (default is null=unknown) true=term is present in participant,
    false=term is not present
    */
    union {null, boolean} termPresence;

    /**
    Modifier associated with the HPO term
    */
    union {null, map<string>} modifiers;

    /**
    Age of onset in months
    */
    union {null, string} ageOfOnset;

}



/**
Affection Status
*/
enum AffectionStatus {unaffected, affected,  unknown}

/**
Life Status
*/
enum LifeStatus {alive, aborted, deceased, unborn, stillborn, miscarriage}

/**
adoptedin means adopted into the family
adoptedout means child belonged to the family and was adopted out
*/
enum AdoptedStatus {not_adopted, adoptedin, adoptedout}

/**
This defines a RD Participant (demographics and pedigree information)
*/
record RDParticipant {

    /**
    Model version number
    */
    VersionControl versionControl;

    /**
    Numbering used to refer to each member of the pedigree
    */
    int pedigreeId;

    /**
    If this field is true, the member should be consider the proband of this family
    */
    boolean isProband;

    /**
    gel internal identifier, only required when the participant belongs to the program
    */
    union {null, string} gelId;

    /**
    Family id which internally translate to a sample set
    */
    string gelFamilyId;

    /**
    superFamily id, this id is built as a concatenation of all families id in this superfamily i.e, fam10024_fam100457
    */
    union {null, string} gelSuperFamilyId;

    /**
    Sex of the Participant
    */
    Sex sex;

    /**
    Karyotypic sex of the participant as previously established or by looking at the GEL genome
    */
    union {null, PersonKaryotipicSex} personKaryotipicSex;

    /**
    TODO: next
    Year of Birth
    union {null, string} yearOfBirth;
    */


    /**
    refers to the pedigreeId of the father
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree.
    */
    union {null, int}  fatherId;
    /**
    refers to the pedigreeId of the mother
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree.
    */
    union {null, int}  motherId;

    /**
    this id is built using the original familyId and the original pedigreeId of the father
    */
    union {null, int}  superFatherId;

    /**
    this id is built using the original familyId and the original pedigreeId of the mother
    */
    union {null, int}  superMotherId;

    /**
    Each twin group is numbered, i.e. all members of a group of multiparous births receive the same number
    */
    union {null, int} twinGroup;

    /**
    A property of the twinning group but should be entered for all members
    */
    union {null, TernaryOption} monozygotic;

    /**
    Adopted Status
    */
    AdoptedStatus adoptedStatus;

    /**
    Life Status
    */
    LifeStatus lifeStatus;

    /**
    The parents of this participant has a consanguineous relationship
    */
    TernaryOption consanguineousParents;

    /**
    Offspring from a consanguineous population
    */
    union {null, string} consanguineousPopulation;

    /**
    Affection Status
    */
    AffectionStatus affectionStatus;

    /**
    Clinical Data (disorders). If the family member is unaffected as per affectionStatus then this list is empty
    */
    array<Disorder> disorderList;

    /**
    Clinical Data (HPO terms)
    */
    array<HpoTerm> hpoTermList;

    /**
    Participant's ancestries, defined as Mother's/Father's Ethnic Origin and Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations
    */
    Ancestries ancestries;

    /**
    Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology
    */
    string dataModelCatalogueVersion="v4.2";

    /**
    What has this participant consented to?
    A participant that has been consented to the programme should also have sequence data associated with them; however
    this needs to be programmatically checked
    */
    ConsentStatus consentStatus;

    /**
    This is an array containing all the samples that belong to this individual, e.g ["LP00002255_GA4"]
    */
    union {null, array<string>} samples;


    /**
    Inbreeding Coefficient Estimation
    */
    union {null, InbreedingCoefficient} inbreedingCoefficient;


    /**
    We could add a map here to store additional information for example URIs to images, ECGs, etc
    Null by default
    */
    union {null, map<string>} additionalInformation;

}

record AnalysisPanel {
    string specificDisease;
    string panelName;
    union {null, string} panelVersion;
    string review_outcome;
    string multiple_genetic_origins;
}


/**
This is the concept of a family with associated phenotypes as present in the record RDParticipant
*/
record Pedigree {
    /**
    Model version number
    */
    VersionControl versionControl;

    /**
    Family id which internally translate to a sample set
    */
    string gelFamilyId;

    array <RDParticipant> participants;

    union {null, array<AnalysisPanel>} analysisPanels;

}

}