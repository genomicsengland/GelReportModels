"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse
from protocols.protocol import avro_parse

import avro.schema

version = '4.0.0'


class ACMGClassification(object):
    """
    No documentation
    """
    pathogenic_variant = "pathogenic_variant"
    likely_pathogenic_variant = "likely_pathogenic_variant"
    variant_of_unknown_clinical_significance = "variant_of_unknown_clinical_significance"
    likely_benign_variant = "likely_benign_variant"
    benign_variant = "benign_variant"
    not_assessed = "not_assessed"

    def __hash__(self):
        return str(self).__hash__()


class ActionType(object):
    """
    this is the type of actionability for the reported event
    """
    therapy = "therapy"
    therapeutic = "therapeutic"
    prognosis = "prognosis"
    diagnosis = "diagnosis"

    def __hash__(self):
        return str(self).__hash__()


class Actionability(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    not_yet = "not_yet"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class Actions(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "Actions", "fields": [{"type":
"string", "name": "actionType"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "evidence"}, {"doc": "", "type": ["null", "string"], "name": "drug"}, {"doc": "", "type":
["null", "string"], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"], "name":
"evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionType",
        "comments",
        "drug",
        "evidence",
        "evidenceType",
        "source",
        "status",
        "url",
        "variantActionable",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionType', 'comments', 'drug', 'evidence', 'evidenceType',
        'source', 'status', 'url', 'variantActionable'
    ]

    def __init__(self, **kwargs):
        self.actionType = kwargs.get(
            'actionType', None)
        self.comments = kwargs.get(
            'comments', None)
        self.drug = kwargs.get(
            'drug', None)
        self.evidence = kwargs.get(
            'evidence', None)
        self.evidenceType = kwargs.get(
            'evidenceType', None)
        self.source = kwargs.get(
            'source', None)
        self.status = kwargs.get(
            'status', None)
        self.url = kwargs.get(
            'url', None)
        self.variantActionable = kwargs.get(
            'variantActionable', None)


class AdditionalAnalysisPanel(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AdditionalAnalysisPanel",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": "string", "name": "panelName"},
{"type": ["null", "string"], "name": "panelVersion"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "panelName",
        "panelVersion",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'panelName', 'panelVersion', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class AdoptedStatus(object):
    """
    adoptedin means adopted into the family adoptedout means child
    belonged to the family and was adopted out
    """
    notadopted = "notadopted"
    adoptedin = "adoptedin"
    adoptedout = "adoptedout"

    def __hash__(self):
        return str(self).__hash__()


class AffectionStatus(object):
    """
    Affection Status
    """
    UNAFFECTED = "UNAFFECTED"
    AFFECTED = "AFFECTED"
    UNCERTAIN = "UNCERTAIN"

    def __hash__(self):
        return str(self).__hash__()


class AlleleOrigin(object):
    """
    Variant origin.  * `SO_0001781`: de novo variant.
    http://purl.obolibrary.org/obo/SO_0001781 * `SO_0001778`: germline
    variant. http://purl.obolibrary.org/obo/SO_0001778 * `SO_0001775`:
    maternal variant. http://purl.obolibrary.org/obo/SO_0001775 *
    `SO_0001776`: paternal variant.
    http://purl.obolibrary.org/obo/SO_0001776 * `SO_0001779`: pedigree
    specific variant. http://purl.obolibrary.org/obo/SO_0001779 *
    `SO_0001780`: population specific variant.
    http://purl.obolibrary.org/obo/SO_0001780 * `SO_0001777`: somatic
    variant. http://purl.obolibrary.org/obo/SO_0001777
    """
    de_novo_variant = "de_novo_variant"
    germline_variant = "germline_variant"
    maternal_variant = "maternal_variant"
    paternal_variant = "paternal_variant"
    pedigree_specific_variant = "pedigree_specific_variant"
    population_specific_variant = "population_specific_variant"
    somatic_variant = "somatic_variant"

    def __hash__(self):
        return str(self).__hash__()


class AnalysisPanel(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "AnalysisPanel",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": "string", "name": "panelName"},
{"type": ["null", "string"], "name": "panelVersion"}, {"type": "string", "name": "reviewOutcome"},
{"type": "string", "name": "multipleGeneticOrigins"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "multipleGeneticOrigins",
        "panelName",
        "panelVersion",
        "reviewOutcome",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'multipleGeneticOrigins', 'panelName', 'panelVersion',
        'reviewOutcome', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.multipleGeneticOrigins = kwargs.get(
            'multipleGeneticOrigins', None)
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)
        self.reviewOutcome = kwargs.get(
            'reviewOutcome', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class AnalysisType(object):
    """
    No documentation
    """
    rare_disease = "rare_disease"
    cancer = "cancer"

    def __hash__(self):
        return str(self).__hash__()


class Ancestries(ProtocolElement):
    """
    Ancestries, defined as Ethnic category(ies) and Chi-square test
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Ancestries", "fields":
[{"doc": "", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H",
"J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chiSquare1KGenomesPhase3Pop",
        "fathersEthnicOrigin",
        "fathersOtherRelevantAncestry",
        "mothersEthnicOrigin",
        "mothersOtherRelevantAncestry",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chiSquare1KGenomesPhase3Pop': ChiSquare1KGenomesPhase3Pop,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chiSquare1KGenomesPhase3Pop': ChiSquare1KGenomesPhase3Pop,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chiSquare1KGenomesPhase3Pop', 'fathersEthnicOrigin',
        'fathersOtherRelevantAncestry', 'mothersEthnicOrigin',
        'mothersOtherRelevantAncestry'
    ]

    def __init__(self, **kwargs):
        self.chiSquare1KGenomesPhase3Pop = kwargs.get(
            'chiSquare1KGenomesPhase3Pop', None)
        self.fathersEthnicOrigin = kwargs.get(
            'fathersEthnicOrigin', None)
        self.fathersOtherRelevantAncestry = kwargs.get(
            'fathersOtherRelevantAncestry', None)
        self.mothersEthnicOrigin = kwargs.get(
            'mothersEthnicOrigin', None)
        self.mothersOtherRelevantAncestry = kwargs.get(
            'mothersOtherRelevantAncestry', None)


class AuditLog(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AuditLog", "fields": [{"doc":
"", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "string", "name":
"interpretationRequestVersion"}, {"type": {"symbols": ["C0", "C1", "C2", "C3", "C4", "C5", "C6",
"C7"], "doc": "", "type": "enum", "name": "Code"}, "name": "code"}, {"type": ["null", {"fields":
[{"type": {"items": "string", "type": "array"}, "name": "previousGroups"}, {"type": {"items":
"string", "type": "array"}, "name": "modifiedGroups"}], "type": "record", "name": "CaseShared"}],
"name": "caseShared"}, {"type": ["null", {"fields": [{"type": {"items": "string", "type": "array"},
"name": "previousSupportingEvidences"}, {"type": {"items": "string", "type": "array"}, "name":
"modifiedSupportingEvidences"}], "type": "record", "name": "SupportingEvidences"}], "name":
"supportingEvidences"}, {"type": ["null", {"items": {"fields": [{"type": {"fields": [{"doc": "",
"type": "string", "name": "chromosome"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"},
{"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "CalledGenotype", "fields": [{"doc": "", "type": "string", "name":
"gelId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols":
["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type":
["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": ["null", "int"], "name": "copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "reportEventId"},
{"doc": "", "type": "string", "name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null",
"string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name": "genomicFeature"},
{"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "name":
"previousVariant"}, {"type": "ReportedVariant", "name": "modifiedVariant"}], "type": "record",
"name": "ModifiedVariant"}, "type": "array"}], "name": "modifiedVariants"}, {"type": ["null",
{"items": "ReportedVariant", "type": "array"}], "name": "addedVariants"}, {"type": ["null",
{"items": "ReportedVariant", "type": "array"}], "name": "removedVariants"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "addedVariants",
        "caseShared",
        "code",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "modifiedVariants",
        "removedVariants",
        "supportingEvidences",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'addedVariants': ReportedVariant,
            'caseShared': CaseShared,
            'modifiedVariants': ModifiedVariant,
            'removedVariants': ReportedVariant,
            'supportingEvidences': SupportingEvidences,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'addedVariants': ReportedVariant,
            'caseShared': CaseShared,
            'modifiedVariants': ModifiedVariant,
            'removedVariants': ReportedVariant,
            'supportingEvidences': SupportingEvidences,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'addedVariants', 'caseShared', 'code',
        'interpretationRequestId', 'interpretationRequestVersion',
        'modifiedVariants', 'removedVariants', 'supportingEvidences'
    ]

    def __init__(self, **kwargs):
        self.addedVariants = kwargs.get(
            'addedVariants', None)
        self.caseShared = kwargs.get(
            'caseShared', None)
        self.code = kwargs.get(
            'code', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.modifiedVariants = kwargs.get(
            'modifiedVariants', None)
        self.removedVariants = kwargs.get(
            'removedVariants', None)
        self.supportingEvidences = kwargs.get(
            'supportingEvidences', None)


class CalledGenotype(ProtocolElement):
    """
    This is intended to hold the genotypes for the family members
    In principle it is a phased zygosity as in VCF spec and called by
    the analysis provider if further phasing is conducted
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CalledGenotype", "fields":
[{"doc": "", "type": "string", "name": "gelId"}, {"doc": "", "type": "string", "name": "sampleId"},
{"doc": "", "type": {"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous",
"missing", "half_missing_reference", "half_missing_alternate", "alternate_hemizigous",
"reference_hemizigous", "unk"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "genotype"},
{"doc": "", "type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "int"],
"name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc":
"", "type": ["null", "int"], "name": "copyNumber"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "copyNumber",
        "depthAlternate",
        "depthReference",
        "gelId",
        "genotype",
        "phaseSet",
        "sampleId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'copyNumber', 'depthAlternate', 'depthReference', 'gelId',
        'genotype', 'phaseSet', 'sampleId'
    ]

    def __init__(self, **kwargs):
        self.copyNumber = kwargs.get(
            'copyNumber', None)
        self.depthAlternate = kwargs.get(
            'depthAlternate', None)
        self.depthReference = kwargs.get(
            'depthReference', None)
        self.gelId = kwargs.get(
            'gelId', None)
        self.genotype = kwargs.get(
            'genotype', None)
        self.phaseSet = kwargs.get(
            'phaseSet', None)
        self.sampleId = kwargs.get(
            'sampleId', None)


class CancerInterpretationRequest(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretationRequest",
"fields": [{"doc": "", "type": {"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "reportRequestId"}, {"doc": "", "type": "int", "name":
"reportVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"default": false,
"doc": "", "type": "boolean", "name": "interpretGenome"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "File", "fields": [{"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "sampleId"}, {"doc": "", "type": "string", "name": "uriFile"}, {"type":
{"symbols": ["BAM", "gVCF", "VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV",
"VCF_SV", "VCF_somatic_SV", "VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER",
"PARTITION", "VARIANT_FREQUENCIES", "COVERAGE"], "type": "enum", "name": "FileType"}, "name":
"fileType"}, {"type": ["null", "string"], "name": "md5Sum"}]}, "type": "array"}, "name": "bams"},
{"doc": "", "type": {"items": "File", "type": "array"}, "name": "vcfs"}, {"doc": "", "type":
{"items": "File", "type": "array"}, "name": "bigWigs"}, {"doc": "", "type": ["null", "File"],
"name": "annotationFile"}, {"type": {"namespace": "org.gel.models.participant.avro", "type":
"record", "name": "CancerParticipant", "fields": [{"type": "boolean", "name": "readyForAnalysis"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields":
[{"default": false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false,
"doc": "", "type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type":
["null", "string"], "name": "center"}, {"type": ["null", "string"], "name": "LDPCode"}, {"doc": "",
"type": "string", "name": "individualId"}, {"doc": "", "type": ["null", "string"], "name":
"primaryDiagnosisDisease"}, {"doc": "", "type": ["null", "string"], "name":
"primaryDiagnosisSubDisease"}, {"doc": "", "type": {"symbols": ["FEMALE", "MALE", "UNKNOWN"],
"type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "additionalInformation"}, {"doc": "", "type": ["null", "string"], "name":
"assignedICD10"}, {"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "sampleId"},
{"doc": "", "type": "int", "name": "labSampleId"}, {"doc": "", "type": "int", "name": "tumourId"},
{"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL", "IIP", "MAIN", "EXPT"], "type":
"enum", "name": "ProgrammePhase"}], "name": "programmePhase"}, {"doc": "", "type": ["null",
{"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST", "CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD",
"COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC", "HEPATOPANCREATOBILIARY", "LUNG",
"MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL", "OVARIAN", "PROSTATE", "RENAL",
"SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS", "UPPER_GASTROINTESTINAL",
"NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"TumourType"}], "name": "tumourType"}, {"doc": "", "type": ["null", "string"], "name":
"tumourSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"}, {"doc":
"", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "Phase"}], "name": "phase"},
{"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum", "name":
"TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "type": "enum", "name": "SampleSource"}], "name": "source"}, {"doc": "",
"type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS", "ASPIRATE"],
"type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}, {"doc": "", "type":
["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS", "CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY",
"LAPAROSCOPIC_EXCISION", "MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION",
"STEREOTACTICALLY_GUIDED_BIOPSY", "USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum",
"name": "TissueSource"}], "name": "tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA",
"RNA"], "type": "enum", "name": "Product"}], "name": "product"}, {"doc": "", "type": ["null",
"string"], "name": "TNMStageVersion"}, {"doc": "", "type": ["null", "string"], "name":
"TNMStageGrouping"}], "type": "record", "name": "TumourSample"}, "type": "array"}, "name":
"tumourSamples"}, {"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "sampleId"},
{"doc": "", "type": "int", "name": "labSampleId"}, {"doc": "", "type": ["null", "SampleSource"],
"name": "source"}, {"doc": "", "type": ["null", "Product"], "name": "product"}, {"doc": "", "type":
["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc": "", "type": ["null",
"ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null", "string"], "name":
"clinicalSampleDateTime"}], "type": "record", "name": "GermlineSample"}, "type": "array"}, "name":
"germlineSamples"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"MatchedSamples", "fields": [{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"},
{"doc": "", "type": ["null", "string"], "name": "tumourSampleId"}]}, "type": "array"}], "name":
"matchedSamples"}, {"doc": "", "type": ["null", {"fields": [{"default": "1.0.0", "doc": "", "type":
"string", "name": "GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name":
"versionControl"}], "doc": ""}, "name": "cancerParticipant"}, {"doc": "", "type": "string", "name":
"analysisUri"}, {"doc": "", "type": "string", "name": "analysisVersion"}, {"doc": "", "type":
{"items": {"fields": [{"doc": "", "type": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null", "string"], "name":
"dbSnpId"}, {"doc": "", "type": ["null", "string"], "name": "cDnaChange"}, {"doc": "", "type":
["null", "string"], "name": "proteinChange"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": ["null", "double"], "name": "vaf"}, {"doc": "", "type": ["null", "int"], "name":
"commonAf"}, {"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}, {"type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": "string",
"name": "refSeqTranscriptId"}, {"doc": "", "type": "string", "name": "refSeqProteinId"}, {"doc": "",
"type": "string", "name": "geneName"}, {"doc": "", "type": ["null", {"symbols": ["oncogene", "TSG",
"both"], "type": "enum", "name": "RoleInCancer"}], "name": "roleInCancer"}], "type": "record",
"name": "GenomicFeatureCancer"}, "name": "genomicFeatureCancer"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "SoTerm", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "name"}]}, "type": "array"}, "name": "soTerms"},
{"doc": "", "type": ["null", {"items": {"fields": [{"type": "string", "name": "actionType"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name": "evidence"}, {"doc": "", "type":
["null", "string"], "name": "drug"}, {"doc": "", "type": ["null", "string"], "name": "status"},
{"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}, {"doc": "", "type": ["null", "string"], "name":
"url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"}, {"doc": "", "type":
"string", "name": "source"}], "type": "record", "name": "Actions"}, "type": "array"}], "name":
"actions"}, {"doc": "", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "",
"type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name":
"Tier"}], "name": "tier"}], "type": "record", "name": "ReportEventCancer"}, "type": "array"},
"name": "reportEvents"}], "type": "record", "name": "ReportedVariantCancer"}, "name":
"reportedVariantCancer"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}], "type": "record", "name":
"ReportedSomaticVariants"}, "type": "array"}, "name": "tieredVariants"}, {"doc": "", "type":
{"items": {"fields": [{"doc": "", "type": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name":
"end"}, {"doc": "", "type": {"doc": "", "type": "record", "name": "StructuralVariantType", "fields":
[{"type": {"symbols": ["DEL", "INS", "DUP", "INV", "CNV", "DUP_TANDEM", "DEL_ME", "INS_ME"], "doc":
"", "type": "enum", "name": "StructuralVariantFirstLevelType"}, "name": "firstLevelType"}, {"type":
["null", "string"], "name": "subtype"}]}, "name": "type"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}], "type": "record", "name": "ReportedStructuralVariantCancer"},
"name": "reportedStructuralVariantCancer"}, {"doc": "", "type": {"items": "AlleleOrigin", "type":
"array"}, "name": "alleleOrigins"}], "type": "record", "name": "ReportedSomaticStructuralVariants"},
"type": "array"}, "name": "structuralTieredVariants"}, {"doc": "", "type": "string", "name":
"tieringVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"},
{"doc": "", "type": ["null", {"values": "File", "type": "map"}], "name": "otherFiles"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "analysisUri",
        "analysisVersion",
        "annotationFile",
        "bams",
        "bigWigs",
        "cancerParticipant",
        "internalStudyId",
        "otherFiles",
        "reportRequestId",
        "reportVersion",
        "structuralTieredVariants",
        "tieredVariants",
        "tieringVersion",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'cancerParticipant': CancerParticipant,
            'otherFiles': File,
            'structuralTieredVariants': ReportedSomaticStructuralVariants,
            'tieredVariants': ReportedSomaticVariants,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'cancerParticipant': CancerParticipant,
            'otherFiles': File,
            'structuralTieredVariants': ReportedSomaticStructuralVariants,
            'tieredVariants': ReportedSomaticVariants,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'analysisUri', 'analysisVersion',
        'annotationFile', 'bams', 'bigWigs', 'cancerParticipant',
        'internalStudyId', 'interpretGenome', 'otherFiles',
        'reportRequestId', 'reportVersion',
        'structuralTieredVariants', 'tieredVariants',
        'tieringVersion', 'vcfs', 'versionControl', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.analysisUri = kwargs.get(
            'analysisUri', None)
        self.analysisVersion = kwargs.get(
            'analysisVersion', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.cancerParticipant = kwargs.get(
            'cancerParticipant', CancerParticipant())
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.interpretGenome = kwargs.get(
            'interpretGenome', False)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.reportRequestId = kwargs.get(
            'reportRequestId', None)
        self.reportVersion = kwargs.get(
            'reportVersion', None)
        self.structuralTieredVariants = kwargs.get(
            'structuralTieredVariants', None)
        self.tieredVariants = kwargs.get(
            'tieredVariants', None)
        self.tieringVersion = kwargs.get(
            'tieringVersion', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class CancerInterpretedGenome(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretedGenome",
"fields": [{"doc": "", "type": {"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "reportRequestId"}, {"doc": "", "type": "string", "name":
"analysisId"}, {"doc": "", "type": "string", "name": "reportUri"}, {"doc": "", "type": {"values":
"string", "type": "map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values":
"string", "type": "map"}, "name": "softwareVersions"}, {"type": {"items": {"fields": [{"doc": "",
"type": {"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int",
"name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type":
"string", "name": "alternate"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type":
["null", "string"], "name": "cDnaChange"}, {"doc": "", "type": ["null", "string"], "name":
"proteinChange"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "",
"type": ["null", "int"], "name": "depthAlternate"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "commonAf"}, {"doc": "", "type": ["null",
"int"], "name": "ihp"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "float", "type":
"map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}, {"type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "reportEventId"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": "string",
"name": "refSeqTranscriptId"}, {"doc": "", "type": "string", "name": "refSeqProteinId"}, {"doc": "",
"type": "string", "name": "geneName"}, {"doc": "", "type": ["null", {"symbols": ["oncogene", "TSG",
"both"], "type": "enum", "name": "RoleInCancer"}], "name": "roleInCancer"}], "type": "record",
"name": "GenomicFeatureCancer"}, "name": "genomicFeatureCancer"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "SoTerm", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "name"}]}, "type": "array"}, "name": "soTerms"},
{"doc": "", "type": ["null", {"items": {"fields": [{"type": "string", "name": "actionType"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name": "evidence"}, {"doc": "", "type":
["null", "string"], "name": "drug"}, {"doc": "", "type": ["null", "string"], "name": "status"},
{"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}, {"doc": "", "type": ["null", "string"], "name":
"url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"}, {"doc": "", "type":
"string", "name": "source"}], "type": "record", "name": "Actions"}, "type": "array"}], "name":
"actions"}, {"doc": "", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "",
"type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name":
"Tier"}], "name": "tier"}], "type": "record", "name": "ReportEventCancer"}, "type": "array"},
"name": "reportEvents"}], "type": "record", "name": "ReportedVariantCancer"}, "name":
"reportedVariantCancer"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}], "type": "record", "name":
"ReportedSomaticVariants"}, "type": "array"}, "name": "reportedVariants"}, {"type": {"items":
{"fields": [{"doc": "", "type": {"fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "",
"type": {"doc": "", "type": "record", "name": "StructuralVariantType", "fields": [{"type":
{"symbols": ["DEL", "INS", "DUP", "INV", "CNV", "DUP_TANDEM", "DEL_ME", "INS_ME"], "doc": "",
"type": "enum", "name": "StructuralVariantFirstLevelType"}, "name": "firstLevelType"}, {"type":
["null", "string"], "name": "subtype"}]}, "name": "type"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}], "type": "record", "name": "ReportedStructuralVariantCancer"},
"name": "reportedStructuralVariantCancer"}, {"doc": "", "type": {"items": "AlleleOrigin", "type":
"array"}, "name": "alleleOrigins"}], "type": "record", "name": "ReportedSomaticStructuralVariants"},
"type": "array"}, "name": "reportedStructuralVariants"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "analysisId",
        "comments",
        "referenceDatabasesVersions",
        "reportRequestId",
        "reportUri",
        "reportedStructuralVariants",
        "reportedVariants",
        "softwareVersions",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariants': ReportedSomaticStructuralVariants,
            'reportedVariants': ReportedSomaticVariants,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariants': ReportedSomaticStructuralVariants,
            'reportedVariants': ReportedSomaticVariants,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'analysisId', 'comments', 'referenceDatabasesVersions',
        'reportRequestId', 'reportUri', 'reportedStructuralVariants',
        'reportedVariants', 'softwareVersions', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.analysisId = kwargs.get(
            'analysisId', None)
        self.comments = kwargs.get(
            'comments', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportRequestId = kwargs.get(
            'reportRequestId', None)
        self.reportUri = kwargs.get(
            'reportUri', None)
        self.reportedStructuralVariants = kwargs.get(
            'reportedStructuralVariants', None)
        self.reportedVariants = kwargs.get(
            'reportedVariants', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())


class CancerParticipant(ProtocolElement):
    """
    This defines a Cancer Demographics
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "CancerParticipant",
"fields": [{"type": "boolean", "name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "ConsentStatus", "fields": [{"default": false, "doc": "", "type":
"boolean", "name": "programmeConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"primaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", "string"],
"name": "center"}, {"type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string",
"name": "individualId"}, {"doc": "", "type": ["null", "string"], "name": "primaryDiagnosisDisease"},
{"doc": "", "type": ["null", "string"], "name": "primaryDiagnosisSubDisease"}, {"doc": "", "type":
{"symbols": ["FEMALE", "MALE", "UNKNOWN"], "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc":
"", "type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}, {"doc":
"", "type": ["null", "string"], "name": "assignedICD10"}, {"type": {"items": {"fields": [{"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name": "labSampleId"}, {"doc":
"", "type": "int", "name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD",
"CLL", "IIP", "MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name":
"programmePhase"}, {"doc": "", "type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST",
"CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC",
"HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL",
"OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS",
"UPPER_GASTROINTESTINAL", "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"TumourType"}], "name": "tumourType"}, {"doc": "", "type": ["null", "string"], "name":
"tumourSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"}, {"doc":
"", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "Phase"}], "name": "phase"},
{"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum", "name":
"TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "type": "enum", "name": "SampleSource"}], "name": "source"}, {"doc": "",
"type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS", "ASPIRATE"],
"type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}, {"doc": "", "type":
["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS", "CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY",
"LAPAROSCOPIC_EXCISION", "MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION",
"STEREOTACTICALLY_GUIDED_BIOPSY", "USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum",
"name": "TissueSource"}], "name": "tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA",
"RNA"], "type": "enum", "name": "Product"}], "name": "product"}, {"doc": "", "type": ["null",
"string"], "name": "TNMStageVersion"}, {"doc": "", "type": ["null", "string"], "name":
"TNMStageGrouping"}], "type": "record", "name": "TumourSample"}, "type": "array"}, "name":
"tumourSamples"}, {"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "sampleId"},
{"doc": "", "type": "int", "name": "labSampleId"}, {"doc": "", "type": ["null", "SampleSource"],
"name": "source"}, {"doc": "", "type": ["null", "Product"], "name": "product"}, {"doc": "", "type":
["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc": "", "type": ["null",
"ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null", "string"], "name":
"clinicalSampleDateTime"}], "type": "record", "name": "GermlineSample"}, "type": "array"}, "name":
"germlineSamples"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"MatchedSamples", "fields": [{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"},
{"doc": "", "type": ["null", "string"], "name": "tumourSampleId"}]}, "type": "array"}], "name":
"matchedSamples"}, {"doc": "", "type": ["null", {"fields": [{"default": "1.0.0", "doc": "", "type":
"string", "name": "GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name":
"versionControl"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "additionalInformation",
        "assignedICD10",
        "center",
        "consentStatus",
        "germlineSamples",
        "individualId",
        "matchedSamples",
        "primaryDiagnosisDisease",
        "primaryDiagnosisSubDisease",
        "readyForAnalysis",
        "sex",
        "tumourSamples",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
            'germlineSamples': GermlineSample,
            'matchedSamples': MatchedSamples,
            'tumourSamples': TumourSample,
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
            'germlineSamples': GermlineSample,
            'matchedSamples': MatchedSamples,
            'tumourSamples': TumourSample,
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'additionalInformation', 'assignedICD10', 'center',
        'consentStatus', 'germlineSamples', 'individualId',
        'matchedSamples', 'primaryDiagnosisDisease',
        'primaryDiagnosisSubDisease', 'readyForAnalysis', 'sex',
        'tumourSamples', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.assignedICD10 = kwargs.get(
            'assignedICD10', None)
        self.center = kwargs.get(
            'center', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.germlineSamples = kwargs.get(
            'germlineSamples', None)
        self.individualId = kwargs.get(
            'individualId', None)
        self.matchedSamples = kwargs.get(
            'matchedSamples', None)
        self.primaryDiagnosisDisease = kwargs.get(
            'primaryDiagnosisDisease', None)
        self.primaryDiagnosisSubDisease = kwargs.get(
            'primaryDiagnosisSubDisease', None)
        self.readyForAnalysis = kwargs.get(
            'readyForAnalysis', None)
        self.sex = kwargs.get(
            'sex', None)
        self.tumourSamples = kwargs.get(
            'tumourSamples', None)
        self.versionControl = kwargs.get(
            'versionControl', None)


class CaseShared(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CaseShared", "fields":
[{"type": {"items": "string", "type": "array"}, "name": "previousGroups"}, {"type": {"items":
"string", "type": "array"}, "name": "modifiedGroups"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedGroups",
        "previousGroups",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedGroups', 'previousGroups'
    ]

    def __init__(self, **kwargs):
        self.modifiedGroups = kwargs.get(
            'modifiedGroups', None)
        self.previousGroups = kwargs.get(
            'previousGroups', None)


class CaseSolvedFamily(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    partially = "partially"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class ChiSquare1KGenomesPhase3Pop(ProtocolElement):
    """
    Chi-square test for goodness of fit of this sample to 1000 Genomes
    Phase 3 populations
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name":
"ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR", "AMR", "EAS",
"EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chiSquare",
        "kGPopCategory",
        "kGSuperPopCategory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chiSquare', 'kGPopCategory', 'kGSuperPopCategory'
    ]

    def __init__(self, **kwargs):
        self.chiSquare = kwargs.get(
            'chiSquare', None)
        self.kGPopCategory = kwargs.get(
            'kGPopCategory', None)
        self.kGSuperPopCategory = kwargs.get(
            'kGSuperPopCategory', None)


class ClinicalReportCancer(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportCancer",
"fields": [{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type":
"string", "name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name":
"reportingDate"}, {"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null",
{"items": {"fields": [{"doc": "", "type": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null", "string"], "name":
"dbSnpId"}, {"doc": "", "type": ["null", "string"], "name": "cDnaChange"}, {"doc": "", "type":
["null", "string"], "name": "proteinChange"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": ["null", "double"], "name": "vaf"}, {"doc": "", "type": ["null", "int"], "name":
"commonAf"}, {"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}, {"type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": "string",
"name": "refSeqTranscriptId"}, {"doc": "", "type": "string", "name": "refSeqProteinId"}, {"doc": "",
"type": "string", "name": "geneName"}, {"doc": "", "type": ["null", {"symbols": ["oncogene", "TSG",
"both"], "type": "enum", "name": "RoleInCancer"}], "name": "roleInCancer"}], "type": "record",
"name": "GenomicFeatureCancer"}, "name": "genomicFeatureCancer"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "SoTerm", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "name"}]}, "type": "array"}, "name": "soTerms"},
{"doc": "", "type": ["null", {"items": {"fields": [{"type": "string", "name": "actionType"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name": "evidence"}, {"doc": "", "type":
["null", "string"], "name": "drug"}, {"doc": "", "type": ["null", "string"], "name": "status"},
{"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}, {"doc": "", "type": ["null", "string"], "name":
"url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"}, {"doc": "", "type":
"string", "name": "source"}], "type": "record", "name": "Actions"}, "type": "array"}], "name":
"actions"}, {"doc": "", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "",
"type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name":
"Tier"}], "name": "tier"}], "type": "record", "name": "ReportEventCancer"}, "type": "array"},
"name": "reportEvents"}], "type": "record", "name": "ReportedVariantCancer"}, "name":
"reportedVariantCancer"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}], "type": "record", "name":
"ReportedSomaticVariants"}, "type": "array"}], "name": "candidateVariants"}, {"doc": "", "type":
["null", {"items": {"fields": [{"doc": "", "type": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name":
"end"}, {"doc": "", "type": {"doc": "", "type": "record", "name": "StructuralVariantType", "fields":
[{"type": {"symbols": ["DEL", "INS", "DUP", "INV", "CNV", "DUP_TANDEM", "DEL_ME", "INS_ME"], "doc":
"", "type": "enum", "name": "StructuralVariantFirstLevelType"}, "name": "firstLevelType"}, {"type":
["null", "string"], "name": "subtype"}]}, "name": "type"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}], "type": "record", "name": "ReportedStructuralVariantCancer"},
"name": "reportedStructuralVariantCancer"}, {"doc": "", "type": {"items": "AlleleOrigin", "type":
"array"}, "name": "alleleOrigins"}], "type": "record", "name": "ReportedSomaticStructuralVariants"},
"type": "array"}], "name": "candidateStructuralVariants"}, {"doc": "", "type": "string", "name":
"genomicInterpretation"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "references"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}, {"doc": "", "type": {"values": {"items": {"values": "string", "type": "map"},
"type": "array"}, "type": "map"}, "name": "genePanelsCoverage"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "candidateStructuralVariants",
        "candidateVariants",
        "genePanelsCoverage",
        "genomicInterpretation",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "referenceDatabasesVersions",
        "references",
        "reportingDate",
        "softwareVersions",
        "user",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'candidateStructuralVariants': ReportedSomaticStructuralVariants,
            'candidateVariants': ReportedSomaticVariants,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'candidateStructuralVariants': ReportedSomaticStructuralVariants,
            'candidateVariants': ReportedSomaticVariants,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'candidateStructuralVariants', 'candidateVariants',
        'genePanelsCoverage', 'genomicInterpretation',
        'interpretationRequestId', 'interpretationRequestVersion',
        'referenceDatabasesVersions', 'references', 'reportingDate',
        'softwareVersions', 'user'
    ]

    def __init__(self, **kwargs):
        self.candidateStructuralVariants = kwargs.get(
            'candidateStructuralVariants', None)
        self.candidateVariants = kwargs.get(
            'candidateVariants', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomicInterpretation = kwargs.get(
            'genomicInterpretation', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.references = kwargs.get(
            'references', None)
        self.reportingDate = kwargs.get(
            'reportingDate', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.user = kwargs.get(
            'user', None)


class ClinicalReportRD(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportRD", "fields":
[{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "string",
"name": "interpretationRequestVersion"}, {"doc": "", "type": ["null", "string"], "name":
"interpretationRequestAnalysisVersion"}, {"doc": "", "type": "string", "name": "reportingDate"},
{"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null", {"items": {"fields":
[{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string",
"name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type":
{"items": {"doc": "", "type": "record", "name": "CalledGenotype", "fields": [{"doc": "", "type":
"string", "name": "gelId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type":
["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": ["null", "int"], "name": "copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "reportEventId"},
{"doc": "", "type": "string", "name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null",
"string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name": "genomicFeature"},
{"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "type":
"array"}], "name": "candidateVariants"}, {"doc": "", "type": ["null", {"items": {"fields": [{"doc":
"", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc":
"", "type": "int", "name": "end"}, {"doc": "", "type": "string", "name": "type"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"type":
{"items": "CalledGenotype", "type": "array"}, "name": "calledGenotypes"}, {"doc": "", "type":
{"items": "ReportEvent", "type": "array"}, "name": "reportEvents"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "evidenceIds"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}], "type":
"record", "name": "ReportedStructuralVariant"}, "type": "array"}], "name":
"candidateStructuralVariants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type":
"string", "name": "panelName"}, {"type": ["null", "string"], "name": "panelVersion"}], "type":
"record", "name": "AdditionalAnalysisPanel"}, "type": "array"}], "name":
"additionalAnalysisPanels"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "supportingEvidence"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalAnalysisPanels",
        "candidateStructuralVariants",
        "candidateVariants",
        "genomicInterpretation",
        "interpretationRequestAnalysisVersion",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "referenceDatabasesVersions",
        "reportingDate",
        "softwareVersions",
        "supportingEvidence",
        "user",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAnalysisPanels': AdditionalAnalysisPanel,
            'candidateStructuralVariants': ReportedStructuralVariant,
            'candidateVariants': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAnalysisPanels': AdditionalAnalysisPanel,
            'candidateStructuralVariants': ReportedStructuralVariant,
            'candidateVariants': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalAnalysisPanels', 'candidateStructuralVariants',
        'candidateVariants', 'genomicInterpretation',
        'interpretationRequestAnalysisVersion',
        'interpretationRequestId', 'interpretationRequestVersion',
        'referenceDatabasesVersions', 'reportingDate',
        'softwareVersions', 'supportingEvidence', 'user'
    ]

    def __init__(self, **kwargs):
        self.additionalAnalysisPanels = kwargs.get(
            'additionalAnalysisPanels', None)
        self.candidateStructuralVariants = kwargs.get(
            'candidateStructuralVariants', None)
        self.candidateVariants = kwargs.get(
            'candidateVariants', None)
        self.genomicInterpretation = kwargs.get(
            'genomicInterpretation', None)
        self.interpretationRequestAnalysisVersion = kwargs.get(
            'interpretationRequestAnalysisVersion', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportingDate = kwargs.get(
            'reportingDate', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.supportingEvidence = kwargs.get(
            'supportingEvidence', None)
        self.user = kwargs.get(
            'user', None)


class ClinicalUtility(object):
    """
    No documentation
    """
    none = "none"
    change_in_medication = "change_in_medication"
    surgical_option = "surgical_option"
    additional_surveillance_for_proband_or_relatives = "additional_surveillance_for_proband_or_relatives"
    clinical_trial_eligibility = "clinical_trial_eligibility"
    informs_reproductive_choice = "informs_reproductive_choice"
    unknown = "unknown"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class Code(object):
    """
    This code define the change type, it can define a general change
    in the case as CLOSED or can define a change in one or more
    variants:  * `C0`: **Case Closed successfully**: Clinical Report
    was generated with **one or more Candidate Variants**. * `C1`:
    **Case Closed unsuccessfully**: Clinical Report couldn't be
    generated because **no Candidate Variants were found**. * `C2`:
    **Case Blocked**: Errors were found in this cases and was sent to
    quarantine for further investigation * `C3`: **Case Shared**: This
    cases was shared with other group of users. * `C4`: **Supporting
    evidence change**: One or More supporting evidence were modified
    to the cases __(See ClinicalReport)__. * `C5`: **Variant added**:
    One or more variant were selected as Candidate Variants. * `C6`:
    **Variant removed**: One or more variant were removed as Candidate
    Variants. * `C7`: **Variant modified**: One or more Candidate
    Variants were modified __(Any change or comment over this variants
    should be capture)__.
    """
    C0 = "C0"
    C1 = "C1"
    C2 = "C2"
    C3 = "C3"
    C4 = "C4"
    C5 = "C5"
    C6 = "C6"
    C7 = "C7"

    def __hash__(self):
        return str(self).__hash__()


class ComplexGeneticPhenomena(object):
    """
    No documentation
    """
    mosaicism = "mosaicism"
    monosomy = "monosomy"
    disomy = "disomy"
    uniparental_disomy = "uniparental_disomy"
    trisomy = "trisomy"
    other_aneuploidy = "other_aneuploidy"

    def __hash__(self):
        return str(self).__hash__()


class ConfirmationDecision(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ConfirmationOutcome(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ConsentStatus(ProtocolElement):
    """
    Consent Status
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "ConsentStatus",
"fields": [{"default": false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'carrierStatusConsent', 'primaryFindingConsent',
        'programmeConsent', 'secondaryFindingConsent'
    ]

    def __init__(self, **kwargs):
        self.carrierStatusConsent = kwargs.get(
            'carrierStatusConsent', False)
        self.primaryFindingConsent = kwargs.get(
            'primaryFindingConsent', False)
        self.programmeConsent = kwargs.get(
            'programmeConsent', False)
        self.secondaryFindingConsent = kwargs.get(
            'secondaryFindingConsent', False)


class DeliveryTask(ProtocolElement):
    """
    Defines a delivery task. A delivery task identifies an instance of
    the whole delivery     interaction cycle, whether successful or
    not. This allows traceability and identification     of failed
    deliveries
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "DeliveryTask", "fields":
[{"doc": "", "type": "int", "name": "tieringResultId"}, {"doc": "", "type": "string", "name":
"basePath"}, {"type": "string", "name": "protocolVersion"}, {"type": {"symbols": ["rare_disease",
"cancer"], "type": "enum", "name": "AnalysisType"}, "name": "analysisType"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "analysisType",
        "basePath",
        "protocolVersion",
        "tieringResultId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'analysisType', 'basePath', 'protocolVersion',
        'tieringResultId'
    ]

    def __init__(self, **kwargs):
        self.analysisType = kwargs.get(
            'analysisType', None)
        self.basePath = kwargs.get(
            'basePath', None)
        self.protocolVersion = kwargs.get(
            'protocolVersion', None)
        self.tieringResultId = kwargs.get(
            'tieringResultId', None)


class DiseasePenetrance(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "DiseasePenetrance",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"symbols": ["complete",
"incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name": "penetrance"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "penetrance",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'penetrance', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class Disorder(ProtocolElement):
    """
    This is quite GEL specific. This is the way is stored in
    ModelCatalogue and PanelApp. Currently all specific disease titles
    are assigned to a disease subgroup so really only specificDisease
    needs to be completed but we add the others for generality
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Disorder", "fields":
[{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"}, {"doc": "", "type": ["null",
"string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null", "string"], "name":
"specificDisease"}, {"doc": "", "type": ["null", "string"], "name": "ageOfOnset"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "diseaseGroup",
        "diseaseSubGroup",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'diseaseGroup', 'diseaseSubGroup',
        'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.diseaseGroup = kwargs.get(
            'diseaseGroup', None)
        self.diseaseSubGroup = kwargs.get(
            'diseaseSubGroup', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class EthnicCategory(object):
    """
    This is the list of ethnics in ONS16  * `D`:  Mixed: White and
    Black Caribbean * `E`:  Mixed: White and Black African * `F`:
    Mixed: White and Asian * `G`:  Mixed: Any other mixed background *
    `A`:  White: British * `B`:  White: Irish * `C`:  White: Any other
    White background * `L`:  Asian or Asian British: Any other Asian
    background * `M`:  Black or Black British: Caribbean * `N`:  Black
    or Black British: African * `H`:  Asian or Asian British: Indian *
    `J`:  Asian or Asian British: Pakistani * `K`:  Asian or Asian
    British: Bangladeshi * `P`:  Black or Black British: Any other
    Black background * `S`:  Other Ethnic Groups: Any other ethnic
    group * `R`:  Other Ethnic Groups: Chinese * `Z`:  Not stated
    """
    D = "D"
    E = "E"
    F = "F"
    G = "G"
    A = "A"
    B = "B"
    C = "C"
    L = "L"
    M = "M"
    N = "N"
    H = "H"
    J = "J"
    K = "K"
    P = "P"
    S = "S"
    R = "R"
    Z = "Z"

    def __hash__(self):
        return str(self).__hash__()


class FamilyLevelQuestions(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions",
"fields": [{"doc": "", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum",
"name": "CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes",
"no"], "type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "",
"type": "string", "name": "additionalComments"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "caseSolvedFamily",
        "segregationQuestion",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'caseSolvedFamily',
        'segregationQuestion'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.caseSolvedFamily = kwargs.get(
            'caseSolvedFamily', None)
        self.segregationQuestion = kwargs.get(
            'segregationQuestion', None)


class FamilyQCState(object):
    """
    FamilyQCState
    """
    noState = "noState"
    passedMedicalReviewReadyForInterpretation = "passedMedicalReviewReadyForInterpretation"
    passedMedicalReviewNotReadyForInterpretation = "passedMedicalReviewNotReadyForInterpretation"
    queryToGel = "queryToGel"
    queryToGMC = "queryToGMC"
    failed = "failed"

    def __hash__(self):
        return str(self).__hash__()


class FeatureTypes(object):
    """
    No documentation
    """
    RegulatoryRegion = "RegulatoryRegion"
    Gene = "Gene"
    Transcript = "Transcript"

    def __hash__(self):
        return str(self).__hash__()


class File(ProtocolElement):
    """
    This defines a file     This Record is defined by the sampleID and
    a URI     Currently SampleID can be a single String or an array of
    strings if multiple samples are associated with the same file
    *
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "File", "fields": [{"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"}, {"doc": "", "type":
"string", "name": "uriFile"}, {"type": {"symbols": ["BAM", "gVCF", "VCF_small", "VCF_somatic_small",
"VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV", "VCF_SV_CNV", "SVG", "ANN", "BigWig",
"MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES", "COVERAGE"], "type": "enum", "name":
"FileType"}, "name": "fileType"}, {"type": ["null", "string"], "name": "md5Sum"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "fileType",
        "md5Sum",
        "sampleId",
        "uriFile",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fileType', 'md5Sum', 'sampleId', 'uriFile'
    ]

    def __init__(self, **kwargs):
        self.fileType = kwargs.get(
            'fileType', None)
        self.md5Sum = kwargs.get(
            'md5Sum', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.uriFile = kwargs.get(
            'uriFile', None)


class FileType(object):
    """
    No documentation
    """
    BAM = "BAM"
    gVCF = "gVCF"
    VCF_small = "VCF_small"
    VCF_somatic_small = "VCF_somatic_small"
    VCF_CNV = "VCF_CNV"
    VCF_somatic_CNV = "VCF_somatic_CNV"
    VCF_SV = "VCF_SV"
    VCF_somatic_SV = "VCF_somatic_SV"
    VCF_SV_CNV = "VCF_SV_CNV"
    SVG = "SVG"
    ANN = "ANN"
    BigWig = "BigWig"
    MD5Sum = "MD5Sum"
    ROH = "ROH"
    OTHER = "OTHER"
    PARTITION = "PARTITION"
    VARIANT_FREQUENCIES = "VARIANT_FREQUENCIES"
    COVERAGE = "COVERAGE"

    def __hash__(self):
        return str(self).__hash__()


class GenomicFeature(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "GenomicFeature", "fields":
[{"doc": "", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "otherIds"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ensemblId",
        "featureType",
        "hgnc",
        "otherIds",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ensemblId', 'featureType', 'hgnc', 'otherIds'
    ]

    def __init__(self, **kwargs):
        self.ensemblId = kwargs.get(
            'ensemblId', None)
        self.featureType = kwargs.get(
            'featureType', None)
        self.hgnc = kwargs.get(
            'hgnc', None)
        self.otherIds = kwargs.get(
            'otherIds', None)


class GenomicFeatureCancer(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "GenomicFeatureCancer",
"fields": [{"doc": "", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type":
"enum", "name": "FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name":
"ensemblId"}, {"doc": "", "type": "string", "name": "refSeqTranscriptId"}, {"doc": "", "type":
"string", "name": "refSeqProteinId"}, {"doc": "", "type": "string", "name": "geneName"}, {"doc": "",
"type": ["null", {"symbols": ["oncogene", "TSG", "both"], "type": "enum", "name": "RoleInCancer"}],
"name": "roleInCancer"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ensemblId",
        "featureType",
        "geneName",
        "refSeqProteinId",
        "refSeqTranscriptId",
        "roleInCancer",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ensemblId', 'featureType', 'geneName', 'refSeqProteinId',
        'refSeqTranscriptId', 'roleInCancer'
    ]

    def __init__(self, **kwargs):
        self.ensemblId = kwargs.get(
            'ensemblId', None)
        self.featureType = kwargs.get(
            'featureType', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.refSeqProteinId = kwargs.get(
            'refSeqProteinId', None)
        self.refSeqTranscriptId = kwargs.get(
            'refSeqTranscriptId', None)
        self.roleInCancer = kwargs.get(
            'roleInCancer', None)


class GermlineSample(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "GermlineSample",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "type": "enum", "name": "SampleSource"}], "name": "source"}, {"doc": "",
"type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name":
"product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL", "IIP",
"MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"}, {"doc": "",
"type": ["null", "string"], "name": "clinicalSampleDateTime"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "clinicalSampleDateTime",
        "labSampleId",
        "preparationMethod",
        "product",
        "programmePhase",
        "sampleId",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'clinicalSampleDateTime', 'labSampleId', 'preparationMethod',
        'product', 'programmePhase', 'sampleId', 'source'
    ]

    def __init__(self, **kwargs):
        self.clinicalSampleDateTime = kwargs.get(
            'clinicalSampleDateTime', None)
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.programmePhase = kwargs.get(
            'programmePhase', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)


class HpoTerm(ProtocolElement):
    """
    This defines an HPO term and its modifiers (possibly multiple) If
    HPO term presence is unknown we don't have a entry on the list
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "HpoTerm", "fields":
[{"doc": "", "type": "string", "name": "term"}, {"doc": "", "type": ["null", {"symbols": ["yes",
"no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "termPresence"},
{"doc": "", "type": ["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"],
"name": "ageOfOnset"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "hpoBuildNumber",
        "modifiers",
        "term",
        "termPresence",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'hpoBuildNumber', 'modifiers', 'term',
        'termPresence'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.hpoBuildNumber = kwargs.get(
            'hpoBuildNumber', None)
        self.modifiers = kwargs.get(
            'modifiers', None)
        self.term = kwargs.get(
            'term', None)
        self.termPresence = kwargs.get(
            'termPresence', None)


class InbreedingCoefficient(ProtocolElement):
    """
    Inbreeding coefficient
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "coefficient",
        "estimationMethod",
        "program",
        "sampleId",
        "standardError",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'coefficient', 'estimationMethod', 'program', 'sampleId',
        'standardError', 'version'
    ]

    def __init__(self, **kwargs):
        self.coefficient = kwargs.get(
            'coefficient', None)
        self.estimationMethod = kwargs.get(
            'estimationMethod', None)
        self.program = kwargs.get(
            'program', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.standardError = kwargs.get(
            'standardError', None)
        self.version = kwargs.get(
            'version', None)


class InterpretationData(ProtocolElement):
    """
    Represents the set of all interpretation data (excluding file
    contents) to be stored in MDT for         one TieringResult.
    Semantic restrictions (not automatically verifiable):
    - All InterpretedGenomesRD in interpretationResults refer to the
    TieringResult tieringResult.             - All
    InterpretedGenomesRD in interpretationResults have passed the QC
    stage and have been               approved by the originating GMCs
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationData",
"fields": [{"type": {"doc": "", "type": "record", "name": "TieringResult", "fields": [{"doc": "",
"type": {"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name": "gitVersionControl"}],
"type": "record", "name": "ReportVersionControl"}, "name": "versionControl"}, {"default":
"GRCh37.p13", "doc": "", "type": "string", "name": "genomeAssemblyVersion"}, {"default": "4.0",
"doc": "", "type": "string", "name": "cellbaseVersion"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "workspace"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "File", "fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "sampleId"}, {"doc": "", "type": "string", "name": "uriFile"}, {"type": {"symbols": ["BAM",
"gVCF", "VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"type": ["null", "string"],
"name": "md5Sum"}]}, "type": "array"}, "name": "bams"}, {"doc": "", "type": {"items": "File",
"type": "array"}, "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File", "type": "array"}],
"name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name": "pedigreeDiagram"}, {"doc": "",
"type": ["null", "File"], "name": "annotationFile"}, {"doc": "", "type": ["null", {"values": "File",
"type": "map"}], "name": "otherFiles"}, {"doc": "", "type": {"namespace":
"org.gel.models.participant.avro", "type": "record", "name": "Pedigree", "fields": [{"doc": "",
"type": ["null", {"fields": [{"default": "1.0.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name": "familyId"},
{"type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember", "fields": [{"doc": "",
"type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null", "boolean"], "name":
"isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"}, {"doc": "", "type":
["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "Ancestries", "fields": [{"doc": "", "type": ["null", {"symbols": ["D",
"E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type":
"enum", "name": "EthnicCategory"}], "name": "mothersEthnicOrigin"}, {"doc": "", "type": ["null",
"string"], "name": "mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"],
"name": "fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}], "type":
"record", "name": "Sample"}, "type": "array"}], "name": "samples"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "InbreedingCoefficient", "fields": [{"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": "string", "name": "program"}, {"doc": "", "type":
"string", "name": "version"}, {"doc": "", "type": "string", "name": "estimationMethod"}, {"doc": "",
"type": "double", "name": "coefficient"}, {"doc": "", "type": ["null", "double"], "name":
"standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalInformation"}]}, "type": "array"}, "name": "members"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type":
"string", "name": "panelName"}, {"type": ["null", "string"], "name": "panelVersion"}, {"type":
"string", "name": "reviewOutcome"}, {"type": "string", "name": "multipleGeneticOrigins"}], "type":
"record", "name": "AnalysisPanel"}, "type": "array"}], "name": "analysisPanels"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "type": "record", "name": "DiseasePenetrance"}, "type": "array"}], "name":
"diseasePenetrances"}, {"type": "boolean", "name": "readyForAnalysis"}, {"type": ["null",
{"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "FamilyQCState"}], "name": "familyQCState"}], "doc": ""}, "name":
"pedigree"}, {"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type":
"int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type":
"string", "name": "alternate"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"CalledGenotype", "fields": [{"doc": "", "type": "string", "name": "gelId"}, {"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk"], "doc": "", "type":
"enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type": ["null", "int"], "name":
"phaseSet"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type":
["null", "int"], "name": "depthAlternate"}, {"doc": "", "type": ["null", "int"], "name":
"copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"}, {"doc": "", "type": {"items":
{"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": "string",
"name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name": "panelName"}, {"doc": "",
"type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"fields":
[{"doc": "", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name":
"genomicFeature"}, {"doc": "", "type": "org.gel.models.participant.avro.Penetrance", "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "type":
"array"}, "name": "tieredVariants"}, {"doc": "", "type": "string", "name": "tieringVersion"},
{"doc": "", "type": "string", "name": "internalStudyId"}, {"doc": "", "type": ["null", {"symbols":
["mosaicism", "monosomy", "disomy", "uniparental_disomy", "trisomy", "other_aneuploidy"], "type":
"enum", "name": "ComplexGeneticPhenomena"}], "name": "complexGeneticPhenomena"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float",
"type": "map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}]}, "name":
"tieringResult"}, {"type": {"items": {"fields": [{"doc": "", "type": "ReportVersionControl", "name":
"versionControl"}, {"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "",
"type": "string", "name": "analysisId"}, {"doc": "", "type": "string", "name": "companyName"},
{"doc": "", "type": "string", "name": "reportUri"}, {"doc": "", "type": "string", "name":
"reportUrl"}, {"doc": "", "type": {"items": "ReportedVariant", "type": "array"}, "name":
"reportedVariants"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}, {"doc": "", "type": ["null", {"items": {"fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type":
"int", "name": "end"}, {"doc": "", "type": "string", "name": "type"}, {"doc": "", "type": "string",
"name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"type": {"items":
"CalledGenotype", "type": "array"}, "name": "calledGenotypes"}, {"doc": "", "type": {"items":
"ReportEvent", "type": "array"}, "name": "reportEvents"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "comments"}], "type": "record",
"name": "ReportedStructuralVariant"}, "type": "array"}], "name": "reportedStructuralVariants"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}], "type":
"record", "name": "InterpretedGenomeRD"}, "type": "array"}, "name": "interpretationResults"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "interpretationResults",
        "tieringResult",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretationResults': InterpretedGenomeRD,
            'tieringResult': TieringResult,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretationResults': InterpretedGenomeRD,
            'tieringResult': TieringResult,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'interpretationResults', 'tieringResult'
    ]

    def __init__(self, **kwargs):
        self.interpretationResults = kwargs.get(
            'interpretationResults', None)
        self.tieringResult = kwargs.get(
            'tieringResult', TieringResult())


class InterpretationRequestRD(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationRequestRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "string",
"name": "internalStudyId"}, {"default": "GRCh37.p13", "doc": "", "type": "string", "name":
"genomeAssemblyVersion"}, {"default": "4.0", "doc": "", "type": "string", "name":
"cellbaseVersion"}, {"doc": "", "type": "int", "name": "interpretationRequestVersion"}, {"default":
false, "doc": "", "type": "boolean", "name": "interpretGenome"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "workspace"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "File", "fields": [{"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "sampleId"}, {"doc": "", "type": "string", "name": "uriFile"}, {"type":
{"symbols": ["BAM", "gVCF", "VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV",
"VCF_SV", "VCF_somatic_SV", "VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER",
"PARTITION", "VARIANT_FREQUENCIES", "COVERAGE"], "type": "enum", "name": "FileType"}, "name":
"fileType"}, {"type": ["null", "string"], "name": "md5Sum"}]}, "type": "array"}, "name": "bams"},
{"doc": "", "type": {"items": "File", "type": "array"}, "name": "vcfs"}, {"doc": "", "type":
["null", {"items": "File", "type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null",
"File"], "name": "pedigreeDiagram"}, {"doc": "", "type": ["null", "File"], "name":
"annotationFile"}, {"doc": "", "type": ["null", {"values": "File", "type": "map"}], "name":
"otherFiles"}, {"doc": "", "type": {"namespace": "org.gel.models.participant.avro", "type":
"record", "name": "Pedigree", "fields": [{"doc": "", "type": ["null", {"fields": [{"default":
"1.0.0", "doc": "", "type": "string", "name": "GitVersionControl"}], "type": "record", "name":
"VersionControl"}], "name": "versionControl"}, {"type": ["null", "string"], "name": "LDPCode"},
{"doc": "", "type": "string", "name": "familyId"}, {"type": {"items": {"doc": "", "type": "record",
"name": "PedigreeMember", "fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"},
{"doc": "", "type": ["null", "boolean"], "name": "isProband"}, {"doc": "", "type": ["null",
"string"], "name": "participantId"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "ParticipantQCState"}],
"name": "participantQCState"}, {"doc": "", "type": ["null", "string"], "name": "gelSuperFamilyId"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"symbols": ["UNKNOWN", "XX", "XY", "XO",
"XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"], "doc": "", "type": "enum", "name":
"PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc": "", "type": ["null", "int"],
"name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name": "fatherId"}, {"doc": "",
"type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null", "int"], "name":
"superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols": ["yes", "no",
"unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "monozygotic"}, {"doc":
"", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"], "doc": "", "type":
"enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type": ["null",
{"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc": "",
"type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "Ancestries", "fields": [{"doc": "", "type": ["null", {"symbols": ["D",
"E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type":
"enum", "name": "EthnicCategory"}], "name": "mothersEthnicOrigin"}, {"doc": "", "type": ["null",
"string"], "name": "mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"],
"name": "fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}], "type":
"record", "name": "Sample"}, "type": "array"}], "name": "samples"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "InbreedingCoefficient", "fields": [{"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": "string", "name": "program"}, {"doc": "", "type":
"string", "name": "version"}, {"doc": "", "type": "string", "name": "estimationMethod"}, {"doc": "",
"type": "double", "name": "coefficient"}, {"doc": "", "type": ["null", "double"], "name":
"standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalInformation"}]}, "type": "array"}, "name": "members"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type":
"string", "name": "panelName"}, {"type": ["null", "string"], "name": "panelVersion"}, {"type":
"string", "name": "reviewOutcome"}, {"type": "string", "name": "multipleGeneticOrigins"}], "type":
"record", "name": "AnalysisPanel"}, "type": "array"}], "name": "analysisPanels"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "type": "record", "name": "DiseasePenetrance"}, "type": "array"}], "name":
"diseasePenetrances"}, {"type": "boolean", "name": "readyForAnalysis"}, {"type": ["null",
{"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "FamilyQCState"}], "name": "familyQCState"}], "doc": ""}, "name":
"pedigree"}, {"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type":
"int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type":
"string", "name": "alternate"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"CalledGenotype", "fields": [{"doc": "", "type": "string", "name": "gelId"}, {"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk"], "doc": "", "type":
"enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type": ["null", "int"], "name":
"phaseSet"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type":
["null", "int"], "name": "depthAlternate"}, {"doc": "", "type": ["null", "int"], "name":
"copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"}, {"doc": "", "type": {"items":
{"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": "string",
"name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name": "panelName"}, {"doc": "",
"type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"fields":
[{"doc": "", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name":
"genomicFeature"}, {"doc": "", "type": "org.gel.models.participant.avro.Penetrance", "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "type":
"array"}, "name": "tieredVariants"}, {"doc": "", "type": "string", "name": "tieringVersion"},
{"doc": "", "type": ["null", {"symbols": ["mosaicism", "monosomy", "disomy", "uniparental_disomy",
"trisomy", "other_aneuploidy"], "type": "enum", "name": "ComplexGeneticPhenomena"}], "name":
"complexGeneticPhenomena"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "maternalFamilyHistory"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "paternalFamilyHistory"}]}], "name": "otherFamilyHistory"}, {"doc": "", "type":
"string", "name": "analysisReturnUri"}, {"doc": "", "type": ["null", "string"], "name":
"analysisVersion"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float", "type":
"map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalInfo"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "analysisReturnUri",
        "analysisVersion",
        "annotationFile",
        "bams",
        "bigWigs",
        "complexGeneticPhenomena",
        "genePanelsCoverage",
        "internalStudyId",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "otherFamilyHistory",
        "otherFiles",
        "pedigree",
        "pedigreeDiagram",
        "tieredVariants",
        "tieringVersion",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'tieredVariants': ReportedVariant,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'tieredVariants': ReportedVariant,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'analysisReturnUri', 'analysisVersion',
        'annotationFile', 'bams', 'bigWigs', 'cellbaseVersion',
        'complexGeneticPhenomena', 'genePanelsCoverage',
        'genomeAssemblyVersion', 'internalStudyId', 'interpretGenome',
        'interpretationRequestId', 'interpretationRequestVersion',
        'otherFamilyHistory', 'otherFiles', 'pedigree',
        'pedigreeDiagram', 'tieredVariants', 'tieringVersion', 'vcfs',
        'versionControl', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.analysisReturnUri = kwargs.get(
            'analysisReturnUri', None)
        self.analysisVersion = kwargs.get(
            'analysisVersion', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.cellbaseVersion = kwargs.get(
            'cellbaseVersion', '4.0')
        self.complexGeneticPhenomena = kwargs.get(
            'complexGeneticPhenomena', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomeAssemblyVersion = kwargs.get(
            'genomeAssemblyVersion', 'GRCh37.p13')
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.interpretGenome = kwargs.get(
            'interpretGenome', False)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.pedigree = kwargs.get(
            'pedigree', Pedigree())
        self.pedigreeDiagram = kwargs.get(
            'pedigreeDiagram', None)
        self.tieredVariants = kwargs.get(
            'tieredVariants', None)
        self.tieringVersion = kwargs.get(
            'tieringVersion', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class InterpretedGenomeRD(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretedGenomeRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "string",
"name": "analysisId"}, {"doc": "", "type": "string", "name": "companyName"}, {"doc": "", "type":
"string", "name": "reportUri"}, {"doc": "", "type": "string", "name": "reportUrl"}, {"doc": "",
"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "",
"type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": "int", "name": "position"},
{"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string", "name":
"alternate"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "CalledGenotype",
"fields": [{"doc": "", "type": "string", "name": "gelId"}, {"doc": "", "type": "string", "name":
"sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous", "heterozygous",
"alternate_homozygous", "missing", "half_missing_reference", "half_missing_alternate",
"alternate_hemizigous", "reference_hemizigous", "unk"], "doc": "", "type": "enum", "name":
"Zygosity"}, "name": "genotype"}, {"doc": "", "type": ["null", "int"], "name": "phaseSet"}, {"doc":
"", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": ["null", "int"], "name": "copyNumber"}]}, "type": "array"},
"name": "calledGenotypes"}, {"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string",
"name": "reportEventId"}, {"doc": "", "type": "string", "name": "phenotype"}, {"doc": "", "type":
["null", "string"], "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"fields": [{"doc":
"", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name":
"genomicFeature"}, {"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "type":
"array"}, "name": "reportedVariants"}, {"doc": "", "type": {"values": "string", "type": "map"},
"name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"},
"name": "softwareVersions"}, {"doc": "", "type": ["null", {"items": {"fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type":
"int", "name": "end"}, {"doc": "", "type": "string", "name": "type"}, {"doc": "", "type": "string",
"name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"type": {"items":
"CalledGenotype", "type": "array"}, "name": "calledGenotypes"}, {"doc": "", "type": {"items":
"ReportEvent", "type": "array"}, "name": "reportEvents"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "comments"}], "type": "record",
"name": "ReportedStructuralVariant"}, "type": "array"}], "name": "reportedStructuralVariants"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "analysisId",
        "comments",
        "companyName",
        "interpretationRequestId",
        "referenceDatabasesVersions",
        "reportUri",
        "reportUrl",
        "reportedStructuralVariants",
        "reportedVariants",
        "softwareVersions",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariants': ReportedStructuralVariant,
            'reportedVariants': ReportedVariant,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariants': ReportedStructuralVariant,
            'reportedVariants': ReportedVariant,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'analysisId', 'comments', 'companyName',
        'interpretationRequestId', 'referenceDatabasesVersions',
        'reportUri', 'reportUrl', 'reportedStructuralVariants',
        'reportedVariants', 'softwareVersions', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.analysisId = kwargs.get(
            'analysisId', None)
        self.comments = kwargs.get(
            'comments', None)
        self.companyName = kwargs.get(
            'companyName', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportUri = kwargs.get(
            'reportUri', None)
        self.reportUrl = kwargs.get(
            'reportUrl', None)
        self.reportedStructuralVariants = kwargs.get(
            'reportedStructuralVariants', None)
        self.reportedVariants = kwargs.get(
            'reportedVariants', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())


class KGPopCategory(object):
    """
    1K Population
    """
    ACB = "ACB"
    ASW = "ASW"
    BEB = "BEB"
    CDX = "CDX"
    CEU = "CEU"
    CHB = "CHB"
    CHS = "CHS"
    CLM = "CLM"
    ESN = "ESN"
    FIN = "FIN"
    GBR = "GBR"
    GIH = "GIH"
    GWD = "GWD"
    IBS = "IBS"
    ITU = "ITU"
    JPT = "JPT"
    KHV = "KHV"
    LWK = "LWK"
    MSL = "MSL"
    MXL = "MXL"
    PEL = "PEL"
    PJL = "PJL"
    PUR = "PUR"
    STU = "STU"
    TSI = "TSI"
    YRI = "YRI"

    def __hash__(self):
        return str(self).__hash__()


class KGSuperPopCategory(object):
    """
    1K Super Population
    """
    AFR = "AFR"
    AMR = "AMR"
    EAS = "EAS"
    EUR = "EUR"
    SAS = "SAS"

    def __hash__(self):
        return str(self).__hash__()


class LifeStatus(object):
    """
    Life Status
    """
    ALIVE = "ALIVE"
    ABORTED = "ABORTED"
    DECEASED = "DECEASED"
    UNBORN = "UNBORN"
    STILLBORN = "STILLBORN"
    MISCARRIAGE = "MISCARRIAGE"

    def __hash__(self):
        return str(self).__hash__()


class MatchedSamples(ProtocolElement):
    """
    This define a pair of germline and tumor, this pair should/must be
    analyzed together
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "MatchedSamples",
"fields": [{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type":
["null", "string"], "name": "tumourSampleId"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "germlineSampleId",
        "tumourSampleId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'germlineSampleId', 'tumourSampleId'
    ]

    def __init__(self, **kwargs):
        self.germlineSampleId = kwargs.get(
            'germlineSampleId', None)
        self.tumourSampleId = kwargs.get(
            'tumourSampleId', None)


class Method(object):
    """
    No documentation
    """
    RESECTION = "RESECTION"
    BIOPSY = "BIOPSY"
    BLOOD = "BLOOD"

    def __hash__(self):
        return str(self).__hash__()


class ModifiedVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ModifiedVariant", "fields":
[{"type": {"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type":
["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc":
"", "type": {"items": {"doc": "", "type": "record", "name": "CalledGenotype", "fields": [{"doc": "",
"type": "string", "name": "gelId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "",
"type": {"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type":
["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": ["null", "int"], "name": "copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "reportEventId"},
{"doc": "", "type": "string", "name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null",
"string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name": "genomicFeature"},
{"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "name":
"previousVariant"}, {"type": "ReportedVariant", "name": "modifiedVariant"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedVariant",
        "previousVariant",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiedVariant': ReportedVariant,
            'previousVariant': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiedVariant': ReportedVariant,
            'previousVariant': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedVariant', 'previousVariant'
    ]

    def __init__(self, **kwargs):
        self.modifiedVariant = kwargs.get(
            'modifiedVariant', ReportedVariant())
        self.previousVariant = kwargs.get(
            'previousVariant', ReportedVariant())


class OtherFamilyHistory(ProtocolElement):
    """
    Family history for secondary findings.     Arrays of strings
    describing discrete family history phenotypes.     Usually:
    `EndocrineTumours`, `colorectal`, `BreastOvarian` and `HDOrStroke`
    but can be others
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "OtherFamilyHistory",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"maternalFamilyHistory"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "paternalFamilyHistory"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "maternalFamilyHistory",
        "paternalFamilyHistory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'maternalFamilyHistory', 'paternalFamilyHistory'
    ]

    def __init__(self, **kwargs):
        self.maternalFamilyHistory = kwargs.get(
            'maternalFamilyHistory', None)
        self.paternalFamilyHistory = kwargs.get(
            'paternalFamilyHistory', None)


class ParticipantQCState(object):
    """
    QCState Status
    """
    noState = "noState"
    passedMedicalReviewReadyForInterpretation = "passedMedicalReviewReadyForInterpretation"
    passedMedicalReviewNotReadyForInterpretation = "passedMedicalReviewNotReadyForInterpretation"
    queryToGel = "queryToGel"
    queryToGMC = "queryToGMC"
    failed = "failed"

    def __hash__(self):
        return str(self).__hash__()


class Pedigree(ProtocolElement):
    """
    This is the concept of a family with associated phenotypes as
    present in the record RDParticipant
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree", "fields":
[{"doc": "", "type": ["null", {"fields": [{"default": "1.0.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name": "familyId"},
{"type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember", "fields": [{"doc": "",
"type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null", "boolean"], "name":
"isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"}, {"doc": "", "type":
["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "Ancestries", "fields": [{"doc": "", "type": ["null", {"symbols": ["D",
"E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type":
"enum", "name": "EthnicCategory"}], "name": "mothersEthnicOrigin"}, {"doc": "", "type": ["null",
"string"], "name": "mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"],
"name": "fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}], "type":
"record", "name": "Sample"}, "type": "array"}], "name": "samples"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "InbreedingCoefficient", "fields": [{"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": "string", "name": "program"}, {"doc": "", "type":
"string", "name": "version"}, {"doc": "", "type": "string", "name": "estimationMethod"}, {"doc": "",
"type": "double", "name": "coefficient"}, {"doc": "", "type": ["null", "double"], "name":
"standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalInformation"}]}, "type": "array"}, "name": "members"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type":
"string", "name": "panelName"}, {"type": ["null", "string"], "name": "panelVersion"}, {"type":
"string", "name": "reviewOutcome"}, {"type": "string", "name": "multipleGeneticOrigins"}], "type":
"record", "name": "AnalysisPanel"}, "type": "array"}], "name": "analysisPanels"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "type": "record", "name": "DiseasePenetrance"}, "type": "array"}], "name":
"diseasePenetrances"}, {"type": "boolean", "name": "readyForAnalysis"}, {"type": ["null",
{"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "FamilyQCState"}], "name": "familyQCState"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "analysisPanels",
        "diseasePenetrances",
        "familyId",
        "familyQCState",
        "members",
        "readyForAnalysis",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analysisPanels': AnalysisPanel,
            'diseasePenetrances': DiseasePenetrance,
            'members': PedigreeMember,
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analysisPanels': AnalysisPanel,
            'diseasePenetrances': DiseasePenetrance,
            'members': PedigreeMember,
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'analysisPanels', 'diseasePenetrances', 'familyId',
        'familyQCState', 'members', 'readyForAnalysis',
        'versionControl'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.analysisPanels = kwargs.get(
            'analysisPanels', None)
        self.diseasePenetrances = kwargs.get(
            'diseasePenetrances', None)
        self.familyId = kwargs.get(
            'familyId', None)
        self.familyQCState = kwargs.get(
            'familyQCState', None)
        self.members = kwargs.get(
            'members', None)
        self.readyForAnalysis = kwargs.get(
            'readyForAnalysis', None)
        self.versionControl = kwargs.get(
            'versionControl', None)


class PedigreeMember(ProtocolElement):
    """
    This defines a RD Participant (demographics and pedigree
    information)
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "Ancestries", "fields": [{"doc": "", "type": ["null", {"symbols": ["D",
"E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type":
"enum", "name": "EthnicCategory"}], "name": "mothersEthnicOrigin"}, {"doc": "", "type": ["null",
"string"], "name": "mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"],
"name": "fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}], "type":
"record", "name": "Sample"}, "type": "array"}], "name": "samples"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "InbreedingCoefficient", "fields": [{"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": "string", "name": "program"}, {"doc": "", "type":
"string", "name": "version"}, {"doc": "", "type": "string", "name": "estimationMethod"}, {"doc": "",
"type": "double", "name": "coefficient"}, {"doc": "", "type": ["null", "double"], "name":
"standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalInformation"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInformation",
        "adoptedStatus",
        "affectionStatus",
        "ancestries",
        "consanguineousParents",
        "consentStatus",
        "disorderList",
        "fatherId",
        "gelSuperFamilyId",
        "hpoTermList",
        "inbreedingCoefficient",
        "isProband",
        "lifeStatus",
        "monozygotic",
        "motherId",
        "participantId",
        "participantQCState",
        "pedigreeId",
        "personKaryotypicSex",
        "samples",
        "sex",
        "superFatherId",
        "superMotherId",
        "twinGroup",
        "yearOfBirth",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ancestries': Ancestries,
            'consentStatus': ConsentStatus,
            'disorderList': Disorder,
            'hpoTermList': HpoTerm,
            'inbreedingCoefficient': InbreedingCoefficient,
            'samples': Sample,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ancestries': Ancestries,
            'consentStatus': ConsentStatus,
            'disorderList': Disorder,
            'hpoTermList': HpoTerm,
            'inbreedingCoefficient': InbreedingCoefficient,
            'samples': Sample,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInformation', 'adoptedStatus', 'affectionStatus',
        'ancestries', 'consanguineousParents', 'consentStatus',
        'disorderList', 'fatherId', 'gelSuperFamilyId', 'hpoTermList',
        'inbreedingCoefficient', 'isProband', 'lifeStatus',
        'monozygotic', 'motherId', 'participantId',
        'participantQCState', 'pedigreeId', 'personKaryotypicSex',
        'samples', 'sex', 'superFatherId', 'superMotherId',
        'twinGroup', 'yearOfBirth'
    ]

    def __init__(self, **kwargs):
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.adoptedStatus = kwargs.get(
            'adoptedStatus', None)
        self.affectionStatus = kwargs.get(
            'affectionStatus', None)
        self.ancestries = kwargs.get(
            'ancestries', None)
        self.consanguineousParents = kwargs.get(
            'consanguineousParents', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.disorderList = kwargs.get(
            'disorderList', None)
        self.fatherId = kwargs.get(
            'fatherId', None)
        self.gelSuperFamilyId = kwargs.get(
            'gelSuperFamilyId', None)
        self.hpoTermList = kwargs.get(
            'hpoTermList', None)
        self.inbreedingCoefficient = kwargs.get(
            'inbreedingCoefficient', None)
        self.isProband = kwargs.get(
            'isProband', None)
        self.lifeStatus = kwargs.get(
            'lifeStatus', None)
        self.monozygotic = kwargs.get(
            'monozygotic', None)
        self.motherId = kwargs.get(
            'motherId', None)
        self.participantId = kwargs.get(
            'participantId', None)
        self.participantQCState = kwargs.get(
            'participantQCState', None)
        self.pedigreeId = kwargs.get(
            'pedigreeId', None)
        self.personKaryotypicSex = kwargs.get(
            'personKaryotypicSex', None)
        self.samples = kwargs.get(
            'samples', None)
        self.sex = kwargs.get(
            'sex', None)
        self.superFatherId = kwargs.get(
            'superFatherId', None)
        self.superMotherId = kwargs.get(
            'superMotherId', None)
        self.twinGroup = kwargs.get(
            'twinGroup', None)
        self.yearOfBirth = kwargs.get(
            'yearOfBirth', None)


class Penetrance(object):
    """
    Penetrance assumed in the analysis
    """
    complete = "complete"
    incomplete = "incomplete"

    def __hash__(self):
        return str(self).__hash__()


class PersonKaryotipicSex(object):
    """
    Karyotipic Sex
    """
    UNKNOWN = "UNKNOWN"
    XX = "XX"
    XY = "XY"
    XO = "XO"
    XXY = "XXY"
    XXX = "XXX"
    XXYY = "XXYY"
    XXXY = "XXXY"
    XXXX = "XXXX"
    XYY = "XYY"
    OTHER = "OTHER"

    def __hash__(self):
        return str(self).__hash__()


class Phase(object):
    """
    No documentation
    """
    PRIMARY = "PRIMARY"
    METASTATIC_RECURRENCE = "METASTATIC_RECURRENCE"
    RECURRENCE_OF_PRIMARY_TUMOUR = "RECURRENCE_OF_PRIMARY_TUMOUR"
    METASTASES = "METASTASES"

    def __hash__(self):
        return str(self).__hash__()


class PhenotypesSolved(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    partially = "partially"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class PreparationMethod(object):
    """
    No documentation
    """
    EDTA = "EDTA"
    ORAGENE = "ORAGENE"
    FF = "FF"
    FFPE = "FFPE"
    CD128_SORTED_CELLS = "CD128_SORTED_CELLS"
    ASPIRATE = "ASPIRATE"

    def __hash__(self):
        return str(self).__hash__()


class Product(object):
    """
    No documentation
    """
    DNA = "DNA"
    RNA = "RNA"

    def __hash__(self):
        return str(self).__hash__()


class ProgrammePhase(object):
    """
    No documentation
    """
    CRUK = "CRUK"
    OXFORD = "OXFORD"
    CLL = "CLL"
    IIP = "IIP"
    MAIN = "MAIN"
    EXPT = "EXPT"

    def __hash__(self):
        return str(self).__hash__()


class RDFamilyChange(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "RDFamilyChange",
"fields": [{"doc": "", "type": "string", "name": "FamilyId"}, {"doc": "", "type": {"symbols":
["FamilyAdded", "FamilyDeleted", "ProbandChanged", "ParticipantAdded", "ParticipantRemoved",
"ConsentStatusChanged", "AffectionStatusChanged", "PanelAssignmentChanged", "SexChanged",
"SampleChanged"], "doc": "", "type": "enum", "name": "RDFamilyChangeCode"}, "name": "code"}, {"doc":
"", "type": {"doc": "", "type": "record", "name": "Pedigree", "fields": [{"doc": "", "type":
["null", {"fields": [{"default": "1.0.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name": "familyId"},
{"type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember", "fields": [{"doc": "",
"type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null", "boolean"], "name":
"isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"}, {"doc": "", "type":
["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "Ancestries", "fields": [{"doc": "", "type": ["null", {"symbols": ["D",
"E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type":
"enum", "name": "EthnicCategory"}], "name": "mothersEthnicOrigin"}, {"doc": "", "type": ["null",
"string"], "name": "mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"],
"name": "fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}], "type":
"record", "name": "Sample"}, "type": "array"}], "name": "samples"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "InbreedingCoefficient", "fields": [{"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": "string", "name": "program"}, {"doc": "", "type":
"string", "name": "version"}, {"doc": "", "type": "string", "name": "estimationMethod"}, {"doc": "",
"type": "double", "name": "coefficient"}, {"doc": "", "type": ["null", "double"], "name":
"standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalInformation"}]}, "type": "array"}, "name": "members"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type":
"string", "name": "panelName"}, {"type": ["null", "string"], "name": "panelVersion"}, {"type":
"string", "name": "reviewOutcome"}, {"type": "string", "name": "multipleGeneticOrigins"}], "type":
"record", "name": "AnalysisPanel"}, "type": "array"}], "name": "analysisPanels"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "type": "record", "name": "DiseasePenetrance"}, "type": "array"}], "name":
"diseasePenetrances"}, {"type": "boolean", "name": "readyForAnalysis"}, {"type": ["null",
{"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "FamilyQCState"}], "name": "familyQCState"}]}, "name": "Family"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "Family",
        "FamilyId",
        "code",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'Family': Pedigree,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'Family': Pedigree,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'Family', 'FamilyId', 'code'
    ]

    def __init__(self, **kwargs):
        self.Family = kwargs.get(
            'Family', Pedigree())
        self.FamilyId = kwargs.get(
            'FamilyId', None)
        self.code = kwargs.get(
            'code', None)


class RDFamilyChangeCode(object):
    """
    This code define the change type:  * `FamilyAdded`: This is a new
    family. * `FamilyDeleted`: This family should be removed. *
    `ProbandChanged`: The proband participant is now a different
    member of the family. * `ParticipantAdded`: A new participant has
    been sequenced and added to the family. * `ParticipantRemoved`: A
    participant has been removed. * `ConsentStatusChanged`: One or
    more participant in this family has a different consent status. *
    `AffectionStatusChanged`: HPOterms or Disorder changed in one or
    more participants in this family. * `PanelAssignmentChanged`: Gene
    Panels has changed in this family. * `SexChanged`: Sex has changed
    for one or more participants in this family. * `SampleChanged`:
    The sample/s associated to one or more participant in this family
    has changed.
    """
    FamilyAdded = "FamilyAdded"
    FamilyDeleted = "FamilyDeleted"
    ProbandChanged = "ProbandChanged"
    ParticipantAdded = "ParticipantAdded"
    ParticipantRemoved = "ParticipantRemoved"
    ConsentStatusChanged = "ConsentStatusChanged"
    AffectionStatusChanged = "AffectionStatusChanged"
    PanelAssignmentChanged = "PanelAssignmentChanged"
    SexChanged = "SexChanged"
    SampleChanged = "SampleChanged"

    def __hash__(self):
        return str(self).__hash__()


class RDSampleSource(object):
    """
    No documentation
    """
    BLOOD = "BLOOD"
    SALIVA = "SALIVA"
    FIBROBLAST = "FIBROBLAST"
    TISSUE = "TISSUE"

    def __hash__(self):
        return str(self).__hash__()


class RareDiseaseExitQuestionnaire(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"RareDiseaseExitQuestionnaire", "fields": [{"type": "string", "name": "eventDate"}, {"type":
"string", "name": "reporter"}, {"type": {"fields": [{"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "CaseSolvedFamily"}, "name": "caseSolvedFamily"},
{"doc": "", "type": {"symbols": ["yes", "no"], "type": "enum", "name": "SegregationQuestion"},
"name": "segregationQuestion"}, {"doc": "", "type": "string", "name": "additionalComments"}],
"type": "record", "name": "FamilyLevelQuestions"}, "name": "familyLevelQuestions"}, {"type":
{"items": {"fields": [{"type": "int", "name": "variantGroup"}, {"type": {"items": {"fields":
[{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name": "confirmationDecision"},
{"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"},
"name": "confirmationOutcome"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ReportingQuestion"}, "name": "reportingQuestion"}, {"doc": "", "type": {"symbols":
["pathogenic_variant", "likely_pathogenic_variant", "variant_of_unknown_clinical_significance",
"likely_benign_variant", "benign_variant", "not_assessed"], "type": "enum", "name":
"ACMGClassification"}, "name": "acmgClassification"}, {"doc": "", "type": "string", "name":
"publications"}], "type": "record", "name": "VariantLevelQuestions"}, "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"type": "record", "name": "VariantGroupLevelQuestions"}, "type": "array"}, "name":
"variantGroupLevelQuestions"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "eventDate",
        "familyLevelQuestions",
        "reporter",
        "variantGroupLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'eventDate', 'familyLevelQuestions', 'reporter',
        'variantGroupLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.eventDate = kwargs.get(
            'eventDate', None)
        self.familyLevelQuestions = kwargs.get(
            'familyLevelQuestions', FamilyLevelQuestions())
        self.reporter = kwargs.get(
            'reporter', None)
        self.variantGroupLevelQuestions = kwargs.get(
            'variantGroupLevelQuestions', None)


class ReportEvent(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEvent", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": "string", "name":
"phenotype"}, {"doc": "", "type": ["null", "string"], "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"fields":
[{"doc": "", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name":
"genomicFeature"}, {"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "eventJustification",
        "fullyExplainsPhenotype",
        "genomicFeature",
        "groupOfVariants",
        "modeOfInheritance",
        "panelName",
        "panelVersion",
        "penetrance",
        "phenotype",
        "reportEventId",
        "score",
        "tier",
        "variantClassification",
        "vendorSpecificScores",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'genomicFeature': GenomicFeature,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'genomicFeature': GenomicFeature,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'eventJustification', 'fullyExplainsPhenotype',
        'genomicFeature', 'groupOfVariants', 'modeOfInheritance',
        'panelName', 'panelVersion', 'penetrance', 'phenotype',
        'reportEventId', 'score', 'tier', 'variantClassification',
        'vendorSpecificScores'
    ]

    def __init__(self, **kwargs):
        self.eventJustification = kwargs.get(
            'eventJustification', None)
        self.fullyExplainsPhenotype = kwargs.get(
            'fullyExplainsPhenotype', None)
        self.genomicFeature = kwargs.get(
            'genomicFeature', GenomicFeature())
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.modeOfInheritance = kwargs.get(
            'modeOfInheritance', None)
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.phenotype = kwargs.get(
            'phenotype', None)
        self.reportEventId = kwargs.get(
            'reportEventId', None)
        self.score = kwargs.get(
            'score', None)
        self.tier = kwargs.get(
            'tier', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)
        self.vendorSpecificScores = kwargs.get(
            'vendorSpecificScores', None)


class ReportEventCancer(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEventCancer", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"fields": [{"doc": "",
"type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": "string", "name": "refSeqTranscriptId"}, {"doc": "", "type": "string", "name":
"refSeqProteinId"}, {"doc": "", "type": "string", "name": "geneName"}, {"doc": "", "type": ["null",
{"symbols": ["oncogene", "TSG", "both"], "type": "enum", "name": "RoleInCancer"}], "name":
"roleInCancer"}], "type": "record", "name": "GenomicFeatureCancer"}, "name":
"genomicFeatureCancer"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"SoTerm", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": "string",
"name": "name"}]}, "type": "array"}, "name": "soTerms"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"type": "string", "name": "actionType"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "evidence"}, {"doc": "", "type": ["null", "string"], "name":
"drug"}, {"doc": "", "type": ["null", "string"], "name": "status"}, {"doc": "", "type": "boolean",
"name": "variantActionable"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "comments"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}],
"type": "record", "name": "Actions"}, "type": "array"}], "name": "actions"}, {"doc": "", "type":
["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE",
"TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actions",
        "eventJustification",
        "genomicFeatureCancer",
        "reportEventId",
        "soTerms",
        "tier",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'actions': Actions,
            'genomicFeatureCancer': GenomicFeatureCancer,
            'soTerms': SoTerm,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'actions': Actions,
            'genomicFeatureCancer': GenomicFeatureCancer,
            'soTerms': SoTerm,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actions', 'eventJustification', 'genomicFeatureCancer',
        'reportEventId', 'soTerms', 'tier'
    ]

    def __init__(self, **kwargs):
        self.actions = kwargs.get(
            'actions', None)
        self.eventJustification = kwargs.get(
            'eventJustification', None)
        self.genomicFeatureCancer = kwargs.get(
            'genomicFeatureCancer', GenomicFeatureCancer())
        self.reportEventId = kwargs.get(
            'reportEventId', None)
        self.soTerms = kwargs.get(
            'soTerms', None)
        self.tier = kwargs.get(
            'tier', None)


class ReportVersionControl(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportVersionControl",
"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name": "gitVersionControl"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'gitVersionControl'
    ]

    def __init__(self, **kwargs):
        self.gitVersionControl = kwargs.get(
            'gitVersionControl', '4.0.0')


class ReportedModeOfInheritance(object):
    """
    An enumeration for the different mode of inheritances:  *
    `monoallelic_not_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, not imprinted *
    `monoallelic_maternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, maternally imprinted (paternal allele expressed)
    * `monoallelic_paternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, paternally imprinted (maternal allele expressed)
    * `monoallelic`: MONOALLELIC, autosomal or pseudoautosomal,
    imprinted status unknown * `biallelic`: BIALLELIC, autosomal or
    pseudoautosomal * `monoallelic_and_biallelic`: BOTH monoallelic
    and biallelic, autosomal or pseudoautosomal *
    `monoallelic_and_more_severe_biallelic`: BOTH monoallelic and
    biallelic, autosomal or pseudoautosomal (but BIALLELIC mutations
    cause a more SEVERE disease form), autosomal or pseudoautosomal *
    `xlinked_biallelic`: X-LINKED: hemizygous mutation in males,
    biallelic mutations in females * `xlinked_monoallelic`: X linked:
    hemizygous mutation in males, monoallelic mutations in females may
    cause disease (may be less severe, later onset than males) *
    `mitochondrial`: MITOCHONDRIAL * `unknown`: Unknown
    """
    monoallelic = "monoallelic"
    monoallelic_not_imprinted = "monoallelic_not_imprinted"
    monoallelic_maternally_imprinted = "monoallelic_maternally_imprinted"
    monoallelic_paternally_imprinted = "monoallelic_paternally_imprinted"
    biallelic = "biallelic"
    monoallelic_and_biallelic = "monoallelic_and_biallelic"
    monoallelic_and_more_severe_biallelic = "monoallelic_and_more_severe_biallelic"
    xlinked_biallelic = "xlinked_biallelic"
    xlinked_monoallelic = "xlinked_monoallelic"
    mitochondrial = "mitochondrial"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class ReportedSomaticStructuralVariants(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"ReportedSomaticStructuralVariants", "fields": [{"doc": "", "type": {"fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type":
"int", "name": "end"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"StructuralVariantType", "fields": [{"type": {"symbols": ["DEL", "INS", "DUP", "INV", "CNV",
"DUP_TANDEM", "DEL_ME", "INS_ME"], "doc": "", "type": "enum", "name":
"StructuralVariantFirstLevelType"}, "name": "firstLevelType"}, {"type": ["null", "string"], "name":
"subtype"}]}, "name": "type"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "",
"type": "string", "name": "alternate"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values":
"float", "type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "comments"}], "type": "record", "name":
"ReportedStructuralVariantCancer"}, "name": "reportedStructuralVariantCancer"}, {"doc": "", "type":
{"items": {"symbols": ["de_novo_variant", "germline_variant", "maternal_variant",
"paternal_variant", "pedigree_specific_variant", "population_specific_variant", "somatic_variant"],
"doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alleleOrigins",
        "reportedStructuralVariantCancer",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariantCancer': ReportedStructuralVariantCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariantCancer': ReportedStructuralVariantCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'alleleOrigins', 'reportedStructuralVariantCancer'
    ]

    def __init__(self, **kwargs):
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.reportedStructuralVariantCancer = kwargs.get(
            'reportedStructuralVariantCancer', ReportedStructuralVariantCancer())


class ReportedSomaticVariants(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedSomaticVariants",
"fields": [{"doc": "", "type": {"fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"},
{"doc": "", "type": ["null", "string"], "name": "cDnaChange"}, {"doc": "", "type": ["null",
"string"], "name": "proteinChange"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"},
{"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "", "type": ["null",
"double"], "name": "vaf"}, {"doc": "", "type": ["null", "int"], "name": "commonAf"}, {"doc": "",
"type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values":
"float", "type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "comments"}, {"type": {"items": {"fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"fields": [{"doc": "",
"type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": "string", "name": "refSeqTranscriptId"}, {"doc": "", "type": "string", "name":
"refSeqProteinId"}, {"doc": "", "type": "string", "name": "geneName"}, {"doc": "", "type": ["null",
{"symbols": ["oncogene", "TSG", "both"], "type": "enum", "name": "RoleInCancer"}], "name":
"roleInCancer"}], "type": "record", "name": "GenomicFeatureCancer"}, "name":
"genomicFeatureCancer"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"SoTerm", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": "string",
"name": "name"}]}, "type": "array"}, "name": "soTerms"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"type": "string", "name": "actionType"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "evidence"}, {"doc": "", "type": ["null", "string"], "name":
"drug"}, {"doc": "", "type": ["null", "string"], "name": "status"}, {"doc": "", "type": "boolean",
"name": "variantActionable"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "comments"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}],
"type": "record", "name": "Actions"}, "type": "array"}], "name": "actions"}, {"doc": "", "type":
["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE",
"TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}], "type":
"record", "name": "ReportEventCancer"}, "type": "array"}, "name": "reportEvents"}], "type":
"record", "name": "ReportedVariantCancer"}, "name": "reportedVariantCancer"}, {"doc": "", "type":
{"items": {"symbols": ["de_novo_variant", "germline_variant", "maternal_variant",
"paternal_variant", "pedigree_specific_variant", "population_specific_variant", "somatic_variant"],
"doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alleleOrigins",
        "reportedVariantCancer",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedVariantCancer': ReportedVariantCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedVariantCancer': ReportedVariantCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'alleleOrigins', 'reportedVariantCancer'
    ]

    def __init__(self, **kwargs):
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.reportedVariantCancer = kwargs.get(
            'reportedVariantCancer', ReportedVariantCancer())


class ReportedStructuralVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedStructuralVariant",
"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name":
"start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "", "type": "string", "name": "type"},
{"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string", "name":
"alternate"}, {"type": {"items": {"doc": "", "type": "record", "name": "CalledGenotype", "fields":
[{"doc": "", "type": "string", "name": "gelId"}, {"doc": "", "type": "string", "name": "sampleId"},
{"doc": "", "type": {"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous",
"missing", "half_missing_reference", "half_missing_alternate", "alternate_hemizigous",
"reference_hemizigous", "unk"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "genotype"},
{"doc": "", "type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "int"],
"name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc":
"", "type": ["null", "int"], "name": "copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "reportEventId"},
{"doc": "", "type": "string", "name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null",
"string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name": "genomicFeature"},
{"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alternate",
        "calledGenotypes",
        "chromosome",
        "comments",
        "end",
        "evidenceIds",
        "reference",
        "reportEvents",
        "start",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'calledGenotypes': CalledGenotype,
            'reportEvents': ReportEvent,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'calledGenotypes': CalledGenotype,
            'reportEvents': ReportEvent,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alternate',
        'calledGenotypes', 'chromosome', 'comments', 'end',
        'evidenceIds', 'reference', 'reportEvents', 'start', 'type'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.calledGenotypes = kwargs.get(
            'calledGenotypes', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.comments = kwargs.get(
            'comments', None)
        self.end = kwargs.get(
            'end', None)
        self.evidenceIds = kwargs.get(
            'evidenceIds', None)
        self.reference = kwargs.get(
            'reference', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', None)


class ReportedStructuralVariantCancer(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"ReportedStructuralVariantCancer", "fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "",
"type": {"doc": "", "type": "record", "name": "StructuralVariantType", "fields": [{"type":
{"symbols": ["DEL", "INS", "DUP", "INV", "CNV", "DUP_TANDEM", "DEL_ME", "INS_ME"], "doc": "",
"type": "enum", "name": "StructuralVariantFirstLevelType"}, "name": "firstLevelType"}, {"type":
["null", "string"], "name": "subtype"}]}, "name": "type"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": ["null",
{"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alternate",
        "chromosome",
        "comments",
        "end",
        "reference",
        "start",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'type': StructuralVariantType,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'type': StructuralVariantType,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alternate',
        'chromosome', 'comments', 'end', 'reference', 'start', 'type'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.comments = kwargs.get(
            'comments', None)
        self.end = kwargs.get(
            'end', None)
        self.reference = kwargs.get(
            'reference', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', StructuralVariantType())


class ReportedVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedVariant", "fields":
[{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string",
"name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type":
{"items": {"doc": "", "type": "record", "name": "CalledGenotype", "fields": [{"doc": "", "type":
"string", "name": "gelId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type":
["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": ["null", "int"], "name": "copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "reportEventId"},
{"doc": "", "type": "string", "name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null",
"string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name": "genomicFeature"},
{"doc": "", "type": {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}, "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alternate",
        "calledGenotypes",
        "chromosome",
        "comments",
        "dbSnpId",
        "evidenceIds",
        "position",
        "reference",
        "reportEvents",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'calledGenotypes': CalledGenotype,
            'reportEvents': ReportEvent,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'calledGenotypes': CalledGenotype,
            'reportEvents': ReportEvent,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alternate',
        'calledGenotypes', 'chromosome', 'comments', 'dbSnpId',
        'evidenceIds', 'position', 'reference', 'reportEvents'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.calledGenotypes = kwargs.get(
            'calledGenotypes', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.comments = kwargs.get(
            'comments', None)
        self.dbSnpId = kwargs.get(
            'dbSnpId', None)
        self.evidenceIds = kwargs.get(
            'evidenceIds', None)
        self.position = kwargs.get(
            'position', None)
        self.reference = kwargs.get(
            'reference', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)


class ReportedVariantCancer(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedVariantCancer",
"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name":
"position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string",
"name": "alternate"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type":
["null", "string"], "name": "cDnaChange"}, {"doc": "", "type": ["null", "string"], "name":
"proteinChange"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "",
"type": ["null", "int"], "name": "depthAlternate"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "commonAf"}, {"doc": "", "type": ["null",
"int"], "name": "ihp"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "float", "type":
"map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}, {"type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "reportEventId"}, {"doc": "", "type": {"fields": [{"doc": "", "type": {"symbols":
["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name": "FeatureTypes"}, "name":
"featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": "string",
"name": "refSeqTranscriptId"}, {"doc": "", "type": "string", "name": "refSeqProteinId"}, {"doc": "",
"type": "string", "name": "geneName"}, {"doc": "", "type": ["null", {"symbols": ["oncogene", "TSG",
"both"], "type": "enum", "name": "RoleInCancer"}], "name": "roleInCancer"}], "type": "record",
"name": "GenomicFeatureCancer"}, "name": "genomicFeatureCancer"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "SoTerm", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "name"}]}, "type": "array"}, "name": "soTerms"},
{"doc": "", "type": ["null", {"items": {"fields": [{"type": "string", "name": "actionType"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name": "evidence"}, {"doc": "", "type":
["null", "string"], "name": "drug"}, {"doc": "", "type": ["null", "string"], "name": "status"},
{"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}, {"doc": "", "type": ["null", "string"], "name":
"url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"}, {"doc": "", "type":
"string", "name": "source"}], "type": "record", "name": "Actions"}, "type": "array"}], "name":
"actions"}, {"doc": "", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "",
"type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name":
"Tier"}], "name": "tier"}], "type": "record", "name": "ReportEventCancer"}, "type": "array"},
"name": "reportEvents"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alternate",
        "cDnaChange",
        "chromosome",
        "clinVarIds",
        "comments",
        "commonAf",
        "cosmicIds",
        "dbSnpId",
        "depthAlternate",
        "depthReference",
        "ihp",
        "position",
        "proteinChange",
        "reference",
        "reportEvents",
        "vaf",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportEvents': ReportEventCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportEvents': ReportEventCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alternate',
        'cDnaChange', 'chromosome', 'clinVarIds', 'comments',
        'commonAf', 'cosmicIds', 'dbSnpId', 'depthAlternate',
        'depthReference', 'ihp', 'position', 'proteinChange',
        'reference', 'reportEvents', 'vaf'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.cDnaChange = kwargs.get(
            'cDnaChange', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.clinVarIds = kwargs.get(
            'clinVarIds', None)
        self.comments = kwargs.get(
            'comments', None)
        self.commonAf = kwargs.get(
            'commonAf', None)
        self.cosmicIds = kwargs.get(
            'cosmicIds', None)
        self.dbSnpId = kwargs.get(
            'dbSnpId', None)
        self.depthAlternate = kwargs.get(
            'depthAlternate', None)
        self.depthReference = kwargs.get(
            'depthReference', None)
        self.ihp = kwargs.get(
            'ihp', None)
        self.position = kwargs.get(
            'position', None)
        self.proteinChange = kwargs.get(
            'proteinChange', None)
        self.reference = kwargs.get(
            'reference', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)
        self.vaf = kwargs.get(
            'vaf', None)


class ReportingQuestion(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class RoleInCancer(object):
    """
    No documentation
    """
    oncogene = "oncogene"
    TSG = "TSG"
    both = "both"

    def __hash__(self):
        return str(self).__hash__()


class Sample(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Sample", "fields":
[{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "labSampleId",
        "preparationMethod",
        "product",
        "sampleId",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'labSampleId', 'preparationMethod', 'product', 'sampleId',
        'source'
    ]

    def __init__(self, **kwargs):
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)


class SampleSource(object):
    """
    No documentation
    """
    TUMOUR = "TUMOUR"
    BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS = "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS"
    BONE_MARROW_ASPIRATE_TUMOUR_CELLS = "BONE_MARROW_ASPIRATE_TUMOUR_CELLS"
    BLOOD = "BLOOD"
    SALIVA = "SALIVA"
    FIBROBLAST = "FIBROBLAST"
    TISSUE = "TISSUE"

    def __hash__(self):
        return str(self).__hash__()


class SegregationQuestion(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"

    def __hash__(self):
        return str(self).__hash__()


class SensitiveInformation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "SensitiveInformation",
"fields": [{"doc": "", "type": {"fields": [{"default": "1.0.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}, "name": "versionControl"},
{"type": "string", "name": "gelID"}, {"type": ["null", {"items": "string", "type": "array"}],
"name": "externalIds"}, {"type": ["null", "string"], "name": "genomicMedicineCenter"}, {"type":
["null", "string"], "name": "fullNameOfResponsibleConsultant"}, {"type": ["null", "string"], "name":
"contactNumber"}, {"type": ["null", "string"], "name": "hospitalOfResponsibleConsultant"}, {"type":
["null", "string"], "name": "centerSampleId"}, {"type": ["null", "string"], "name":
"originatingCenter"}, {"type": ["null", "string"], "name": "centerPatientId"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "centerPatientId",
        "centerSampleId",
        "contactNumber",
        "externalIds",
        "fullNameOfResponsibleConsultant",
        "gelID",
        "genomicMedicineCenter",
        "hospitalOfResponsibleConsultant",
        "originatingCenter",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'centerPatientId', 'centerSampleId', 'contactNumber',
        'externalIds', 'fullNameOfResponsibleConsultant', 'gelID',
        'genomicMedicineCenter', 'hospitalOfResponsibleConsultant',
        'originatingCenter', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.centerPatientId = kwargs.get(
            'centerPatientId', None)
        self.centerSampleId = kwargs.get(
            'centerSampleId', None)
        self.contactNumber = kwargs.get(
            'contactNumber', None)
        self.externalIds = kwargs.get(
            'externalIds', None)
        self.fullNameOfResponsibleConsultant = kwargs.get(
            'fullNameOfResponsibleConsultant', None)
        self.gelID = kwargs.get(
            'gelID', None)
        self.genomicMedicineCenter = kwargs.get(
            'genomicMedicineCenter', None)
        self.hospitalOfResponsibleConsultant = kwargs.get(
            'hospitalOfResponsibleConsultant', None)
        self.originatingCenter = kwargs.get(
            'originatingCenter', None)
        self.versionControl = kwargs.get(
            'versionControl', VersionControl())


class Sex(object):
    """
    Sex
    """
    MALE = "MALE"
    FEMALE = "FEMALE"
    UNKNOWN = "UNKNOWN"

    def __hash__(self):
        return str(self).__hash__()


class SoTerm(ProtocolElement):
    """
    A Sequence Ontology term identifier by its id and name (e.g.: id =
    SO:0001816 ; name = non synonymous)
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "SoTerm", "fields": [{"doc":
"", "type": "string", "name": "id"}, {"doc": "", "type": "string", "name": "name"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "name",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'name'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.name = kwargs.get(
            'name', None)


class StructuralVariantFirstLevelType(object):
    """
    The first level type must be one of the following:  * `DEL`
    Deletion relative to the reference * `INS` Insertion of novel
    sequence relative to the reference * `DUP` Region of elevated copy
    number relative to the reference * `INV` Inversion of reference
    sequence * `CNV` Copy number variable region (may be both deletion
    and duplication) The CNV category should not be used when a more
    specific category can be applied.  Reserved subtypes include: *
    `DUP:TANDEM` Tandem duplication * `DEL:ME` Deletion of mobile
    element relative to the reference * `INS:ME` Insertion of a mobile
    element relative to the reference
    """
    DEL = "DEL"
    INS = "INS"
    DUP = "DUP"
    INV = "INV"
    CNV = "CNV"
    DUP_TANDEM = "DUP_TANDEM"
    DEL_ME = "DEL_ME"
    INS_ME = "INS_ME"

    def __hash__(self):
        return str(self).__hash__()


class StructuralVariantType(ProtocolElement):
    """
    Structural variant type as defined by the VCF specification 4.2
    for field ID.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "StructuralVariantType",
"fields": [{"type": {"symbols": ["DEL", "INS", "DUP", "INV", "CNV", "DUP_TANDEM", "DEL_ME",
"INS_ME"], "doc": "", "type": "enum", "name": "StructuralVariantFirstLevelType"}, "name":
"firstLevelType"}, {"type": ["null", "string"], "name": "subtype"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "firstLevelType",
        "subtype",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'firstLevelType', 'subtype'
    ]

    def __init__(self, **kwargs):
        self.firstLevelType = kwargs.get(
            'firstLevelType', None)
        self.subtype = kwargs.get(
            'subtype', None)


class SupportingEvidences(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "SupportingEvidences",
"fields": [{"type": {"items": "string", "type": "array"}, "name": "previousSupportingEvidences"},
{"type": {"items": "string", "type": "array"}, "name": "modifiedSupportingEvidences"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedSupportingEvidences",
        "previousSupportingEvidences",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedSupportingEvidences', 'previousSupportingEvidences'
    ]

    def __init__(self, **kwargs):
        self.modifiedSupportingEvidences = kwargs.get(
            'modifiedSupportingEvidences', None)
        self.previousSupportingEvidences = kwargs.get(
            'previousSupportingEvidences', None)


class TernaryOption(object):
    """
    This the define a yes/no/unknown case
    """
    yes = "yes"
    no = "no"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class Tier(object):
    """
    Possible tiers as defined by Genomics England
    """
    NONE = "NONE"
    TIER1 = "TIER1"
    TIER2 = "TIER2"
    TIER3 = "TIER3"

    def __hash__(self):
        return str(self).__hash__()


class TieringResult(ProtocolElement):
    """
    Represents the results of a tiering process and its input patient
    data. TieringResult     is simply a more specific, less ambiguous
    term for "cohort".     We cannot use the InterpretationRequestRD
    structure because there may be many interpretation     requests
    for the same tiering results.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "TieringResult", "fields":
[{"doc": "", "type": {"fields": [{"default": "4.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"default": "GRCh37.p13", "doc": "", "type": "string", "name": "genomeAssemblyVersion"}, {"default":
"4.0", "doc": "", "type": "string", "name": "cellbaseVersion"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "workspace"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "File", "fields": [{"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "sampleId"}, {"doc": "", "type": "string", "name": "uriFile"}, {"type":
{"symbols": ["BAM", "gVCF", "VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV",
"VCF_SV", "VCF_somatic_SV", "VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER",
"PARTITION", "VARIANT_FREQUENCIES", "COVERAGE"], "type": "enum", "name": "FileType"}, "name":
"fileType"}, {"type": ["null", "string"], "name": "md5Sum"}]}, "type": "array"}, "name": "bams"},
{"doc": "", "type": {"items": "File", "type": "array"}, "name": "vcfs"}, {"doc": "", "type":
["null", {"items": "File", "type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null",
"File"], "name": "pedigreeDiagram"}, {"doc": "", "type": ["null", "File"], "name":
"annotationFile"}, {"doc": "", "type": ["null", {"values": "File", "type": "map"}], "name":
"otherFiles"}, {"doc": "", "type": {"namespace": "org.gel.models.participant.avro", "type":
"record", "name": "Pedigree", "fields": [{"doc": "", "type": ["null", {"fields": [{"default":
"1.0.0", "doc": "", "type": "string", "name": "GitVersionControl"}], "type": "record", "name":
"VersionControl"}], "name": "versionControl"}, {"type": ["null", "string"], "name": "LDPCode"},
{"doc": "", "type": "string", "name": "familyId"}, {"type": {"items": {"doc": "", "type": "record",
"name": "PedigreeMember", "fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"},
{"doc": "", "type": ["null", "boolean"], "name": "isProband"}, {"doc": "", "type": ["null",
"string"], "name": "participantId"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "ParticipantQCState"}],
"name": "participantQCState"}, {"doc": "", "type": ["null", "string"], "name": "gelSuperFamilyId"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"symbols": ["UNKNOWN", "XX", "XY", "XO",
"XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"], "doc": "", "type": "enum", "name":
"PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc": "", "type": ["null", "int"],
"name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name": "fatherId"}, {"doc": "",
"type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null", "int"], "name":
"superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols": ["yes", "no",
"unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "monozygotic"}, {"doc":
"", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"], "doc": "", "type":
"enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type": ["null",
{"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc": "",
"type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "modifiers"}, {"doc": "", "type": ["null", "string"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "Ancestries", "fields": [{"doc": "", "type": ["null", {"symbols": ["D",
"E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type":
"enum", "name": "EthnicCategory"}], "name": "mothersEthnicOrigin"}, {"doc": "", "type": ["null",
"string"], "name": "mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"],
"name": "fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KGSuperPopCategory"}, "name":
"kGSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KGPopCategory"}], "name": "kGPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["BLOOD", "SALIVA", "FIBROBLAST",
"TISSUE"], "type": "enum", "name": "RDSampleSource"}], "name": "source"}, {"doc": "", "type":
["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"},
{"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS",
"ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}], "type":
"record", "name": "Sample"}, "type": "array"}], "name": "samples"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "InbreedingCoefficient", "fields": [{"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": "string", "name": "program"}, {"doc": "", "type":
"string", "name": "version"}, {"doc": "", "type": "string", "name": "estimationMethod"}, {"doc": "",
"type": "double", "name": "coefficient"}, {"doc": "", "type": ["null", "double"], "name":
"standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "additionalInformation"}]}, "type": "array"}, "name": "members"},
{"type": ["null", {"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type":
"string", "name": "panelName"}, {"type": ["null", "string"], "name": "panelVersion"}, {"type":
"string", "name": "reviewOutcome"}, {"type": "string", "name": "multipleGeneticOrigins"}], "type":
"record", "name": "AnalysisPanel"}, "type": "array"}], "name": "analysisPanels"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "type": "record", "name": "DiseasePenetrance"}, "type": "array"}], "name":
"diseasePenetrances"}, {"type": "boolean", "name": "readyForAnalysis"}, {"type": ["null",
{"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "FamilyQCState"}], "name": "familyQCState"}], "doc": ""}, "name":
"pedigree"}, {"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type":
"int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type":
"string", "name": "alternate"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"CalledGenotype", "fields": [{"doc": "", "type": "string", "name": "gelId"}, {"doc": "", "type":
"string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk"], "doc": "", "type":
"enum", "name": "Zygosity"}, "name": "genotype"}, {"doc": "", "type": ["null", "int"], "name":
"phaseSet"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type":
["null", "int"], "name": "depthAlternate"}, {"doc": "", "type": ["null", "int"], "name":
"copyNumber"}]}, "type": "array"}, "name": "calledGenotypes"}, {"doc": "", "type": {"items":
{"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": "string",
"name": "phenotype"}, {"doc": "", "type": ["null", "string"], "name": "panelName"}, {"doc": "",
"type": ["null", "string"], "name": "panelVersion"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"fields":
[{"doc": "", "type": {"symbols": ["RegulatoryRegion", "Gene", "Transcript"], "type": "enum", "name":
"FeatureTypes"}, "name": "featureType"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "hgnc"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "otherIds"}], "type": "record", "name": "GenomicFeature"}, "name":
"genomicFeature"}, {"doc": "", "type": "org.gel.models.participant.avro.Penetrance", "name":
"penetrance"}, {"doc": "", "type": "float", "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "doc": "", "type": "enum", "name": "VariantClassification"}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name": "Tier"}],
"name": "tier"}], "type": "record", "name": "ReportEvent"}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "evidenceIds"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "comments"}], "type": "record", "name": "ReportedVariant"}, "type":
"array"}, "name": "tieredVariants"}, {"doc": "", "type": "string", "name": "tieringVersion"},
{"doc": "", "type": "string", "name": "internalStudyId"}, {"doc": "", "type": ["null", {"symbols":
["mosaicism", "monosomy", "disomy", "uniparental_disomy", "trisomy", "other_aneuploidy"], "type":
"enum", "name": "ComplexGeneticPhenomena"}], "name": "complexGeneticPhenomena"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float",
"type": "map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "annotationFile",
        "bams",
        "bigWigs",
        "complexGeneticPhenomena",
        "genePanelsCoverage",
        "internalStudyId",
        "otherFamilyHistory",
        "otherFiles",
        "pedigree",
        "pedigreeDiagram",
        "tieredVariants",
        "tieringVersion",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'tieredVariants': ReportedVariant,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'tieredVariants': ReportedVariant,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'annotationFile', 'bams', 'bigWigs',
        'cellbaseVersion', 'complexGeneticPhenomena',
        'genePanelsCoverage', 'genomeAssemblyVersion',
        'internalStudyId', 'otherFamilyHistory', 'otherFiles',
        'pedigree', 'pedigreeDiagram', 'tieredVariants',
        'tieringVersion', 'vcfs', 'versionControl', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.cellbaseVersion = kwargs.get(
            'cellbaseVersion', '4.0')
        self.complexGeneticPhenomena = kwargs.get(
            'complexGeneticPhenomena', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomeAssemblyVersion = kwargs.get(
            'genomeAssemblyVersion', 'GRCh37.p13')
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.pedigree = kwargs.get(
            'pedigree', Pedigree())
        self.pedigreeDiagram = kwargs.get(
            'pedigreeDiagram', None)
        self.tieredVariants = kwargs.get(
            'tieredVariants', None)
        self.tieringVersion = kwargs.get(
            'tieringVersion', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class TissueSource(object):
    """
    No documentation
    """
    BMA_TUMOUR_SORTED_CELLS = "BMA_TUMOUR_SORTED_CELLS"
    CT_GUIDED_BIOPSY = "CT_GUIDED_BIOPSY"
    ENDOSCOPIC_BIOPSY = "ENDOSCOPIC_BIOPSY"
    ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY = "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY"
    ENDOSCOPIC_ULTRASOUND_GUIDED_FNA = "ENDOSCOPIC_ULTRASOUND_GUIDED_FNA"
    LAPAROSCOPIC_BIOPSY = "LAPAROSCOPIC_BIOPSY"
    LAPAROSCOPIC_EXCISION = "LAPAROSCOPIC_EXCISION"
    MRI_GUIDED_BIOPSY = "MRI_GUIDED_BIOPSY"
    NON_GUIDED_BIOPSY = "NON_GUIDED_BIOPSY"
    SURGICAL_RESECTION = "SURGICAL_RESECTION"
    STEREOTACTICALLY_GUIDED_BIOPSY = "STEREOTACTICALLY_GUIDED_BIOPSY"
    USS_GUIDED_BIOPSY = "USS_GUIDED_BIOPSY"
    NON_STANDARD_BIOPSY = "NON_STANDARD_BIOPSY"

    def __hash__(self):
        return str(self).__hash__()


class TumourContent(object):
    """
    No documentation
    """
    High = "High"
    Medium = "Medium"
    Low = "Low"

    def __hash__(self):
        return str(self).__hash__()


class TumourSample(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "TumourSample", "fields":
[{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": "int", "name": "tumourId"}, {"doc": "", "type": ["null",
{"symbols": ["CRUK", "OXFORD", "CLL", "IIP", "MAIN", "EXPT"], "type": "enum", "name":
"ProgrammePhase"}], "name": "programmePhase"}, {"doc": "", "type": ["null", {"symbols":
["ADULT_GLIOMA", "BLADDER", "BREAST", "CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL",
"ENDOMETRIAL_CARCINOMA", "HAEMONC", "HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA",
"NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL", "OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL",
"TESTICULAR_GERM_CELL_TUMOURS", "UPPER_GASTROINTESTINAL",
"NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"TumourType"}], "name": "tumourType"}, {"doc": "", "type": ["null", "string"], "name":
"tumourSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"}, {"doc":
"", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "Phase"}], "name": "phase"},
{"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum", "name":
"TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "type": "enum", "name": "SampleSource"}], "name": "source"}, {"doc": "",
"type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS", "ASPIRATE"],
"type": "enum", "name": "PreparationMethod"}], "name": "preparationMethod"}, {"doc": "", "type":
["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS", "CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY",
"LAPAROSCOPIC_EXCISION", "MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION",
"STEREOTACTICALLY_GUIDED_BIOPSY", "USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum",
"name": "TissueSource"}], "name": "tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA",
"RNA"], "type": "enum", "name": "Product"}], "name": "product"}, {"doc": "", "type": ["null",
"string"], "name": "TNMStageVersion"}, {"doc": "", "type": ["null", "string"], "name":
"TNMStageGrouping"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "TNMStageGrouping",
        "TNMStageVersion",
        "clinicalSampleDateTime",
        "labSampleId",
        "phase",
        "preparationMethod",
        "product",
        "programmePhase",
        "sampleId",
        "source",
        "tissueSource",
        "tumourContent",
        "tumourId",
        "tumourSubType",
        "tumourType",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'TNMStageGrouping', 'TNMStageVersion',
        'clinicalSampleDateTime', 'labSampleId', 'phase',
        'preparationMethod', 'product', 'programmePhase', 'sampleId',
        'source', 'tissueSource', 'tumourContent', 'tumourId',
        'tumourSubType', 'tumourType'
    ]

    def __init__(self, **kwargs):
        self.TNMStageGrouping = kwargs.get(
            'TNMStageGrouping', None)
        self.TNMStageVersion = kwargs.get(
            'TNMStageVersion', None)
        self.clinicalSampleDateTime = kwargs.get(
            'clinicalSampleDateTime', None)
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.phase = kwargs.get(
            'phase', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.programmePhase = kwargs.get(
            'programmePhase', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)
        self.tissueSource = kwargs.get(
            'tissueSource', None)
        self.tumourContent = kwargs.get(
            'tumourContent', None)
        self.tumourId = kwargs.get(
            'tumourId', None)
        self.tumourSubType = kwargs.get(
            'tumourSubType', None)
        self.tumourType = kwargs.get(
            'tumourType', None)


class TumourType(object):
    """
    No documentation
    """
    ADULT_GLIOMA = "ADULT_GLIOMA"
    BLADDER = "BLADDER"
    BREAST = "BREAST"
    CARCINOMA_OF_UNKNOWN_PRIMARY = "CARCINOMA_OF_UNKNOWN_PRIMARY"
    CHILDHOOD = "CHILDHOOD"
    COLORECTAL = "COLORECTAL"
    ENDOMETRIAL_CARCINOMA = "ENDOMETRIAL_CARCINOMA"
    HAEMONC = "HAEMONC"
    HEPATOPANCREATOBILIARY = "HEPATOPANCREATOBILIARY"
    LUNG = "LUNG"
    MALIGNANT_MELANOMA = "MALIGNANT_MELANOMA"
    NASOPHARYNGEAL = "NASOPHARYNGEAL"
    ORAL_OROPHARYNGEAL = "ORAL_OROPHARYNGEAL"
    OVARIAN = "OVARIAN"
    PROSTATE = "PROSTATE"
    RENAL = "RENAL"
    SARCOMA = "SARCOMA"
    SINONASAL = "SINONASAL"
    TESTICULAR_GERM_CELL_TUMOURS = "TESTICULAR_GERM_CELL_TUMOURS"
    UPPER_GASTROINTESTINAL = "UPPER_GASTROINTESTINAL"
    NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE = "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE"
    CLASSICAL_HODGKINS = "CLASSICAL_HODGKINS"
    NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS = "NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS"
    T_CELL_LYMPHOMA = "T_CELL_LYMPHOMA"

    def __hash__(self):
        return str(self).__hash__()


class VariantClassification(object):
    """
    This is the classification of the variant according to standard
    practice guidelines (e.g. ACMG)
    """
    pathogenic_variant = "pathogenic_variant"
    likely_pathogenic_variant = "likely_pathogenic_variant"
    variant_of_unknown_clinical_significance = "variant_of_unknown_clinical_significance"
    likely_benign_variant = "likely_benign_variant"
    benign_variant = "benign_variant"
    not_assessed = "not_assessed"

    def __hash__(self):
        return str(self).__hash__()


class VariantGroupLevelQuestions(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantGroupLevelQuestions",
"fields": [{"type": "int", "name": "variantGroup"}, {"type": {"items": {"fields": [{"doc": "",
"type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"],
"type": "enum", "name": "ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "",
"type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name":
"confirmationOutcome"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name":
"ReportingQuestion"}, "name": "reportingQuestion"}, {"doc": "", "type": {"symbols":
["pathogenic_variant", "likely_pathogenic_variant", "variant_of_unknown_clinical_significance",
"likely_benign_variant", "benign_variant", "not_assessed"], "type": "enum", "name":
"ACMGClassification"}, "name": "acmgClassification"}, {"doc": "", "type": "string", "name":
"publications"}], "type": "record", "name": "VariantLevelQuestions"}, "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionability",
        "clinicalUtility",
        "phenotypesExplained",
        "phenotypesSolved",
        "variantGroup",
        "variantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantLevelQuestions': VariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantLevelQuestions': VariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionability', 'clinicalUtility', 'phenotypesExplained',
        'phenotypesSolved', 'variantGroup', 'variantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.actionability = kwargs.get(
            'actionability', None)
        self.clinicalUtility = kwargs.get(
            'clinicalUtility', None)
        self.phenotypesExplained = kwargs.get(
            'phenotypesExplained', None)
        self.phenotypesSolved = kwargs.get(
            'phenotypesSolved', None)
        self.variantGroup = kwargs.get(
            'variantGroup', None)
        self.variantLevelQuestions = kwargs.get(
            'variantLevelQuestions', None)


class VariantLevelQuestions(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name":
"confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name": "reportingQuestion"},
{"doc": "", "type": {"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name": "acmgClassification"},
{"doc": "", "type": "string", "name": "publications"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "acmgClassification",
        "confirmationDecision",
        "confirmationOutcome",
        "publications",
        "reportingQuestion",
        "variantDetails",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'acmgClassification', 'confirmationDecision',
        'confirmationOutcome', 'publications', 'reportingQuestion',
        'variantDetails'
    ]

    def __init__(self, **kwargs):
        self.acmgClassification = kwargs.get(
            'acmgClassification', None)
        self.confirmationDecision = kwargs.get(
            'confirmationDecision', None)
        self.confirmationOutcome = kwargs.get(
            'confirmationOutcome', None)
        self.publications = kwargs.get(
            'publications', None)
        self.reportingQuestion = kwargs.get(
            'reportingQuestion', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)


class VersionControl(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "VersionControl",
"fields": [{"default": "1.0.0", "doc": "", "type": "string", "name": "GitVersionControl"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'GitVersionControl'
    ]

    def __init__(self, **kwargs):
        self.GitVersionControl = kwargs.get(
            'GitVersionControl', '1.0.0')


class Zygosity(object):
    """
    It is a representation of the zygosity  * `reference_homozygous`:
    0/0, 0|0 * `heterozygous`: 0/1, 1/0, 1|0, 0|1 *
    `alternate_homozygous`: 1/1, 1|1 * `missing`: ./., .|. *
    `half_missing_reference`: ./0, 0/., 0|., .|0 *
    `half_missing_alternate`: ./1, 1/., 1|., .|1 *
    `alternate_hemizigous`: 1 * `reference_hemizigous`: 0 * `unk`:
    Anything unexpected
    """
    reference_homozygous = "reference_homozygous"
    heterozygous = "heterozygous"
    alternate_homozygous = "alternate_homozygous"
    missing = "missing"
    half_missing_reference = "half_missing_reference"
    half_missing_alternate = "half_missing_alternate"
    alternate_hemizigous = "alternate_hemizigous"
    reference_hemizigous = "reference_hemizigous"
    unk = "unk"

    def __hash__(self):
        return str(self).__hash__()
