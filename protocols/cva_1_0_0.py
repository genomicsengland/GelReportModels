"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse
from protocols.protocol import avro_parse

import avro.schema

version = '1.0.0'


class ACMGClassification(object):
    """
    No documentation
    """
    pathogenic_variant = "pathogenic_variant"
    likely_pathogenic_variant = "likely_pathogenic_variant"
    variant_of_unknown_clinical_significance = "variant_of_unknown_clinical_significance"
    likely_benign_variant = "likely_benign_variant"
    benign_variant = "benign_variant"
    not_assessed = "not_assessed"

    def __hash__(self):
        return str(self).__hash__()


class API(ProtocolElement):
    """
    Represents the contract of API dependency (either REST or OTHER)
    """
    _schemaSource = """
{"namespace": "org.gel.models.system.avro", "type": "record", "name": "API", "fields": [{"type":
{"symbols": ["REST", "MONGODB", "OTHER"], "type": "enum", "name": "APIType"}, "name": "type"},
{"type": "string", "name": "description"}, {"type": {"items": "string", "type": "array"}, "name":
"url"}, {"type": {"symbols": ["OK", "DOWN"], "doc": "", "type": "enum", "name": "Status"}, "name":
"status"}, {"type": ["null", {"values": "string", "type": "map"}], "name": "additionalProperties"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalProperties",
        "description",
        "status",
        "type",
        "url",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalProperties', 'description', 'status', 'type', 'url'
    ]

    def __init__(self, **kwargs):
        self.additionalProperties = kwargs.get(
            'additionalProperties', None)
        self.description = kwargs.get(
            'description', None)
        self.status = kwargs.get(
            'status', None)
        self.type = kwargs.get(
            'type', None)
        self.url = kwargs.get(
            'url', None)


class APIType(object):
    """
    No documentation
    """
    REST = "REST"
    MONGODB = "MONGODB"
    OTHER = "OTHER"

    def __hash__(self):
        return str(self).__hash__()


class Action(ProtocolElement):
    """
    A clinical action
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "Action", "fields": [{"doc":
"", "type": ["null", {"symbols": ["therapy", "therapeutic", "prognosis", "diagnosis"], "doc": "",
"type": "enum", "name": "ActionType"}], "name": "actionType"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type": ["null",
{"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name": "ActionStatus"}],
"name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type":
["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"},
{"doc": "", "type": "string", "name": "source"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionType",
        "evidenceType",
        "references",
        "source",
        "status",
        "url",
        "variantActionable",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionType', 'evidenceType', 'references', 'source',
        'status', 'url', 'variantActionable'
    ]

    def __init__(self, **kwargs):
        self.actionType = kwargs.get(
            'actionType', None)
        self.evidenceType = kwargs.get(
            'evidenceType', None)
        self.references = kwargs.get(
            'references', None)
        self.source = kwargs.get(
            'source', None)
        self.status = kwargs.get(
            'status', None)
        self.url = kwargs.get(
            'url', None)
        self.variantActionable = kwargs.get(
            'variantActionable', None)


class ActionStatus(object):
    """
    Clinical status of an action
    """
    clinical = "clinical"
    pre_clinical = "pre_clinical"

    def __hash__(self):
        return str(self).__hash__()


class ActionType(object):
    """
    Type of clinical action on a variant
    """
    therapy = "therapy"
    therapeutic = "therapeutic"
    prognosis = "prognosis"
    diagnosis = "diagnosis"

    def __hash__(self):
        return str(self).__hash__()


class Actionability(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    not_yet = "not_yet"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class AdditionalAnalysisPanel(ProtocolElement):
    """
    A panel of genes and the specific disease that it assesses
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AdditionalAnalysisPanel",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"doc": "", "type": "record",
"name": "GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "",
"type": ["null", "string"], "name": "panelVersion"}]}, "name": "panel"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "panel",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'panel': GenePanel,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'panel': GenePanel,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'panel', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.panel = kwargs.get(
            'panel', GenePanel())
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class AdditionalAttribute(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"AdditionalAttribute", "fields": [{"type": {"values": "string", "type": "map"}, "name":
"attribute"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "attribute",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'attribute'
    ]

    def __init__(self, **kwargs):
        self.attribute = kwargs.get(
            'attribute', None)


class AdditionalVariantsQuestions(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AdditionalVariantsQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
{"symbols": ["germline_susceptibility", "predicts_therapeutic_response", "prognostic",
"defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type": "enum", "name":
"CancerActionability"}, "type": "array"}, "name": "variantActionability"}, {"type": ["null",
"string"], "name": "otherVariantActionability"}, {"doc": "", "type": {"symbols":
["already_actioned", "actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum",
"name": "CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga", "na"], "doc": "", "type": "enum", "name":
"CancerTestedAdditional"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "otherVariantActionability",
        "validationAssayType",
        "variantActionability",
        "variantDetails",
        "variantTested",
        "variantUsability",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'otherVariantActionability', 'validationAssayType',
        'variantActionability', 'variantDetails', 'variantTested',
        'variantUsability'
    ]

    def __init__(self, **kwargs):
        self.otherVariantActionability = kwargs.get(
            'otherVariantActionability', None)
        self.validationAssayType = kwargs.get(
            'validationAssayType', None)
        self.variantActionability = kwargs.get(
            'variantActionability', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)
        self.variantTested = kwargs.get(
            'variantTested', None)
        self.variantUsability = kwargs.get(
            'variantUsability', None)


class AdoptedStatus(object):
    """
    adoptedin means adopted into the family     adoptedout means child
    belonged to the family and was adopted out
    """
    notadopted = "notadopted"
    adoptedin = "adoptedin"
    adoptedout = "adoptedout"

    def __hash__(self):
        return str(self).__hash__()


class AffectionStatus(object):
    """
    Affection Status
    """
    UNAFFECTED = "UNAFFECTED"
    AFFECTED = "AFFECTED"
    UNCERTAIN = "UNCERTAIN"

    def __hash__(self):
        return str(self).__hash__()


class AgeOfOnset(object):
    """
    No documentation
    """
    EMBRYONAL_ONSET = "EMBRYONAL_ONSET"
    FETAL_ONSET = "FETAL_ONSET"
    NEONATAL_ONSET = "NEONATAL_ONSET"
    INFANTILE_ONSET = "INFANTILE_ONSET"
    CHILDHOOD_ONSET = "CHILDHOOD_ONSET"
    JUVENILE_ONSET = "JUVENILE_ONSET"
    YOUNG_ADULT_ONSET = "YOUNG_ADULT_ONSET"
    LATE_ONSET = "LATE_ONSET"
    MIDDLE_AGE_ONSET = "MIDDLE_AGE_ONSET"

    def __hash__(self):
        return str(self).__hash__()


class Aggregation(object):
    """
    EXAC like aggregated data         Adds some attributes to the
    basic mode:           - HOM: Homozygous Counts           - HET:
    Heterozygous Counts
    """
    NONE = "NONE"
    BASIC = "BASIC"
    EVS = "EVS"
    EXAC = "EXAC"

    def __hash__(self):
        return str(self).__hash__()


class AlleleFrequency(ProtocolElement):
    """
    The population allele frequency of a given variant in a given
    study and optionally population
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AlleleFrequency", "fields":
[{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type": "string", "name":
"population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternateFrequency",
        "population",
        "study",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternateFrequency', 'population', 'study'
    ]

    def __init__(self, **kwargs):
        self.alternateFrequency = kwargs.get(
            'alternateFrequency', None)
        self.population = kwargs.get(
            'population', None)
        self.study = kwargs.get(
            'study', None)


class AlleleOrigin(object):
    """
    Variant origin.  * `SO_0001781`: de novo variant.
    http://purl.obolibrary.org/obo/SO_0001781 * `SO_0001778`: germline
    variant. http://purl.obolibrary.org/obo/SO_0001778 * `SO_0001775`:
    maternal variant. http://purl.obolibrary.org/obo/SO_0001775 *
    `SO_0001776`: paternal variant.
    http://purl.obolibrary.org/obo/SO_0001776 * `SO_0001779`: pedigree
    specific variant. http://purl.obolibrary.org/obo/SO_0001779 *
    `SO_0001780`: population specific variant.
    http://purl.obolibrary.org/obo/SO_0001780 * `SO_0001777`: somatic
    variant. http://purl.obolibrary.org/obo/SO_0001777
    """
    de_novo_variant = "de_novo_variant"
    germline_variant = "germline_variant"
    maternal_variant = "maternal_variant"
    paternal_variant = "paternal_variant"
    pedigree_specific_variant = "pedigree_specific_variant"
    population_specific_variant = "population_specific_variant"
    somatic_variant = "somatic_variant"

    def __hash__(self):
        return str(self).__hash__()


class AllelesCode(object):
    """
    No documentation
    """
    ALLELES_OK = "ALLELES_OK"
    ALLELES_MISSING = "ALLELES_MISSING"
    MULTIPLE_ALTERNATES = "MULTIPLE_ALTERNATES"
    HAPLOID = "HAPLOID"

    def __hash__(self):
        return str(self).__hash__()


class AlternateCoordinate(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"AlternateCoordinate", "fields": [{"type": ["null", "string"], "name": "chromosome"}, {"doc": "",
"type": ["null", "int"], "name": "start"}, {"doc": "", "type": ["null", "int"], "name": "end"},
{"doc": "", "type": ["null", "string"], "name": "reference"}, {"doc": "", "type": "string", "name":
"alternate"}, {"type": {"symbols": ["SNV", "SNP", "MNV", "MNP", "INDEL", "SV", "INSERTION",
"DELETION", "TRANSLOCATION", "INVERSION", "CNV", "DUPLICATION", "BREAKEND", "NO_VARIATION",
"SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name": "type"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "chromosome",
        "end",
        "reference",
        "start",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'chromosome', 'end', 'reference', 'start', 'type'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.end = kwargs.get(
            'end', None)
        self.reference = kwargs.get(
            'reference', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', None)


class AnalysisPanel(ProtocolElement):
    """
    An analysis panel
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "AnalysisPanel",
"fields": [{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": "string",
"name": "panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "",
"type": "string", "name": "reviewOutcome"}, {"doc": "", "type": "string", "name":
"multipleGeneticOrigins"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "multipleGeneticOrigins",
        "panelName",
        "panelVersion",
        "reviewOutcome",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'multipleGeneticOrigins', 'panelName', 'panelVersion',
        'reviewOutcome', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.multipleGeneticOrigins = kwargs.get(
            'multipleGeneticOrigins', None)
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)
        self.reviewOutcome = kwargs.get(
            'reviewOutcome', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class Ancestries(ProtocolElement):
    """
    Ancestries, defined as Ethnic category(ies) and Chi-square test
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Ancestries", "fields":
[{"doc": "", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H",
"J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chiSquare1KGenomesPhase3Pop",
        "fathersEthnicOrigin",
        "fathersOtherRelevantAncestry",
        "mothersEthnicOrigin",
        "mothersOtherRelevantAncestry",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chiSquare1KGenomesPhase3Pop': ChiSquare1KGenomesPhase3Pop,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chiSquare1KGenomesPhase3Pop': ChiSquare1KGenomesPhase3Pop,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chiSquare1KGenomesPhase3Pop', 'fathersEthnicOrigin',
        'fathersOtherRelevantAncestry', 'mothersEthnicOrigin',
        'mothersOtherRelevantAncestry'
    ]

    def __init__(self, **kwargs):
        self.chiSquare1KGenomesPhase3Pop = kwargs.get(
            'chiSquare1KGenomesPhase3Pop', None)
        self.fathersEthnicOrigin = kwargs.get(
            'fathersEthnicOrigin', None)
        self.fathersOtherRelevantAncestry = kwargs.get(
            'fathersOtherRelevantAncestry', None)
        self.mothersEthnicOrigin = kwargs.get(
            'mothersEthnicOrigin', None)
        self.mothersOtherRelevantAncestry = kwargs.get(
            'mothersOtherRelevantAncestry', None)


class Assembly(object):
    """
    The reference genome assembly
    """
    GRCh38 = "GRCh38"
    GRCh37 = "GRCh37"

    def __hash__(self):
        return str(self).__hash__()


class AuditLog(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AuditLog", "fields": [{"doc":
"", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "string", "name":
"interpretationRequestVersion"}, {"type": {"symbols": ["C0", "C1", "C2", "C3", "C4", "C5", "C6",
"C7"], "doc": "", "type": "enum", "name": "Code"}, "name": "code"}, {"type": ["null", {"fields":
[{"type": {"items": "string", "type": "array"}, "name": "previousGroups"}, {"type": {"items":
"string", "type": "array"}, "name": "modifiedGroups"}], "type": "record", "name": "CaseShared"}],
"name": "caseShared"}, {"type": ["null", {"fields": [{"type": {"items": "string", "type": "array"},
"name": "previousSupportingEvidences"}, {"type": {"items": "string", "type": "array"}, "name":
"modifiedSupportingEvidences"}], "type": "record", "name": "SupportingEvidences"}], "name":
"supportingEvidences"}, {"type": ["null", {"items": {"fields": [{"type": {"doc": "", "type":
"record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type": "record",
"name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"},
"name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "name":
"previousVariant"}, {"type": "ReportedVariant", "name": "modifiedVariant"}], "type": "record",
"name": "ModifiedVariant"}, "type": "array"}], "name": "modifiedVariants"}, {"type": ["null",
{"items": "ReportedVariant", "type": "array"}], "name": "addedVariants"}, {"type": ["null",
{"items": "ReportedVariant", "type": "array"}], "name": "removedVariants"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "addedVariants",
        "caseShared",
        "code",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "modifiedVariants",
        "removedVariants",
        "supportingEvidences",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'addedVariants': ReportedVariant,
            'caseShared': CaseShared,
            'modifiedVariants': ModifiedVariant,
            'removedVariants': ReportedVariant,
            'supportingEvidences': SupportingEvidences,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'addedVariants': ReportedVariant,
            'caseShared': CaseShared,
            'modifiedVariants': ModifiedVariant,
            'removedVariants': ReportedVariant,
            'supportingEvidences': SupportingEvidences,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'addedVariants', 'caseShared', 'code',
        'interpretationRequestId', 'interpretationRequestVersion',
        'modifiedVariants', 'removedVariants', 'supportingEvidences'
    ]

    def __init__(self, **kwargs):
        self.addedVariants = kwargs.get(
            'addedVariants', None)
        self.caseShared = kwargs.get(
            'caseShared', None)
        self.code = kwargs.get(
            'code', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.modifiedVariants = kwargs.get(
            'modifiedVariants', None)
        self.removedVariants = kwargs.get(
            'removedVariants', None)
        self.supportingEvidences = kwargs.get(
            'supportingEvidences', None)


class CancerActionability(object):
    """
    An enumeration Variant Actionability:       *
    `predicts_therapeutic_response`: Predicts therapeutic response
    * `prognostic`: Prognostic       * `defines_diagnosis_group`:
    Defines diagnosis group       * `eligibility_for_trial`:
    Eligibility for trial       * `germline_susceptibility`: Germline
    susceptibility       * `other`:  Other (please specify)
    """
    germline_susceptibility = "germline_susceptibility"
    predicts_therapeutic_response = "predicts_therapeutic_response"
    prognostic = "prognostic"
    defines_diagnosis_group = "defines_diagnosis_group"
    eligibility_for_trial = "eligibility_for_trial"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class CancerActionabilitySomatic(object):
    """
    The variant actionabilities: * `predicts_therapeutic_response`:
    Predicts therapeutic response * `prognostic`: Prognostic *
    `defines_diagnosis_group`: Defines diagnosis group *
    `eligibility_for_trial`: Eligibility for trial * `other`:  Other
    (please specify)
    """
    predicts_therapeutic_response = "predicts_therapeutic_response"
    prognostic = "prognostic"
    defines_diagnosis_group = "defines_diagnosis_group"
    eligibility_for_trial = "eligibility_for_trial"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class CancerActionableVariants(object):
    """
    Are the variants actionable? * `yes`: yes * `no`: no
    """
    yes = "yes"
    no = "no"

    def __hash__(self):
        return str(self).__hash__()


class CancerCaseLevelQuestions(ProtocolElement):
    """
    The questions for the cancer program exit questionnaire at case
    level
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerCaseLevelQuestions",
"fields": [{"doc": "", "type": "double", "name": "total_review_time"}, {"doc": "", "type": "double",
"name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name": "mdt2_time"}, {"doc": "",
"type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "", "type": ["null",
"double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"], "name":
"analytical_validation_time"}, {"doc": "", "type": "double", "name": "primary_reporting_time"},
{"doc": "", "type": "double", "name": "primary_authorisation_time"}, {"doc": "", "type": "double",
"name": "report_distribution_time"}, {"doc": "", "type": "double", "name": "total_time"}, {"doc":
"", "type": {"symbols": ["domain_1", "domain_1_and_2", "domain_1_2_and_suplementary"], "doc": "",
"type": "enum", "name": "ReviewedParts"}, "name": "reviewedInMdtWga"}, {"doc": "", "type":
{"symbols": ["yes", "no"], "doc": "", "type": "enum", "name": "CancerActionableVariants"}, "name":
"actionableVariants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionableVariants",
        "analytical_validation_time",
        "mdt1_time",
        "mdt2_time",
        "primary_authorisation_time",
        "primary_reporting_time",
        "report_distribution_time",
        "reviewedInMdtWga",
        "total_review_time",
        "total_time",
        "validation_assay_time",
        "wet_validation_time",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionableVariants', 'analytical_validation_time',
        'mdt1_time', 'mdt2_time', 'primary_authorisation_time',
        'primary_reporting_time', 'report_distribution_time',
        'reviewedInMdtWga', 'total_review_time', 'total_time',
        'validation_assay_time', 'wet_validation_time'
    ]

    def __init__(self, **kwargs):
        self.actionableVariants = kwargs.get(
            'actionableVariants', None)
        self.analytical_validation_time = kwargs.get(
            'analytical_validation_time', None)
        self.mdt1_time = kwargs.get(
            'mdt1_time', None)
        self.mdt2_time = kwargs.get(
            'mdt2_time', None)
        self.primary_authorisation_time = kwargs.get(
            'primary_authorisation_time', None)
        self.primary_reporting_time = kwargs.get(
            'primary_reporting_time', None)
        self.report_distribution_time = kwargs.get(
            'report_distribution_time', None)
        self.reviewedInMdtWga = kwargs.get(
            'reviewedInMdtWga', None)
        self.total_review_time = kwargs.get(
            'total_review_time', None)
        self.total_time = kwargs.get(
            'total_time', None)
        self.validation_assay_time = kwargs.get(
            'validation_assay_time', None)
        self.wet_validation_time = kwargs.get(
            'wet_validation_time', None)


class CancerExitQuestionnaire(ProtocolElement):
    """
    The cancer program exit questionnaire
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerExitQuestionnaire",
"fields": [{"doc": "", "type": "string", "name": "eventDate"}, {"doc": "", "type": "string", "name":
"reporter"}, {"doc": "", "type": {"doc": "", "type": "record", "name": "CancerCaseLevelQuestions",
"fields": [{"doc": "", "type": "double", "name": "total_review_time"}, {"doc": "", "type": "double",
"name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name": "mdt2_time"}, {"doc": "",
"type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "", "type": ["null",
"double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"], "name":
"analytical_validation_time"}, {"doc": "", "type": "double", "name": "primary_reporting_time"},
{"doc": "", "type": "double", "name": "primary_authorisation_time"}, {"doc": "", "type": "double",
"name": "report_distribution_time"}, {"doc": "", "type": "double", "name": "total_time"}, {"doc":
"", "type": {"symbols": ["domain_1", "domain_1_and_2", "domain_1_2_and_suplementary"], "doc": "",
"type": "enum", "name": "ReviewedParts"}, "name": "reviewedInMdtWga"}, {"doc": "", "type":
{"symbols": ["yes", "no"], "doc": "", "type": "enum", "name": "CancerActionableVariants"}, "name":
"actionableVariants"}]}, "name": "caseLevelQuestions"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "CancerSomaticVariantLevelQuestions", "fields": [{"doc": "",
"type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items": {"symbols":
["predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionabilitySomatic"}, "type": "array"},
"name": "variantActionability"}, {"doc": "", "type": ["null", "string"], "name":
"otherVariantActionability"}, {"doc": "", "type": {"symbols": ["already_actioned",
"actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum", "name":
"CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga"], "doc": "", "type": "enum", "name": "CancerTested"}, "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}]}, "type": "array"}],
"name": "somaticVariantLevelQuestions"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string",
"name": "variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
"CancerTested", "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}]}, "type": "array"}], "name": "germlineVariantLevelQuestions"}, {"doc": "",
"type": ["null", "string"], "name": "additionalComments"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
"CancerActionability", "type": "array"}, "name": "variantActionability"}, {"type": ["null",
"string"], "name": "otherVariantActionability"}, {"doc": "", "type": "CancerUsabilitySomatic",
"name": "variantUsability"}, {"doc": "", "type": {"symbols": ["not_indicated_for_patient_care",
"no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga", "na"], "doc": "", "type": "enum", "name":
"CancerTestedAdditional"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "type": "record", "name": "AdditionalVariantsQuestions"}, "type":
"array"}], "name": "otherActionableVariants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "caseLevelQuestions",
        "eventDate",
        "germlineVariantLevelQuestions",
        "otherActionableVariants",
        "reporter",
        "somaticVariantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'caseLevelQuestions': CancerCaseLevelQuestions,
            'germlineVariantLevelQuestions': CancerGermlineVariantLevelQuestions,
            'otherActionableVariants': AdditionalVariantsQuestions,
            'somaticVariantLevelQuestions': CancerSomaticVariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'caseLevelQuestions': CancerCaseLevelQuestions,
            'germlineVariantLevelQuestions': CancerGermlineVariantLevelQuestions,
            'otherActionableVariants': AdditionalVariantsQuestions,
            'somaticVariantLevelQuestions': CancerSomaticVariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'caseLevelQuestions', 'eventDate',
        'germlineVariantLevelQuestions', 'otherActionableVariants',
        'reporter', 'somaticVariantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.caseLevelQuestions = kwargs.get(
            'caseLevelQuestions', CancerCaseLevelQuestions())
        self.eventDate = kwargs.get(
            'eventDate', None)
        self.germlineVariantLevelQuestions = kwargs.get(
            'germlineVariantLevelQuestions', None)
        self.otherActionableVariants = kwargs.get(
            'otherActionableVariants', None)
        self.reporter = kwargs.get(
            'reporter', None)
        self.somaticVariantLevelQuestions = kwargs.get(
            'somaticVariantLevelQuestions', None)


class CancerGermlineVariantLevelQuestionnaire(ProtocolElement):
    """
    A record holding the germline variant level questions for a single
    variant together with its normalized variant coordinates
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name":
"CancerGermlineVariantLevelQuestionnaire", "fields": [{"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "",
"type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "assembly"}], "doc": ""}, "name": "variantCoordinates"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "CancerGermlineVariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
{"symbols": ["germline_susceptibility", "predicts_therapeutic_response", "prognostic",
"defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type": "enum", "name":
"CancerActionability"}, "type": "array"}, "name": "variantActionability"}, {"type": ["null",
"string"], "name": "otherVariantActionability"}, {"doc": "", "type": {"symbols":
["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type": "enum", "name":
"CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga"], "doc": "", "type": "enum", "name": "CancerTested"}, "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}], "doc": ""}, "name":
"variantLevelQuestions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "variantCoordinates",
        "variantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantCoordinates': VariantCoordinates,
            'variantLevelQuestions': CancerGermlineVariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantCoordinates': VariantCoordinates,
            'variantLevelQuestions': CancerGermlineVariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'variantCoordinates', 'variantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())
        self.variantLevelQuestions = kwargs.get(
            'variantLevelQuestions', CancerGermlineVariantLevelQuestions())


class CancerGermlineVariantLevelQuestions(ProtocolElement):
    """
    The questions for the cancer program exit questionnaire for
    germline variants
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
{"symbols": ["not_indicated_for_patient_care", "no_orthologous_test_available",
"test_performed_prior_to_wga", "technical_validation_following_wga"], "doc": "", "type": "enum",
"name": "CancerTested"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "otherVariantActionability",
        "validationAssayType",
        "variantActionability",
        "variantDetails",
        "variantTested",
        "variantUsability",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'otherVariantActionability', 'validationAssayType',
        'variantActionability', 'variantDetails', 'variantTested',
        'variantUsability'
    ]

    def __init__(self, **kwargs):
        self.otherVariantActionability = kwargs.get(
            'otherVariantActionability', None)
        self.validationAssayType = kwargs.get(
            'validationAssayType', None)
        self.variantActionability = kwargs.get(
            'variantActionability', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)
        self.variantTested = kwargs.get(
            'variantTested', None)
        self.variantUsability = kwargs.get(
            'variantUsability', None)


class CancerInterpretationRequest(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretationRequest",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "genomeAssembly"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name":
"workspace"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "File",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"},
{"doc": "", "type": "string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF",
"VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null",
"string"], "name": "md5Sum"}]}, "type": "array"}], "name": "bams"}, {"doc": "", "type": ["null",
{"items": "File", "type": "array"}], "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File",
"type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name":
"annotationFile"}, {"doc": "", "type": ["null", {"values": "File", "type": "map"}], "name":
"otherFiles"}, {"doc": "", "type": ["null", {"namespace": "org.gel.models.participant.avro", "type":
"record", "name": "CancerParticipant", "fields": [{"doc": "", "type": ["null", "int"], "name":
"yearOfBirth"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"morphology"}, {"doc": "", "type": "boolean", "name": "readyForAnalysis"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default": false, "doc":
"", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "primaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", "string"],
"name": "center"}, {"doc": "", "type": "string", "name": "individualId"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisDisease"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisSubDisease"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "assignedICD10"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"TumourSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL",
"IIP", "MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"},
{"doc": "", "type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST",
"CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC",
"HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL",
"OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS",
"UPPER_GASTROINTESTINAL", "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}]}, "type": "array"}, "name":
"tumourSamples"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GermlineSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
["null", "SampleSource"], "name": "source"}, {"doc": "", "type": ["null", "Product"], "name":
"product"}, {"doc": "", "type": ["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc":
"", "type": ["null", "ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null",
"string"], "name": "clinicalSampleDateTime"}]}, "type": "array"}, "name": "germlineSamples"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "MatchedSamples", "fields":
[{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type": ["null",
"string"], "name": "tumourSampleId"}]}, "type": "array"}, "name": "matchedSamples"}, {"doc": "",
"type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"}],
"doc": ""}], "name": "cancerParticipant"}, {"doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name": "otherFamilyHistory"},
{"doc": "", "type": ["null", {"values": {"values": {"values": "float", "type": "map"}, "type":
"map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "InterpretationFlag", "fields": [{"doc": "", "type":
{"symbols": ["mixed_chemistries", "mixedLab_preparation", "low_tumour_purity",
"uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype", "high_cnv_count",
"high_estimate_human_contamination_fraction", "mixed_recruiting_gmc", "suspected_mosaicism",
"low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}]}, "type": "array"}], "name": "interpretationFlags"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "annotationFile",
        "bams",
        "bigWigs",
        "cancerParticipant",
        "genePanelsCoverage",
        "genomeAssembly",
        "internalStudyId",
        "interpretationFlags",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "otherFamilyHistory",
        "otherFiles",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'cancerParticipant': CancerParticipant,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'cancerParticipant': CancerParticipant,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'annotationFile', 'bams', 'bigWigs',
        'cancerParticipant', 'genePanelsCoverage', 'genomeAssembly',
        'internalStudyId', 'interpretationFlags',
        'interpretationRequestId', 'interpretationRequestVersion',
        'otherFamilyHistory', 'otherFiles', 'vcfs', 'versionControl',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.cancerParticipant = kwargs.get(
            'cancerParticipant', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomeAssembly = kwargs.get(
            'genomeAssembly', None)
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.interpretationFlags = kwargs.get(
            'interpretationFlags', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class CancerInterpretedGenome(ProtocolElement):
    """
    A interpreted genome for the cancer program. This holds the list
    of candidate variants reported by an interpretation     service
    together with all the relevant information that identify the case
    and how these conclusions were reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretedGenome",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "", "type": {"doc": "",
"type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols":
["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"ReportEventCancer", "fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "",
"type": {"symbols": ["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type":
"enum", "name": "GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name":
"ensemblId"}, {"doc": "", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name":
"genomicEntities"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type":
["null", "string"], "name": "name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "",
"type": ["null", {"items": {"doc": "", "type": "record", "name": "Action", "fields": [{"doc": "",
"type": ["null", {"symbols": ["therapy", "therapeutic", "prognosis", "diagnosis"], "doc": "",
"type": "enum", "name": "ActionType"}], "name": "actionType"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type": ["null",
{"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name": "ActionStatus"}],
"name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type":
["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"},
{"doc": "", "type": "string", "name": "source"}]}, "type": "array"}], "name": "actions"}, {"doc":
"", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"],
"name": "eventJustification"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"items": {"symbols": ["oncogene",
"tumor_suppressor_gene", "both"], "doc": "", "type": "enum", "name": "RoleInCancer"}, "type":
"array"}], "name": "roleInCancer"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1",
"TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]},
"type": "array"}, "name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name":
"ihp"}, {"doc": "", "type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type":
["null", "string"], "name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string",
"name": "study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float",
"name": "alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}, {"doc": "", "type": {"items": "AlleleOrigin", "type": "array"},
"name": "alleleOrigins"}]}, "type": "array"}, "name": "variants"}, {"doc": "", "type": {"values":
"string", "type": "map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values":
"string", "type": "map"}, "name": "softwareVersions"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "comments",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "interpretationService",
        "referenceDatabasesVersions",
        "reportUrl",
        "softwareVersions",
        "variants",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'comments', 'interpretationRequestId',
        'interpretationRequestVersion', 'interpretationService',
        'referenceDatabasesVersions', 'reportUrl', 'softwareVersions',
        'variants', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.comments = kwargs.get(
            'comments', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.interpretationService = kwargs.get(
            'interpretationService', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportUrl = kwargs.get(
            'reportUrl', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.variants = kwargs.get(
            'variants', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())


class CancerParticipant(ProtocolElement):
    """
    This defines a Cancer Participant
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "CancerParticipant",
"fields": [{"doc": "", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "morphology"}, {"doc": "", "type": "boolean", "name":
"readyForAnalysis"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"ConsentStatus", "fields": [{"default": false, "doc": "", "type": "boolean", "name":
"programmeConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"primaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", "string"],
"name": "center"}, {"doc": "", "type": "string", "name": "individualId"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisDisease"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisSubDisease"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "assignedICD10"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"TumourSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL",
"IIP", "MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"},
{"doc": "", "type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST",
"CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC",
"HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL",
"OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS",
"UPPER_GASTROINTESTINAL", "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}]}, "type": "array"}, "name":
"tumourSamples"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GermlineSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
["null", "SampleSource"], "name": "source"}, {"doc": "", "type": ["null", "Product"], "name":
"product"}, {"doc": "", "type": ["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc":
"", "type": ["null", "ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null",
"string"], "name": "clinicalSampleDateTime"}]}, "type": "array"}, "name": "germlineSamples"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "MatchedSamples", "fields":
[{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type": ["null",
"string"], "name": "tumourSampleId"}]}, "type": "array"}, "name": "matchedSamples"}, {"doc": "",
"type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInformation",
        "assignedICD10",
        "center",
        "consentStatus",
        "germlineSamples",
        "individualId",
        "matchedSamples",
        "morphology",
        "primaryDiagnosisDisease",
        "primaryDiagnosisSubDisease",
        "readyForAnalysis",
        "sex",
        "tumourSamples",
        "versionControl",
        "yearOfBirth",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
            'germlineSamples': GermlineSample,
            'matchedSamples': MatchedSamples,
            'tumourSamples': TumourSample,
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
            'germlineSamples': GermlineSample,
            'matchedSamples': MatchedSamples,
            'tumourSamples': TumourSample,
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInformation', 'assignedICD10', 'center',
        'consentStatus', 'germlineSamples', 'individualId',
        'matchedSamples', 'morphology', 'primaryDiagnosisDisease',
        'primaryDiagnosisSubDisease', 'readyForAnalysis', 'sex',
        'tumourSamples', 'versionControl', 'yearOfBirth'
    ]

    def __init__(self, **kwargs):
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.assignedICD10 = kwargs.get(
            'assignedICD10', None)
        self.center = kwargs.get(
            'center', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.germlineSamples = kwargs.get(
            'germlineSamples', None)
        self.individualId = kwargs.get(
            'individualId', None)
        self.matchedSamples = kwargs.get(
            'matchedSamples', None)
        self.morphology = kwargs.get(
            'morphology', None)
        self.primaryDiagnosisDisease = kwargs.get(
            'primaryDiagnosisDisease', None)
        self.primaryDiagnosisSubDisease = kwargs.get(
            'primaryDiagnosisSubDisease', None)
        self.readyForAnalysis = kwargs.get(
            'readyForAnalysis', None)
        self.sex = kwargs.get(
            'sex', None)
        self.tumourSamples = kwargs.get(
            'tumourSamples', None)
        self.versionControl = kwargs.get(
            'versionControl', None)
        self.yearOfBirth = kwargs.get(
            'yearOfBirth', None)


class CancerSomaticVariantLevelQuestionnaire(ProtocolElement):
    """
    A record holding the somatic variant level questions for a single
    variant together with its normalized variant coordinates
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name":
"CancerSomaticVariantLevelQuestionnaire", "fields": [{"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "",
"type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "assembly"}], "doc": ""}, "name": "variantCoordinates"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "CancerSomaticVariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
{"symbols": ["predicts_therapeutic_response", "prognostic", "defines_diagnosis_group",
"eligibility_for_trial", "other"], "doc": "", "type": "enum", "name": "CancerActionabilitySomatic"},
"type": "array"}, "name": "variantActionability"}, {"doc": "", "type": ["null", "string"], "name":
"otherVariantActionability"}, {"doc": "", "type": {"symbols": ["already_actioned",
"actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum", "name":
"CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga"], "doc": "", "type": "enum", "name": "CancerTested"}, "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}], "doc": ""}, "name":
"variantLevelQuestions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "variantCoordinates",
        "variantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantCoordinates': VariantCoordinates,
            'variantLevelQuestions': CancerSomaticVariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantCoordinates': VariantCoordinates,
            'variantLevelQuestions': CancerSomaticVariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'variantCoordinates', 'variantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())
        self.variantLevelQuestions = kwargs.get(
            'variantLevelQuestions', CancerSomaticVariantLevelQuestions())


class CancerSomaticVariantLevelQuestions(ProtocolElement):
    """
    The questions for the cancer program exit questionnaire for
    somatic variants
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerSomaticVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["predicts_therapeutic_response",
"prognostic", "defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type":
"enum", "name": "CancerActionabilitySomatic"}, "type": "array"}, "name": "variantActionability"},
{"doc": "", "type": ["null", "string"], "name": "otherVariantActionability"}, {"doc": "", "type":
{"symbols": ["already_actioned", "actioned_result_of_this_wga", "not_yet_actioned"], "doc": "",
"type": "enum", "name": "CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type":
{"symbols": ["not_indicated_for_patient_care", "no_orthologous_test_available",
"test_performed_prior_to_wga", "technical_validation_following_wga"], "doc": "", "type": "enum",
"name": "CancerTested"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "otherVariantActionability",
        "validationAssayType",
        "variantActionability",
        "variantDetails",
        "variantTested",
        "variantUsability",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'otherVariantActionability', 'validationAssayType',
        'variantActionability', 'variantDetails', 'variantTested',
        'variantUsability'
    ]

    def __init__(self, **kwargs):
        self.otherVariantActionability = kwargs.get(
            'otherVariantActionability', None)
        self.validationAssayType = kwargs.get(
            'validationAssayType', None)
        self.variantActionability = kwargs.get(
            'variantActionability', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)
        self.variantTested = kwargs.get(
            'variantTested', None)
        self.variantUsability = kwargs.get(
            'variantUsability', None)


class CancerTested(object):
    """
    Was the variant validated with an orthogonal technology? *
    `not_indicated_for_patient_care`: No: not indicated for patient
    care at this time * `no_orthologous_test_available`: No: no
    orthologous test available * `test_performed_prior_to_wga`: Yes:
    test performed prior to receiving WGA (eg using standard-of-care
    assay such as panel testing, or sanger sequencing) *
    `technical_validation_following_WGA`: Yes: technical validation
    performed/planned following receiving this WGA
    """
    not_indicated_for_patient_care = "not_indicated_for_patient_care"
    no_orthologous_test_available = "no_orthologous_test_available"
    test_performed_prior_to_wga = "test_performed_prior_to_wga"
    technical_validation_following_wga = "technical_validation_following_wga"

    def __hash__(self):
        return str(self).__hash__()


class CancerTestedAdditional(object):
    """
    An enumeration Variant tested:       *
    `not_indicated_for_patient_care`: No: not indicated for patient
    care at this time       * `no_orthologous_test_available`: No: no
    orthologous test available       * `test_performed_prior_to_wga`:
    Yes: test performed prior to receiving WGA (eg using
    standard-of-care assay such as panel testing, or sanger
    sequencing)       * `technical_validation_following_wga`: Yes:
    technical validation performed/planned following receiving this
    WGA       * `na`: N/A
    """
    not_indicated_for_patient_care = "not_indicated_for_patient_care"
    no_orthologous_test_available = "no_orthologous_test_available"
    test_performed_prior_to_wga = "test_performed_prior_to_wga"
    technical_validation_following_wga = "technical_validation_following_wga"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class CancerUsabilityGermline(object):
    """
    Variant usability for germline variants: * `already_actioned`:
    Already actioned (i.e. prior to receiving this WGA) *
    `actioned_result_of_this_wga`: actioned as a result of receiving
    this WGA
    """
    already_actioned = "already_actioned"
    actioned_result_of_this_wga = "actioned_result_of_this_wga"

    def __hash__(self):
        return str(self).__hash__()


class CancerUsabilitySomatic(object):
    """
    Variant usability for somatic variants: * `already_actioned`:
    Already actioned (i.e. prior to receiving this WGA) *
    `actioned_result_of_this_wga`: actioned as a result of receiving
    this WGA * `not_yet_actioned`: not yet actioned, but potentially
    actionable in the future
    """
    already_actioned = "already_actioned"
    actioned_result_of_this_wga = "actioned_result_of_this_wga"
    not_yet_actioned = "not_yet_actioned"

    def __hash__(self):
        return str(self).__hash__()


class CandidateVariantInjectCancer(ProtocolElement):
    """
    Record for cancer reported variant injection as part of the data
    intake for CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "CandidateVariantInjectCancer",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro",
"type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretedGenome",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "", "type": {"doc": "",
"type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly",
"name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"},
"name": "variants"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"comments"}], "doc": ""}, "name": "interpretedGenome"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "cohortId",
        "groupId",
        "id",
        "interpretedGenome",
        "parentId",
        "parentVersion",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': CancerInterpretedGenome,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': CancerInterpretedGenome,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'cohortId', 'groupId',
        'id', 'interpretedGenome', 'parentId', 'parentVersion',
        'reportModelVersion', 'version', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.interpretedGenome = kwargs.get(
            'interpretedGenome', CancerInterpretedGenome())
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class CandidateVariantInjectRD(ProtocolElement):
    """
    Record for reported variant injection as part of the data intake
    for CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "CandidateVariantInjectRD",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro",
"type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretedGenomeRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly",
"name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name": "variants"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "softwareVersions"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "comments"}], "doc": ""}, "name":
"interpretedGenome"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "cohortId",
        "groupId",
        "id",
        "interpretedGenome",
        "parentId",
        "parentVersion",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': InterpretedGenomeRD,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': InterpretedGenomeRD,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'cohortId', 'groupId',
        'id', 'interpretedGenome', 'parentId', 'parentVersion',
        'reportModelVersion', 'version', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.interpretedGenome = kwargs.get(
            'interpretedGenome', InterpretedGenomeRD())
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class CaseShared(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CaseShared", "fields":
[{"type": {"items": "string", "type": "array"}, "name": "previousGroups"}, {"type": {"items":
"string", "type": "array"}, "name": "modifiedGroups"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedGroups",
        "previousGroups",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedGroups', 'previousGroups'
    ]

    def __init__(self, **kwargs):
        self.modifiedGroups = kwargs.get(
            'modifiedGroups', None)
        self.previousGroups = kwargs.get(
            'previousGroups', None)


class CaseSolvedFamily(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    partially = "partially"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class ChiSquare1KGenomesPhase3Pop(ProtocolElement):
    """
    Chi-square test for goodness of fit of this sample to 1000 Genomes
    Phase 3 populations
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name":
"ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR", "AMR", "EAS",
"EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chiSquare",
        "kgPopCategory",
        "kgSuperPopCategory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chiSquare', 'kgPopCategory', 'kgSuperPopCategory'
    ]

    def __init__(self, **kwargs):
        self.chiSquare = kwargs.get(
            'chiSquare', None)
        self.kgPopCategory = kwargs.get(
            'kgPopCategory', None)
        self.kgSuperPopCategory = kwargs.get(
            'kgSuperPopCategory', None)


class ChromosomeStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"ChromosomeStats", "fields": [{"doc": "", "type": "int", "name": "count"}, {"doc": "", "type":
"float", "name": "density"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "count",
        "density",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'count', 'density'
    ]

    def __init__(self, **kwargs):
        self.count = kwargs.get(
            'count', None)
        self.density = kwargs.get(
            'density', None)


class ClinVar(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "ClinVar",
"fields": [{"type": ["null", "string"], "name": "accession"}, {"type": ["null", "string"], "name":
"clinicalSignificance"}, {"type": ["null", {"items": "string", "type": "array"}], "name": "traits"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "geneNames"}, {"type": ["null",
"string"], "name": "reviewStatus"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "accession",
        "clinicalSignificance",
        "geneNames",
        "reviewStatus",
        "traits",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'accession', 'clinicalSignificance', 'geneNames',
        'reviewStatus', 'traits'
    ]

    def __init__(self, **kwargs):
        self.accession = kwargs.get(
            'accession', None)
        self.clinicalSignificance = kwargs.get(
            'clinicalSignificance', None)
        self.geneNames = kwargs.get(
            'geneNames', None)
        self.reviewStatus = kwargs.get(
            'reviewStatus', None)
        self.traits = kwargs.get(
            'traits', None)


class ClinicalReportCancer(ProtocolElement):
    """
    A clinical report for the cancer program. This holds the list of
    reported variants by a GMC together with all     the relevant
    information that identify the case and how these conclusions were
    reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportCancer",
"fields": [{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type":
"int", "name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name":
"reportingDate"}, {"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null",
{"items": {"doc": "", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "",
"type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type":
"string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "",
"type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name":
"assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name":
"dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}],
"name": "variants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "softwareVersions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "genomicInterpretation",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "referenceDatabasesVersions",
        "references",
        "reportingDate",
        "softwareVersions",
        "user",
        "variants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'genomicInterpretation', 'interpretationRequestId',
        'interpretationRequestVersion', 'referenceDatabasesVersions',
        'references', 'reportingDate', 'softwareVersions', 'user',
        'variants'
    ]

    def __init__(self, **kwargs):
        self.genomicInterpretation = kwargs.get(
            'genomicInterpretation', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.references = kwargs.get(
            'references', None)
        self.reportingDate = kwargs.get(
            'reportingDate', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.user = kwargs.get(
            'user', None)
        self.variants = kwargs.get(
            'variants', None)


class ClinicalReportRD(ProtocolElement):
    """
    A clinical report for the rare disease program. This holds the
    list of reported variants by a GMC together with all     the
    relevant information that identify the case and how these
    conclusions were reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportRD", "fields":
[{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int",
"name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "reportingDate"},
{"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols":
["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"},
"name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}],
"name": "variants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"}, {"doc": "",
"type": ["null", {"items": {"doc": "", "type": "record", "name": "AdditionalAnalysisPanel",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": "GenePanel", "name": "panel"}]},
"type": "array"}], "name": "additionalAnalysisPanels"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "references"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "softwareVersions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalAnalysisPanels",
        "genomicInterpretation",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "referenceDatabasesVersions",
        "references",
        "reportingDate",
        "softwareVersions",
        "user",
        "variants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAnalysisPanels': AdditionalAnalysisPanel,
            'variants': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAnalysisPanels': AdditionalAnalysisPanel,
            'variants': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalAnalysisPanels', 'genomicInterpretation',
        'interpretationRequestId', 'interpretationRequestVersion',
        'referenceDatabasesVersions', 'references', 'reportingDate',
        'softwareVersions', 'user', 'variants'
    ]

    def __init__(self, **kwargs):
        self.additionalAnalysisPanels = kwargs.get(
            'additionalAnalysisPanels', None)
        self.genomicInterpretation = kwargs.get(
            'genomicInterpretation', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.references = kwargs.get(
            'references', None)
        self.reportingDate = kwargs.get(
            'reportingDate', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.user = kwargs.get(
            'user', None)
        self.variants = kwargs.get(
            'variants', None)


class ClinicalSignificance(object):
    """
    Mendelian variants classification with ACMG terminology as defined
    in Richards, S. et al. (2015). Standards and         guidelines
    for the interpretation of sequence variants: a joint consensus
    recommendation of the American College         of Medical Genetics
    and Genomics and the Association for Molecular Pathology. Genetics
    in Medicine, 17(5),         405 423.
    https://doi.org/10.1038/gim.2015.30.      Classification for
    pharmacogenomic variants, variants associated to     disease and
    somatic variants based on the ACMG recommendations and ClinVar
    classification
    (https://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/).  *
    `benign_variant` : Benign variants interpreted for Mendelian
    disorders * `likely_benign_variant` : Likely benign variants
    interpreted for Mendelian disorders with a certainty of at least
    90% * `pathogenic_variant` : Pathogenic variants interpreted for
    Mendelian disorders * `likely_pathogenic_variant` : Likely
    pathogenic variants interpreted for Mendelian disorders with a
    certainty of at least 90% * `uncertain_significance` : Uncertain
    significance variants interpreted for Mendelian disorders.
    Variants with conflicting evidences should be classified as
    uncertain_significance
    """
    benign = "benign"
    likely_benign = "likely_benign"
    VUS = "VUS"
    likely_pathogenic = "likely_pathogenic"
    pathogenic = "pathogenic"
    uncertain_significance = "uncertain_significance"

    def __hash__(self):
        return str(self).__hash__()


class ClinicalUtility(object):
    """
    No documentation
    """
    none = "none"
    change_in_medication = "change_in_medication"
    surgical_option = "surgical_option"
    additional_surveillance_for_proband_or_relatives = "additional_surveillance_for_proband_or_relatives"
    clinical_trial_eligibility = "clinical_trial_eligibility"
    informs_reproductive_choice = "informs_reproductive_choice"
    unknown = "unknown"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class Code(object):
    """
    This code define the change type, it can define a general change
    in the case as CLOSED or can define a change in one or more
    variants:  * `C0`: **Case Closed successfully**: Clinical Report
    was generated with **one or more Candidate Variants**. * `C1`:
    **Case Closed unsuccessfully**: Clinical Report couldn't be
    generated because **no Candidate Variants were found**. * `C2`:
    **Case Blocked**: Errors were found in this cases and was sent to
    quarantine for further investigation * `C3`: **Case Shared**: This
    cases was shared with other group of users. * `C4`: **Supporting
    evidence change**: One or More supporting evidence were modified
    to the cases __(See ClinicalReport)__. * `C5`: **Variant added**:
    One or more variant were selected as Candidate Variants. * `C6`:
    **Variant removed**: One or more variant were removed as Candidate
    Variants. * `C7`: **Variant modified**: One or more Candidate
    Variants were modified __(Any change or comment over this variants
    should be capture)__.
    """
    C0 = "C0"
    C1 = "C1"
    C2 = "C2"
    C3 = "C3"
    C4 = "C4"
    C5 = "C5"
    C6 = "C6"
    C7 = "C7"

    def __hash__(self):
        return str(self).__hash__()


class Cohort(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.metadata", "type": "record", "name": "Cohort", "fields":
[{"type": "string", "name": "id"}, {"default": [], "type": {"items": "string", "type": "array"},
"name": "sampleIds"}, {"type": {"symbols": ["CASE_CONTROL", "CASE_SET", "CONTROL_SET", "PAIRED",
"TIME_SERIES", "FAMILY", "TRIO", "MISCELLANEOUS", "UNKNOWN"], "type": "enum", "name":
"SampleSetType"}, "name": "sampleSetType"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "sampleSetType",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'sampleIds', 'sampleSetType'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.sampleIds = kwargs.get(
            'sampleIds', [])
        self.sampleSetType = kwargs.get(
            'sampleSetType', None)


class Comment(ProtocolElement):
    """
    A generic comment.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "Comment", "fields": [{"doc": "",
"type": "string", "name": "text"}, {"doc": "", "type": "string", "name": "date"}, {"doc": "",
"type": "string", "name": "userid"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "date",
        "text",
        "userid",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'date', 'text', 'userid'
    ]

    def __init__(self, **kwargs):
        self.date = kwargs.get(
            'date', None)
        self.text = kwargs.get(
            'text', None)
        self.userid = kwargs.get(
            'userid', None)


class Confidence(object):
    """
    Confidence based on the Confidence Information Ontology  *
    `CIO_0000029`: high confidence level
    http://purl.obolibrary.org/obo/CIO_0000029 * `CIO_0000031`: low
    confidence level http://purl.obolibrary.org/obo/CIO_0000031 *
    `CIO_0000030`: medium confidence level
    http://purl.obolibrary.org/obo/CIO_0000030 * `CIO_0000039`:
    rejected http://purl.obolibrary.org/obo/CIO_0000039
    """
    low_confidence_level = "low_confidence_level"
    medium_confidence_level = "medium_confidence_level"
    high_confidence_level = "high_confidence_level"
    rejected = "rejected"

    def __hash__(self):
        return str(self).__hash__()


class ConfirmationDecision(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ConfirmationOutcome(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ConsentStatus(ProtocolElement):
    """
    Consent Status
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "ConsentStatus",
"fields": [{"default": false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'carrierStatusConsent', 'primaryFindingConsent',
        'programmeConsent', 'secondaryFindingConsent'
    ]

    def __init__(self, **kwargs):
        self.carrierStatusConsent = kwargs.get(
            'carrierStatusConsent', False)
        self.primaryFindingConsent = kwargs.get(
            'primaryFindingConsent', False)
        self.programmeConsent = kwargs.get(
            'programmeConsent', False)
        self.secondaryFindingConsent = kwargs.get(
            'secondaryFindingConsent', False)


class ConsequenceType(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "ConsequenceType",
"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"ensemblGeneId"}, {"type": ["null", "string"], "name": "ensemblTranscriptId"}, {"type": ["null",
"string"], "name": "strand"}, {"type": ["null", "string"], "name": "biotype"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "number"}, {"type": ["null", "float"],
"name": "percentage"}], "type": "record", "name": "ExonOverlap"}, "type": "array"}], "name":
"exonOverlap"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"transcriptAnnotationFlags"}, {"type": ["null", "int"], "name": "cdnaPosition"}, {"type": ["null",
"int"], "name": "cdsPosition"}, {"type": ["null", "string"], "name": "codon"}, {"type": ["null",
{"fields": [{"default": null, "type": ["null", "string"], "name": "uniprotAccession"}, {"default":
null, "type": ["null", "string"], "name": "uniprotName"}, {"type": "int", "name": "position"},
{"type": ["null", "string"], "name": "reference"}, {"type": ["null", "string"], "name":
"alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"}, {"type": ["null", "string"],
"name": "functionalDescription"}, {"type": ["null", {"items": {"fields": [{"type": "double", "name":
"score"}, {"type": "string", "name": "source"}, {"type": ["null", "string"], "name":
"description"}], "type": "record", "name": "Score"}, "type": "array"}], "name":
"substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name": "keywords"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": "int",
"name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"], "name": "type"},
{"type": ["null", "string"], "name": "description"}], "type": "record", "name": "ProteinFeature"},
"type": "array"}], "name": "features"}], "type": "record", "name": "ProteinVariantAnnotation"}],
"name": "proteinVariantAnnotation"}, {"type": {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "name"}], "type": "record", "name":
"SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "biotype",
        "cdnaPosition",
        "cdsPosition",
        "codon",
        "ensemblGeneId",
        "ensemblTranscriptId",
        "exonOverlap",
        "geneName",
        "proteinVariantAnnotation",
        "sequenceOntologyTerms",
        "strand",
        "transcriptAnnotationFlags",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'exonOverlap': ExonOverlap,
            'proteinVariantAnnotation': ProteinVariantAnnotation,
            'sequenceOntologyTerms': SequenceOntologyTerm,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'exonOverlap': ExonOverlap,
            'proteinVariantAnnotation': ProteinVariantAnnotation,
            'sequenceOntologyTerms': SequenceOntologyTerm,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'biotype', 'cdnaPosition', 'cdsPosition', 'codon',
        'ensemblGeneId', 'ensemblTranscriptId', 'exonOverlap',
        'geneName', 'proteinVariantAnnotation',
        'sequenceOntologyTerms', 'strand', 'transcriptAnnotationFlags'
    ]

    def __init__(self, **kwargs):
        self.biotype = kwargs.get(
            'biotype', None)
        self.cdnaPosition = kwargs.get(
            'cdnaPosition', None)
        self.cdsPosition = kwargs.get(
            'cdsPosition', None)
        self.codon = kwargs.get(
            'codon', None)
        self.ensemblGeneId = kwargs.get(
            'ensemblGeneId', None)
        self.ensemblTranscriptId = kwargs.get(
            'ensemblTranscriptId', None)
        self.exonOverlap = kwargs.get(
            'exonOverlap', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.proteinVariantAnnotation = kwargs.get(
            'proteinVariantAnnotation', None)
        self.sequenceOntologyTerms = kwargs.get(
            'sequenceOntologyTerms', None)
        self.strand = kwargs.get(
            'strand', None)
        self.transcriptAnnotationFlags = kwargs.get(
            'transcriptAnnotationFlags', None)


class ConsistencyStatus(object):
    """
    The consistency of evidences for a given phenotype. This
    aggregates all evidences for a given phenotype and all
    evidences with no phenotype associated (e.g.: in silico impact
    prediction, population frequency).     This is based on the
    Confidence Information Ontology terms.  * `CIO_0000033`:
    congruent, all evidences are consistent.
    http://purl.obolibrary.org/obo/CIO_0000033 * `CIO_0000034`:
    conflict, there are conflicting evidences. This should correspond
    to a `VariantClassification` of `uncertain_significance` for
    mendelian disorders. http://purl.obolibrary.org/obo/CIO_0000034 *
    `CIO_0000035`: strongly conflicting.
    http://purl.obolibrary.org/obo/CIO_0000035 * `CIO_0000036`: weakly
    conflicting. http://purl.obolibrary.org/obo/CIO_0000036
    """
    congruent = "congruent"
    conflict = "conflict"
    weakly_conflicting = "weakly_conflicting"
    strongly_conflicting = "strongly_conflicting"

    def __hash__(self):
        return str(self).__hash__()


class Cosmic(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Cosmic",
"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "geneName",
        "histologySubtype",
        "mutationId",
        "mutationSomaticStatus",
        "primaryHistology",
        "primarySite",
        "sampleSource",
        "siteSubtype",
        "tumourOrigin",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'geneName', 'histologySubtype', 'mutationId',
        'mutationSomaticStatus', 'primaryHistology', 'primarySite',
        'sampleSource', 'siteSubtype', 'tumourOrigin'
    ]

    def __init__(self, **kwargs):
        self.geneName = kwargs.get(
            'geneName', None)
        self.histologySubtype = kwargs.get(
            'histologySubtype', None)
        self.mutationId = kwargs.get(
            'mutationId', None)
        self.mutationSomaticStatus = kwargs.get(
            'mutationSomaticStatus', None)
        self.primaryHistology = kwargs.get(
            'primaryHistology', None)
        self.primarySite = kwargs.get(
            'primarySite', None)
        self.sampleSource = kwargs.get(
            'sampleSource', None)
        self.siteSubtype = kwargs.get(
            'siteSubtype', None)
        self.tumourOrigin = kwargs.get(
            'tumourOrigin', None)


class Curation(ProtocolElement):
    """
    The curation record contains all information that might be stored
    from a curation event.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "Curation", "fields": [{"doc":
"", "type": {"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}], "doc": ""}, "name": "heritableTrait"}, {"doc":
"", "type": ["null", {"namespace": "org.opencb.biodata.models.variant.avro", "type": "record",
"name": "GenomicFeature", "fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region",
"gene", "transcript", "protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name":
"featureType"}, {"doc": "", "type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "xrefs"}], "doc": ""}], "name":
"genomicFeature"}, {"doc": "", "type": ["null", {"symbols": ["GRCh38", "GRCh37"], "namespace":
"org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc": ""}], "name": "assembly"},
{"doc": "", "type": ["null", {"namespace": "org.opencb.biodata.models.variant.avro", "type":
"record", "name": "VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols":
["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"],
"doc": "", "type": "enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"},
{"doc": "", "type": ["null", {"symbols": ["responsive", "resistant", "toxicity", "indication",
"contraindication", "dosing", "increased_monitoring", "efficacy"], "doc": "", "type": "enum",
"name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type":
["null", {"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}], "doc": ""}],
"name": "variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "namespace":
"org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Confidence", "doc": ""}], "name":
"confidence"}, {"doc": "", "type": {"symbols": ["congruent", "conflict", "weakly_conflicting",
"strongly_conflicting"], "namespace": "org.opencb.biodata.models.variant.avro", "type": "enum",
"name": "ConsistencyStatus", "doc": ""}, "name": "automaticConsistencyStatus"}, {"doc": "", "type":
["null", "org.opencb.biodata.models.variant.avro.ConsistencyStatus"], "name":
"manualConsistencyStatus"}, {"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"],
"namespace": "org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Penetrance", "doc":
""}], "name": "penetrance"}, {"doc": "", "type": ["null", "boolean"], "name":
"variableExpressivity"}, {"doc": "", "type": ["null", "boolean"], "name":
"reportableAsSecondaryFinding"}, {"doc": "", "type": ["null", "boolean"], "name": "actionable"},
{"doc": "", "type": ["null", "boolean"], "name": "confirmed"}, {"default": [], "doc": "", "type":
{"items": {"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"Property", "fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"doc": "", "type":
["null", "string"], "name": "name"}, {"doc": "", "type": ["null", "string"], "name": "value"}],
"doc": ""}, "type": "array"}, "name": "additionalProperties"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "bibliography"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionable",
        "assembly",
        "automaticConsistencyStatus",
        "confidence",
        "confirmed",
        "genomicFeature",
        "heritableTrait",
        "manualConsistencyStatus",
        "penetrance",
        "reportableAsSecondaryFinding",
        "variableExpressivity",
        "variantClassification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'genomicFeature': GenomicFeature,
            'heritableTrait': HeritableTrait,
            'variantClassification': VariantClassification,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'genomicFeature': GenomicFeature,
            'heritableTrait': HeritableTrait,
            'variantClassification': VariantClassification,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionable', 'additionalProperties', 'assembly',
        'automaticConsistencyStatus', 'bibliography', 'confidence',
        'confirmed', 'genomicFeature', 'heritableTrait',
        'manualConsistencyStatus', 'penetrance',
        'reportableAsSecondaryFinding', 'variableExpressivity',
        'variantClassification'
    ]

    def __init__(self, **kwargs):
        self.actionable = kwargs.get(
            'actionable', None)
        self.additionalProperties = kwargs.get(
            'additionalProperties', [])
        self.assembly = kwargs.get(
            'assembly', None)
        self.automaticConsistencyStatus = kwargs.get(
            'automaticConsistencyStatus', None)
        self.bibliography = kwargs.get(
            'bibliography', [])
        self.confidence = kwargs.get(
            'confidence', None)
        self.confirmed = kwargs.get(
            'confirmed', None)
        self.genomicFeature = kwargs.get(
            'genomicFeature', None)
        self.heritableTrait = kwargs.get(
            'heritableTrait', HeritableTrait())
        self.manualConsistencyStatus = kwargs.get(
            'manualConsistencyStatus', None)
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.reportableAsSecondaryFinding = kwargs.get(
            'reportableAsSecondaryFinding', None)
        self.variableExpressivity = kwargs.get(
            'variableExpressivity', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)


class CurationAndVariants(ProtocolElement):
    """
    A curation and the variants coordinates to which it corresponds
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "CurationAndVariants", "fields":
[{"type": {"doc": "", "type": "record", "name": "VariantsCoordinates", "fields": [{"default": [],
"type": {"items": {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "",
"type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "",
"type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc":
"", "type": "enum", "name": "Assembly"}, "name": "assembly"}], "doc": ""}, "type": "array"}, "name":
"variants"}]}, "name": "variantsCoordinates"}, {"type": {"doc": "", "type": "record", "name":
"Curation", "fields": [{"doc": "", "type": {"namespace": "org.opencb.biodata.models.variant.avro",
"type": "record", "name": "HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"],
"name": "trait"}, {"doc": "", "type": ["null", {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type":
"enum", "name": "ModeOfInheritance"}], "name": "inheritanceMode"}], "doc": ""}, "name":
"heritableTrait"}, {"doc": "", "type": ["null", {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "GenomicFeature", "fields":
[{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript", "protein"],
"doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "", "type":
["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "xrefs"}], "doc": ""}], "name": "genomicFeature"}, {"doc": "", "type": ["null",
"org.gel.models.report.avro.Assembly"], "name": "assembly"}, {"doc": "", "type": ["null",
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "doc": "",
"type": "enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "",
"type": ["null", {"symbols": ["responsive", "resistant", "toxicity", "indication",
"contraindication", "dosing", "increased_monitoring", "efficacy"], "doc": "", "type": "enum",
"name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type":
["null", {"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}], "doc": ""}],
"name": "variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "namespace":
"org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Confidence", "doc": ""}], "name":
"confidence"}, {"doc": "", "type": {"symbols": ["congruent", "conflict", "weakly_conflicting",
"strongly_conflicting"], "namespace": "org.opencb.biodata.models.variant.avro", "type": "enum",
"name": "ConsistencyStatus", "doc": ""}, "name": "automaticConsistencyStatus"}, {"doc": "", "type":
["null", "org.opencb.biodata.models.variant.avro.ConsistencyStatus"], "name":
"manualConsistencyStatus"}, {"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"],
"namespace": "org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Penetrance", "doc":
""}], "name": "penetrance"}, {"doc": "", "type": ["null", "boolean"], "name":
"variableExpressivity"}, {"doc": "", "type": ["null", "boolean"], "name":
"reportableAsSecondaryFinding"}, {"doc": "", "type": ["null", "boolean"], "name": "actionable"},
{"doc": "", "type": ["null", "boolean"], "name": "confirmed"}, {"default": [], "doc": "", "type":
{"items": {"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"Property", "fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"doc": "", "type":
["null", "string"], "name": "name"}, {"doc": "", "type": ["null", "string"], "name": "value"}],
"doc": ""}, "type": "array"}, "name": "additionalProperties"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "bibliography"}]}, "name": "curation"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "curation",
        "variantsCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'curation': Curation,
            'variantsCoordinates': VariantsCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'curation': Curation,
            'variantsCoordinates': VariantsCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'curation', 'variantsCoordinates'
    ]

    def __init__(self, **kwargs):
        self.curation = kwargs.get(
            'curation', Curation())
        self.variantsCoordinates = kwargs.get(
            'variantsCoordinates', VariantsCoordinates())


class CurationEntry(ProtocolElement):
    """
    A curation for a known variant contains the current curation state
    and the curation history.     Must be unique by
    `curation.phenotype` and `curation.inheritanceMode`.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "CurationEntry", "fields":
[{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "Curation", "fields": [{"doc": "", "type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "HeritableTrait", "fields":
[{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "", "type": ["null", {"symbols":
["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name": "ModeOfInheritance"}], "name":
"inheritanceMode"}], "doc": ""}, "name": "heritableTrait"}, {"doc": "", "type": ["null",
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}], "doc": ""}], "name": "genomicFeature"}, {"doc": "", "type":
["null", {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro", "type":
"enum", "name": "Assembly", "doc": ""}], "name": "assembly"}, {"doc": "", "type": ["null",
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "doc": "",
"type": "enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "",
"type": ["null", {"symbols": ["responsive", "resistant", "toxicity", "indication",
"contraindication", "dosing", "increased_monitoring", "efficacy"], "doc": "", "type": "enum",
"name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type":
["null", {"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}], "doc": ""}],
"name": "variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "namespace":
"org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Confidence", "doc": ""}], "name":
"confidence"}, {"doc": "", "type": {"symbols": ["congruent", "conflict", "weakly_conflicting",
"strongly_conflicting"], "namespace": "org.opencb.biodata.models.variant.avro", "type": "enum",
"name": "ConsistencyStatus", "doc": ""}, "name": "automaticConsistencyStatus"}, {"doc": "", "type":
["null", "org.opencb.biodata.models.variant.avro.ConsistencyStatus"], "name":
"manualConsistencyStatus"}, {"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"],
"namespace": "org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Penetrance", "doc":
""}], "name": "penetrance"}, {"doc": "", "type": ["null", "boolean"], "name":
"variableExpressivity"}, {"doc": "", "type": ["null", "boolean"], "name":
"reportableAsSecondaryFinding"}, {"doc": "", "type": ["null", "boolean"], "name": "actionable"},
{"doc": "", "type": ["null", "boolean"], "name": "confirmed"}, {"default": [], "doc": "", "type":
{"items": {"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"Property", "fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"doc": "", "type":
["null", "string"], "name": "name"}, {"doc": "", "type": ["null", "string"], "name": "value"}],
"doc": ""}, "type": "array"}, "name": "additionalProperties"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "bibliography"}]}, "name": "curation"}, {"default":
[], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "CurationHistoryEntry",
"fields": [{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type": "Curation", "name":
"curation"}, {"doc": "", "type": "string", "name": "userId"}]}, "type": "array"}, "name":
"history"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"Comment", "fields": [{"doc": "", "type": "string", "name": "text"}, {"doc": "", "type": "string",
"name": "date"}, {"doc": "", "type": "string", "name": "userid"}]}, "type": "array"}, "name":
"comments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "curation",
        "date",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'comments': Comment,
            'curation': Curation,
            'history': CurationHistoryEntry,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'comments': Comment,
            'curation': Curation,
            'history': CurationHistoryEntry,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'comments', 'curation', 'date', 'history'
    ]

    def __init__(self, **kwargs):
        self.comments = kwargs.get(
            'comments', [])
        self.curation = kwargs.get(
            'curation', Curation())
        self.date = kwargs.get(
            'date', None)
        self.history = kwargs.get(
            'history', [])


class CurationHistoryEntry(ProtocolElement):
    """
    A curation history entry, stores previous and new curation state,
    the date of the change and the author.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "CurationHistoryEntry", "fields":
[{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "Curation", "fields": [{"doc": "", "type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "HeritableTrait", "fields":
[{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "", "type": ["null", {"symbols":
["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name": "ModeOfInheritance"}], "name":
"inheritanceMode"}], "doc": ""}, "name": "heritableTrait"}, {"doc": "", "type": ["null",
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}], "doc": ""}], "name": "genomicFeature"}, {"doc": "", "type":
["null", {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro", "type":
"enum", "name": "Assembly", "doc": ""}], "name": "assembly"}, {"doc": "", "type": ["null",
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "doc": "",
"type": "enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "",
"type": ["null", {"symbols": ["responsive", "resistant", "toxicity", "indication",
"contraindication", "dosing", "increased_monitoring", "efficacy"], "doc": "", "type": "enum",
"name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type":
["null", {"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}], "doc": ""}],
"name": "variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "namespace":
"org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Confidence", "doc": ""}], "name":
"confidence"}, {"doc": "", "type": {"symbols": ["congruent", "conflict", "weakly_conflicting",
"strongly_conflicting"], "namespace": "org.opencb.biodata.models.variant.avro", "type": "enum",
"name": "ConsistencyStatus", "doc": ""}, "name": "automaticConsistencyStatus"}, {"doc": "", "type":
["null", "org.opencb.biodata.models.variant.avro.ConsistencyStatus"], "name":
"manualConsistencyStatus"}, {"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"],
"namespace": "org.opencb.biodata.models.variant.avro", "type": "enum", "name": "Penetrance", "doc":
""}], "name": "penetrance"}, {"doc": "", "type": ["null", "boolean"], "name":
"variableExpressivity"}, {"doc": "", "type": ["null", "boolean"], "name":
"reportableAsSecondaryFinding"}, {"doc": "", "type": ["null", "boolean"], "name": "actionable"},
{"doc": "", "type": ["null", "boolean"], "name": "confirmed"}, {"default": [], "doc": "", "type":
{"items": {"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"Property", "fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"doc": "", "type":
["null", "string"], "name": "name"}, {"doc": "", "type": ["null", "string"], "name": "value"}],
"doc": ""}, "type": "array"}, "name": "additionalProperties"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "bibliography"}]}, "name": "curation"}, {"doc": "",
"type": "string", "name": "userId"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "curation",
        "date",
        "userId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'curation': Curation,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'curation': Curation,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'curation', 'date', 'userId'
    ]

    def __init__(self, **kwargs):
        self.curation = kwargs.get(
            'curation', Curation())
        self.date = kwargs.get(
            'date', None)
        self.userId = kwargs.get(
            'userId', None)


class Cytoband(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Cytoband",
"fields": [{"type": ["null", "string"], "name": "chromosome"}, {"type": ["null", "string"], "name":
"stain"}, {"type": ["null", "string"], "name": "name"}, {"type": ["null", "int"], "name": "start"},
{"type": ["null", "int"], "name": "end"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chromosome",
        "end",
        "name",
        "stain",
        "start",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chromosome', 'end', 'name', 'stain', 'start'
    ]

    def __init__(self, **kwargs):
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.end = kwargs.get(
            'end', None)
        self.name = kwargs.get(
            'name', None)
        self.stain = kwargs.get(
            'stain', None)
        self.start = kwargs.get(
            'start', None)


class DataStore(ProtocolElement):
    """
    Represents the contract of DataStore. Type of the datastore can be
    mongodb, postgres, etc
    """
    _schemaSource = """
{"namespace": "org.gel.models.system.avro", "type": "record", "name": "DataStore", "fields":
[{"type": "string", "name": "type"}, {"type": "string", "name": "description"}, {"type": {"items":
"string", "type": "array"}, "name": "url"}, {"type": {"symbols": ["OK", "DOWN"], "doc": "", "type":
"enum", "name": "Status"}, "name": "status"}, {"type": ["null", {"values": "string", "type":
"map"}], "name": "additionalProperties"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalProperties",
        "description",
        "status",
        "type",
        "url",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalProperties', 'description', 'status', 'type', 'url'
    ]

    def __init__(self, **kwargs):
        self.additionalProperties = kwargs.get(
            'additionalProperties', None)
        self.description = kwargs.get(
            'description', None)
        self.status = kwargs.get(
            'status', None)
        self.type = kwargs.get(
            'type', None)
        self.url = kwargs.get(
            'url', None)


class Dependencies(ProtocolElement):
    """
    Represents contract of all dependencies for a service
    """
    _schemaSource = """
{"namespace": "org.gel.models.system.avro", "type": "record", "name": "Dependencies", "fields":
[{"type": {"items": {"doc": "", "type": "record", "name": "DataStore", "fields": [{"type": "string",
"name": "type"}, {"type": "string", "name": "description"}, {"type": {"items": "string", "type":
"array"}, "name": "url"}, {"type": {"symbols": ["OK", "DOWN"], "doc": "", "type": "enum", "name":
"Status"}, "name": "status"}, {"type": ["null", {"values": "string", "type": "map"}], "name":
"additionalProperties"}]}, "type": "array"}, "name": "datastores"}, {"type": {"items": {"doc": "",
"type": "record", "name": "API", "fields": [{"type": {"symbols": ["REST", "MONGODB", "OTHER"],
"type": "enum", "name": "APIType"}, "name": "type"}, {"type": "string", "name": "description"},
{"type": {"items": "string", "type": "array"}, "name": "url"}, {"type": "Status", "name": "status"},
{"type": ["null", {"values": "string", "type": "map"}], "name": "additionalProperties"}]}, "type":
"array"}, "name": "apis"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "apis",
        "datastores",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'apis': API,
            'datastores': DataStore,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'apis': API,
            'datastores': DataStore,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'apis', 'datastores'
    ]

    def __init__(self, **kwargs):
        self.apis = kwargs.get(
            'apis', None)
        self.datastores = kwargs.get(
            'datastores', None)


class DiseasePenetrance(ProtocolElement):
    """
    A disease penetrance definition
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "DiseasePenetrance",
"fields": [{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "penetrance",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'penetrance', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class Disorder(ProtocolElement):
    """
    This is quite GEL specific. This is the way is stored in
    ModelCatalogue and PanelApp.     Currently all specific disease
    titles are assigned to a disease subgroup so really only
    specificDisease needs to be     completed but we add the others
    for generality
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Disorder", "fields":
[{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"}, {"doc": "", "type": ["null",
"string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null", "string"], "name":
"specificDisease"}, {"doc": "", "type": ["null", "float"], "name": "ageOfOnset"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "diseaseGroup",
        "diseaseSubGroup",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'diseaseGroup', 'diseaseSubGroup',
        'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.diseaseGroup = kwargs.get(
            'diseaseGroup', None)
        self.diseaseSubGroup = kwargs.get(
            'diseaseSubGroup', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class Drug(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Drug", "fields":
[{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"], "name":
"pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"], "name":
"association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"], "name":
"evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name": "bibliography"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "association",
        "bibliography",
        "effect",
        "evidence",
        "pathway",
        "status",
        "therapeuticContext",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'association', 'bibliography', 'effect', 'evidence',
        'pathway', 'status', 'therapeuticContext'
    ]

    def __init__(self, **kwargs):
        self.association = kwargs.get(
            'association', None)
        self.bibliography = kwargs.get(
            'bibliography', None)
        self.effect = kwargs.get(
            'effect', None)
        self.evidence = kwargs.get(
            'evidence', None)
        self.pathway = kwargs.get(
            'pathway', None)
        self.status = kwargs.get(
            'status', None)
        self.therapeuticContext = kwargs.get(
            'therapeuticContext', None)


class DrugResponseClassification(object):
    """
    Pharmacogenomics drug response variant classification *
    `responsive` : A variant that confers response to a treatment *
    `resistant` : A variant that confers resistance to a treatment *
    `toxicity` : A variant that is associated with drug-induced
    toxicity * `indication` : A variant that is required in order for
    a particular drug to be prescribed * `contraindication` : A
    variant that if present, a particular drug should not be
    prescribed * `dosing` : A variant that results in an alteration in
    dosing of a particular drug in order to achieve INR, reduce
    toxicity or increase efficacy * `increased_monitoring` : increase
    vigilance or increased dosage monitoring may be required for a
    patient with this variant to look for signs of adverse drug
    reactions * `efficacy` : a variant that affects the efficacy of
    the treatment
    """
    responsive = "responsive"
    resistant = "resistant"
    toxicity = "toxicity"
    indication = "indication"
    contraindication = "contraindication"
    dosing = "dosing"
    increased_monitoring = "increased_monitoring"
    efficacy = "efficacy"

    def __hash__(self):
        return str(self).__hash__()


class EthnicCategory(object):
    """
    This is the list of ethnics in ONS16  * `D`:  Mixed: White and
    Black Caribbean * `E`:  Mixed: White and Black African * `F`:
    Mixed: White and Asian * `G`:  Mixed: Any other mixed background *
    `A`:  White: British * `B`:  White: Irish * `C`:  White: Any other
    White background * `L`:  Asian or Asian British: Any other Asian
    background * `M`:  Black or Black British: Caribbean * `N`:  Black
    or Black British: African * `H`:  Asian or Asian British: Indian *
    `J`:  Asian or Asian British: Pakistani * `K`:  Asian or Asian
    British: Bangladeshi * `P`:  Black or Black British: Any other
    Black background * `S`:  Other Ethnic Groups: Any other ethnic
    group * `R`:  Other Ethnic Groups: Chinese * `Z`:  Not stated
    """
    D = "D"
    E = "E"
    F = "F"
    G = "G"
    A = "A"
    B = "B"
    C = "C"
    L = "L"
    M = "M"
    N = "N"
    H = "H"
    J = "J"
    K = "K"
    P = "P"
    S = "S"
    R = "R"
    Z = "Z"

    def __hash__(self):
        return str(self).__hash__()


class EvidenceEntry(ProtocolElement):
    """
    An entry for an evidence
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "EvidenceEntry",
"fields": [{"doc": "", "type": {"doc": "", "type": "record", "name": "EvidenceSource", "fields":
[{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null", "string"],
"name": "version"}, {"doc": "", "type": ["null", "string"], "name": "date"}]}, "name": "source"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name": "submitter"},
{"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null", "string"],
"name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null", "string"],
"name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"}, {"doc": "",
"type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null", "string"],
"name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name": "tumourOrigin"},
{"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name": "somaticInformation"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"}, {"doc": "", "type":
["null", {"items": {"symbols": ["de_novo_variant", "germline_variant", "maternal_variant",
"paternal_variant", "pedigree_specific_variant", "population_specific_variant", "somatic_variant"],
"doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name": "alleleOrigin"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "HeritableTrait",
"fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "", "type": ["null",
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name": "ModeOfInheritance"}], "name":
"inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"}, {"default": [], "doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature", "fields": [{"doc": "",
"type": ["null", {"symbols": ["regulatory_region", "gene", "transcript", "protein"], "doc": "",
"type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "", "type": ["null",
"string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "doc": "", "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "doc":
"", "type": "enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"},
{"doc": "", "type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}],
"name": "traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger",
"modifier"], "doc": "", "type": "enum", "name": "TumorigenesisClassification"}], "name":
"tumorigenesisClassification"}, {"doc": "", "type": ["null", {"symbols":
["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "", "type": "enum",
"name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alleleOrigin",
        "assembly",
        "confidence",
        "consistencyStatus",
        "description",
        "ethnicity",
        "id",
        "impact",
        "penetrance",
        "somaticInformation",
        "source",
        "url",
        "variableExpressivity",
        "variantClassification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'genomicFeatures': GenomicFeature,
            'heritableTraits': HeritableTrait,
            'somaticInformation': SomaticInformation,
            'source': EvidenceSource,
            'submissions': EvidenceSubmission,
            'variantClassification': VariantClassification,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'genomicFeatures': GenomicFeature,
            'heritableTraits': HeritableTrait,
            'somaticInformation': SomaticInformation,
            'source': EvidenceSource,
            'submissions': EvidenceSubmission,
            'variantClassification': VariantClassification,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalProperties', 'alleleOrigin', 'assembly',
        'bibliography', 'confidence', 'consistencyStatus',
        'description', 'ethnicity', 'genomicFeatures',
        'heritableTraits', 'id', 'impact', 'penetrance',
        'somaticInformation', 'source', 'submissions', 'url',
        'variableExpressivity', 'variantClassification'
    ]

    def __init__(self, **kwargs):
        self.additionalProperties = kwargs.get(
            'additionalProperties', [])
        self.alleleOrigin = kwargs.get(
            'alleleOrigin', None)
        self.assembly = kwargs.get(
            'assembly', None)
        self.bibliography = kwargs.get(
            'bibliography', [])
        self.confidence = kwargs.get(
            'confidence', None)
        self.consistencyStatus = kwargs.get(
            'consistencyStatus', None)
        self.description = kwargs.get(
            'description', None)
        self.ethnicity = kwargs.get(
            'ethnicity', None)
        self.genomicFeatures = kwargs.get(
            'genomicFeatures', [])
        self.heritableTraits = kwargs.get(
            'heritableTraits', [])
        self.id = kwargs.get(
            'id', None)
        self.impact = kwargs.get(
            'impact', None)
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.somaticInformation = kwargs.get(
            'somaticInformation', None)
        self.source = kwargs.get(
            'source', EvidenceSource())
        self.submissions = kwargs.get(
            'submissions', [])
        self.url = kwargs.get(
            'url', None)
        self.variableExpressivity = kwargs.get(
            'variableExpressivity', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)


class EvidenceEntryAndVariants(ProtocolElement):
    """
    An evidence entry and the variants coordinates to which it
    corresponds
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "EvidenceEntryAndVariants",
"fields": [{"type": {"doc": "", "type": "record", "name": "VariantsCoordinates", "fields":
[{"default": [], "type": {"items": {"namespace": "org.gel.models.report.avro", "type": "record",
"name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}], "doc": ""}, "type":
"array"}, "name": "variants"}]}, "name": "variantsCoordinates"}, {"type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "EvidenceEntry", "fields":
[{"doc": "", "type": {"doc": "", "type": "record", "name": "EvidenceSource", "fields": [{"doc": "",
"type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null", "string"], "name":
"version"}, {"doc": "", "type": ["null", "string"], "name": "date"}]}, "name": "source"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name": "submitter"},
{"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null", "string"],
"name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null", "string"],
"name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"}, {"doc": "",
"type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null", "string"],
"name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name": "tumourOrigin"},
{"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name": "somaticInformation"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"}, {"doc": "", "type":
["null", {"items": {"symbols": ["de_novo_variant", "germline_variant", "maternal_variant",
"paternal_variant", "pedigree_specific_variant", "population_specific_variant", "somatic_variant"],
"doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name": "alleleOrigin"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "HeritableTrait",
"fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "", "type": ["null",
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name": "ModeOfInheritance"}], "name":
"inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"}, {"default": [], "doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature", "fields": [{"doc": "",
"type": ["null", {"symbols": ["regulatory_region", "gene", "transcript", "protein"], "doc": "",
"type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "", "type": ["null",
"string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "doc": "", "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "doc":
"", "type": "enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"},
{"doc": "", "type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}],
"name": "traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger",
"modifier"], "doc": "", "type": "enum", "name": "TumorigenesisClassification"}], "name":
"tumorigenesisClassification"}, {"doc": "", "type": ["null", {"symbols":
["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "", "type": "enum",
"name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}], "doc": ""},
"name": "evidenceEntry"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "evidenceEntry",
        "variantsCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'evidenceEntry': EvidenceEntry,
            'variantsCoordinates': VariantsCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'evidenceEntry': EvidenceEntry,
            'variantsCoordinates': VariantsCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'evidenceEntry', 'variantsCoordinates'
    ]

    def __init__(self, **kwargs):
        self.evidenceEntry = kwargs.get(
            'evidenceEntry', EvidenceEntry())
        self.variantsCoordinates = kwargs.get(
            'variantsCoordinates', VariantsCoordinates())


class EvidenceImpact(object):
    """
    Evidence of pathogenicity and benign impact as defined in
    Richards, S. et al. (2015). Standards and guidelines for the
    interpretation     of sequence variants: a joint consensus
    recommendation of the American College of Medical Genetics and
    Genomics and     the Association for Molecular Pathology. Genetics
    in Medicine, 17(5), 405 423. https://doi.org/10.1038/gim.2015.30
    Evidence of pathogenicity: * `very_strong`:     - PVS1 null
    variant (nonsense, frameshift, canonical  1 or 2 splice sites,
    initiation codon, single or multiexon     deletion) in a gene
    where LOF is a known mechanism of disease * `strong`:     - PS1
    Same amino acid change as a previously established pathogenic
    variant regardless of nucleotide change     - PS2 De novo (both
    maternity and paternity confirmed) in a patient with the disease
    and no family history     - PS3 Well-established in vitro or in
    vivo functional studies supportive of a damaging effect on the
    gene or gene     product     - PS4 The prevalence of the variant
    in affected individuals is significantly increased compared with
    the prevalence     in controls * `moderate`:     - PM1 Located in
    a mutational hot spot and/or critical and well-established
    functional domain (e.g., active site of     an enzyme) without
    benign variation     - PM2 Absent from controls (or at extremely
    low frequency if recessive) in Exome Sequencing Project, 1000
    Genomes     Project, or Exome Aggregation Consortium     - PM3 For
    recessive disorders, detected in trans with a pathogenic variant
    - PM4 Protein length changes as a result of in-frame
    deletions/insertions in a nonrepeat region or stop-loss
    variants     - PM5 Novel missense change at an amino acid residue
    where a different missense change determined to be pathogenic
    has been seen before     - PM6 Assumed de novo, but without
    confirmation of paternity and maternity * `supporting`:     - PP1
    Cosegregation with disease in multiple affected family members in
    a gene definitively known to cause the     disease     - PP2
    Missense variant in a gene that has a low rate of benign missense
    variation and in which missense variants are     a common
    mechanism of disease     - PP3 Multiple lines of computational
    evidence support a deleterious effect on the gene or gene product
    (conservation, evolutionary, splicing impact, etc.)     - PP4
    Patient s phenotype or family history is highly specific for a
    disease with a single genetic etiology     - PP5 Reputable source
    recently reports variant as pathogenic, but the evidence is not
    available to the laboratory     to perform an independent
    evaluation  Evidence of benign impact: * `stand_alone`:     - BA1
    Allele frequency is >5% in Exome Sequencing Project, 1000 Genomes
    Project, or Exome Aggregation     Consortium * `strong`:     - BS1
    Allele frequency is greater than expected for disorder     - BS2
    Observed in a healthy adult individual for a recessive
    (homozygous), dominant (heterozygous), or X-linked
    (hemizygous) disorder, with full penetrance expected at an early
    age     - BS3 Well-established in vitro or in vivo functional
    studies show no damaging effect on protein function or
    splicing     - BS4 Lack of segregation in affected members of a
    family * `supporting`:     - BP1 Missense variant in a gene for
    which primarily truncating variants are known to cause disease
    - BP2 Observed in trans with a pathogenic variant for a fully
    penetrant dominant gene/disorder or observed in cis     with a
    pathogenic variant in any inheritance pattern     - BP3 In-frame
    deletions/insertions in a repetitive region without a known
    function     - BP4 Multiple lines of computational evidence
    suggest no impact on gene or gene product (conservation,
    evolutionary, splicing impact, etc.)     - BP5 Variant found in a
    case with an alternate molecular basis for disease     - BP6
    Reputable source recently reports variant as benign, but the
    evidence is not available to the laboratory to     perform an
    independent evaluation     - BP7 A synonymous (silent) variant for
    which splicing prediction algorithms predict no impact to the
    splice     consensus sequence nor the creation of a new splice
    site AND the nucleotide is not highly conserved
    """
    very_strong = "very_strong"
    strong = "strong"
    moderate = "moderate"
    supporting = "supporting"
    stand_alone = "stand_alone"

    def __hash__(self):
        return str(self).__hash__()


class EvidenceSet(ProtocolElement):
    """
    An evidences set contains all the evidences and curations for a
    variant or group of variants. It also links to all reports for the
    variant/s. The curations are stored in an array of CurationEntry
    that keep a history of changes to curation status. A curation must
    be associated to a phenotype and optionally to a mode of
    inheritance (MOI) and a genomic feature, only one curation per
    combination of phenotype, MOI and genomic feature is stored. The
    evidences are stored in an array of EvidenceEntry. An evidence may
    be optionally associated to a phenotype, mode of inheritance and
    genomic feature. An evidence not associated to any phenotype is
    considered to be an evidence for any phenotype. Evidence
    consistency is evaluated based on existing curations.  Every
    EvidenceSet is uniquely identified by:  * variants identifiers
    (being a variant identifier formed by chromosome + position +
    reference + alternate) after    natural text sorting  Duplication
    of the prior fields is not be supported.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "EvidenceSet", "fields": [{"doc":
"", "type": "string", "name": "userId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "Variant", "fields": [{"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantRepresentation", "fields": [{"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "namespace": "org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc":
""}, "name": "assembly"}, {"doc": "", "type": ["null", "string"], "name": "annotatorVersion"},
{"doc": "", "type": ["null", "string"], "name": "annotationsVersion"}, {"doc": "", "type":
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantAvro",
"fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "names"}, {"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name":
"end"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string", "name":
"alternate"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "strand"},
{"default": null, "doc": "", "type": ["null", {"fields": [{"type": ["null", "int"], "name":
"ciStartLeft"}, {"type": ["null", "int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name":
"ciEndLeft"}, {"type": ["null", "int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"],
"name": "copyNumber"}, {"doc": "", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type":
["null", "string"], "name": "rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols":
["COPY_NUMBER_GAIN", "COPY_NUMBER_LOSS", "TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name":
"StructuralVariantType"}], "name": "type"}], "type": "record", "name": "StructuralVariation"}],
"name": "sv"}, {"doc": "", "type": "int", "name": "length"}, {"doc": "", "type": {"symbols": ["SNV",
"SNP", "MNV", "MNP", "INDEL", "SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV",
"DUPLICATION", "BREAKEND", "NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name":
"VariantType"}, "name": "type"}, {"default": null, "doc": "", "type": ["null", {"values": {"items":
"string", "type": "array"}, "type": "map"}], "name": "hgvs"}, {"doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "",
"type": ["null", "string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name":
"files"}, {"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "",
"type": ["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"type": "VariantType", "name":
"type"}], "type": "record", "name": "AlternateCoordinate"}, "type": "array"}], "name":
"secondaryAlternates"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "format"},
{"doc": "", "type": {"items": {"items": "string", "type": "array"}, "type": "array"}, "name":
"samplesData"}, {"doc": "", "type": {"values": {"fields": [{"type": ["null", "string"], "name":
"refAllele"}, {"type": ["null", "string"], "name": "altAllele"}, {"type": ["null", "int"], "name":
"refAlleleCount"}, {"type": ["null", "int"], "name": "altAlleleCount"}, {"type": {"values": "int",
"type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesCount"}, {"type": {"values": "float", "type": "map", "java-key-class":
"org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesFreq"}, {"type": ["null", "int"],
"name": "missingAlleles"}, {"type": ["null", "int"], "name": "missingGenotypes"}, {"type": ["null",
"float"], "name": "refAlleleFreq"}, {"type": ["null", "float"], "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "maf"}, {"type": ["null", "float"], "name": "mgf"}, {"type": ["null",
"string"], "name": "mafAllele"}, {"type": ["null", "string"], "name": "mgfGenotype"}, {"type":
["null", "boolean"], "name": "passedFilters"}, {"type": ["null", "int"], "name": "mendelianErrors"},
{"type": ["null", "float"], "name": "casesPercentDominant"}, {"type": ["null", "float"], "name":
"controlsPercentDominant"}, {"type": ["null", "float"], "name": "casesPercentRecessive"}, {"type":
["null", "float"], "name": "controlsPercentRecessive"}, {"type": ["null", "float"], "name":
"quality"}, {"type": ["null", "int"], "name": "numSamples"}, {"default": null, "type": ["null",
"VariantType"], "name": "variantType"}, {"default": null, "type": ["null", {"fields": [{"type":
["null", "float"], "name": "chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null",
"int"], "name": "n"}, {"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"],
"name": "n_Aa_10"}, {"type": ["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"],
"name": "e_AA_11"}, {"type": ["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"],
"name": "e_aa_00"}, {"type": ["null", "float"], "name": "p"}, {"type": ["null", "float"], "name":
"q"}], "type": "record", "name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record",
"name": "VariantStats"}, "type": "map"}, "name": "stats"}], "type": "record", "name": "StudyEntry"},
"type": "array"}, "name": "studies"}, {"default": null, "doc": "", "type": ["null", {"fields":
[{"type": ["null", "string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"},
{"type": ["null", "int"], "name": "end"}, {"type": ["null", "string"], "name": "reference"},
{"type": ["null", "string"], "name": "alternate"}, {"type": ["null", "string"], "name":
"ancestralAllele"}, {"type": ["null", "string"], "name": "id"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null", "string"], "name":
"source"}], "type": "record", "name": "Xref"}, "type": "array"}], "name": "xrefs"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "hgvs"}, {"type": ["null", "string"],
"name": "displayConsequenceType"}, {"default": [], "type": {"items": {"fields": [{"type": ["null",
"string"], "name": "geneName"}, {"type": ["null", "string"], "name": "ensemblGeneId"}, {"type":
["null", "string"], "name": "ensemblTranscriptId"}, {"type": ["null", "string"], "name": "strand"},
{"type": ["null", "string"], "name": "biotype"}, {"type": ["null", {"items": {"fields": [{"type":
["null", "string"], "name": "number"}, {"type": ["null", "float"], "name": "percentage"}], "type":
"record", "name": "ExonOverlap"}, "type": "array"}], "name": "exonOverlap"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "transcriptAnnotationFlags"}, {"type": ["null",
"int"], "name": "cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"}, {"type": ["null",
"string"], "name": "codon"}, {"type": ["null", {"fields": [{"default": null, "type": ["null",
"string"], "name": "uniprotAccession"}, {"default": null, "type": ["null", "string"], "name":
"uniprotName"}, {"type": "int", "name": "position"}, {"type": ["null", "string"], "name":
"reference"}, {"type": ["null", "string"], "name": "alternate"}, {"type": ["null", "string"],
"name": "uniprotVariantId"}, {"type": ["null", "string"], "name": "functionalDescription"}, {"type":
["null", {"items": {"fields": [{"type": "double", "name": "score"}, {"type": "string", "name":
"source"}, {"type": ["null", "string"], "name": "description"}], "type": "record", "name": "Score"},
"type": "array"}], "name": "substitutionScores"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "keywords"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "id"}, {"type": "int", "name": "start"}, {"type": "int", "name": "end"}, {"type": ["null",
"string"], "name": "type"}, {"type": ["null", "string"], "name": "description"}], "type": "record",
"name": "ProteinFeature"}, "type": "array"}], "name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"}, {"type": {"items": {"fields":
[{"type": "string", "name": "accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type":
"record", "name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type":
["null", {"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record",
"name": "PopulationFrequency"}, "type": "array"}], "name": "populationFrequencies"}, {"type":
["null", "string"], "name": "minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"},
{"type": ["null", {"items": "Score", "type": "array"}], "name": "conservation"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"],
"name": "transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type":
["null", "string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP",
"DOWN"], "type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null",
"float"], "name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}], "type": "record", "name": "VariantAnnotation"}], "name":
"annotation"}]}, "name": "variant"}]}, "type": "array"}, "name": "variants"}]}, "type": "array"},
"name": "variants"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "CurationEntry", "fields": [{"doc": "", "type": "string", "name": "date"}, {"doc": "",
"type": {"doc": "", "type": "record", "name": "Curation", "fields": [{"doc": "", "type":
"org.opencb.biodata.models.variant.avro.HeritableTrait", "name": "heritableTrait"}, {"doc": "",
"type": ["null", "org.opencb.biodata.models.variant.avro.GenomicFeature"], "name":
"genomicFeature"}, {"doc": "", "type": ["null", "org.gel.models.report.avro.Assembly"], "name":
"assembly"}, {"doc": "", "type": ["null",
"org.opencb.biodata.models.variant.avro.VariantClassification"], "name": "variantClassification"},
{"doc": "", "type": ["null", "org.opencb.biodata.models.variant.avro.Confidence"], "name":
"confidence"}, {"doc": "", "type": "org.opencb.biodata.models.variant.avro.ConsistencyStatus",
"name": "automaticConsistencyStatus"}, {"doc": "", "type": ["null",
"org.opencb.biodata.models.variant.avro.ConsistencyStatus"], "name": "manualConsistencyStatus"},
{"doc": "", "type": ["null", "org.opencb.biodata.models.variant.avro.Penetrance"], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "boolean"], "name": "reportableAsSecondaryFinding"}, {"doc": "", "type": ["null",
"boolean"], "name": "actionable"}, {"doc": "", "type": ["null", "boolean"], "name": "confirmed"},
{"default": [], "doc": "", "type": {"items": "org.opencb.biodata.models.variant.avro.Property",
"type": "array"}, "name": "additionalProperties"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "bibliography"}]}, "name": "curation"}, {"default": [], "doc":
"", "type": {"items": {"doc": "", "type": "record", "name": "CurationHistoryEntry", "fields":
[{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type": "Curation", "name": "curation"},
{"doc": "", "type": "string", "name": "userId"}]}, "type": "array"}, "name": "history"}, {"default":
[], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "Comment", "fields": [{"doc":
"", "type": "string", "name": "text"}, {"doc": "", "type": "string", "name": "date"}, {"doc": "",
"type": "string", "name": "userid"}]}, "type": "array"}, "name": "comments"}]}, "type": "array"},
"name": "curations"}, {"default": [], "doc": "", "type": {"items":
"org.opencb.biodata.models.variant.avro.EvidenceEntry", "type": "array"}, "name": "evidences"},
{"default": [], "doc": "", "type": {"items": "Comment", "type": "array"}, "name": "comments"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"ReportEventEntry", "fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc":
"", "type": "string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "",
"type": ["null", "boolean"], "name": "latest"}, {"doc": "", "type": ["null", "string"], "name":
"parentId"}, {"doc": "", "type": ["null", "int"], "name": "parentVersion"}, {"doc": "", "type":
"string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "", "type":
"string", "name": "date"}, {"doc": "", "type": "string", "name": "author"}, {"doc": "", "type":
["null", "string"], "name": "authorVersion"}, {"doc": "", "type": {"symbols": ["reported",
"candidate", "tiered", "questionnaire", "other"], "doc": "", "type": "enum", "name":
"ReportEventType"}, "name": "type"}, {"doc": "", "type": {"symbols": ["cancer", "rare_disease"],
"namespace": "org.gel.models.report.avro", "type": "enum", "name": "Program", "doc": ""}, "name":
"program"}, {"default": false, "doc": "", "type": "boolean", "name": "validated"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"}, {"doc": "", "type":
["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}], "doc": ""}],
"name": "reportEvent"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"ReportEventQuestionnaireRD", "fields": [{"doc": "", "type": ["null", "int"], "name":
"groupOfVariants"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name":
"ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc":
"", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name":
"reportingQuestion"}, {"doc": "", "type": {"symbols": ["pathogenic_variant",
"likely_pathogenic_variant", "variant_of_unknown_clinical_significance", "likely_benign_variant",
"benign_variant", "not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name":
"acmgClassification"}, {"doc": "", "type": "string", "name": "publications"}], "doc": ""}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name":
"variantGroup"}, {"doc": "", "type": {"items": "VariantLevelQuestions", "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}, "name": "variantGroupLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions", "fields": [{"doc":
"", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum", "name":
"CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes", "no"],
"type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "", "type":
"string", "name": "additionalComments"}], "doc": ""}, "name": "familyLevelQuestions"}]}], "name":
"reportEventQuestionnaire"}, {"doc": "", "type": ["null", {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "",
"type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": "GenomicEntity", "type":
"array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": "VariantConsequence", "type":
"array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy",
"therapeutic", "prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name":
"actionType"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"references"}, {"doc": "", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "",
"type": "enum", "name": "ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name":
"variantActionable"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]},
"type": "array"}], "name": "actions"}, {"doc": "", "type": ["null", "int"], "name":
"groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name": "eventJustification"}, {"doc":
"", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
"VariantClassification"], "name": "variantClassification"}, {"doc": "", "type": ["null", {"items":
{"symbols": ["oncogene", "tumor_suppressor_gene", "both"], "doc": "", "type": "enum", "name":
"RoleInCancer"}, "type": "array"}], "name": "roleInCancer"}, {"doc": "", "type": ["null", "Tier"],
"name": "tier"}], "doc": ""}], "name": "reportEventCancer"}, {"doc": "", "type": ["null", {"fields":
[{"doc": "", "type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerSomaticVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["predicts_therapeutic_response",
"prognostic", "defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type":
"enum", "name": "CancerActionabilitySomatic"}, "type": "array"}, "name": "variantActionability"},
{"doc": "", "type": ["null", "string"], "name": "otherVariantActionability"}, {"doc": "", "type":
{"symbols": ["already_actioned", "actioned_result_of_this_wga", "not_yet_actioned"], "doc": "",
"type": "enum", "name": "CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type":
{"symbols": ["not_indicated_for_patient_care", "no_orthologous_test_available",
"test_performed_prior_to_wga", "technical_validation_following_wga"], "doc": "", "type": "enum",
"name": "CancerTested"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}], "name": "cancerSomaticVariantLevelQuestions"}, {"doc": "",
"type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
"CancerTested", "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}], "name": "cancerGermlineVariantLevelQuestions"}, {"doc": "",
"type": {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerCaseLevelQuestions", "fields": [{"doc": "", "type": "double", "name": "total_review_time"},
{"doc": "", "type": "double", "name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name":
"mdt2_time"}, {"doc": "", "type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "",
"type": ["null", "double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"],
"name": "analytical_validation_time"}, {"doc": "", "type": "double", "name":
"primary_reporting_time"}, {"doc": "", "type": "double", "name": "primary_authorisation_time"},
{"doc": "", "type": "double", "name": "report_distribution_time"}, {"doc": "", "type": "double",
"name": "total_time"}, {"doc": "", "type": {"symbols": ["domain_1", "domain_1_and_2",
"domain_1_2_and_suplementary"], "doc": "", "type": "enum", "name": "ReviewedParts"}, "name":
"reviewedInMdtWga"}, {"doc": "", "type": {"symbols": ["yes", "no"], "doc": "", "type": "enum",
"name": "CancerActionableVariants"}, "name": "actionableVariants"}], "doc": ""}, "name":
"cancercaseLevelQuestions"}, {"doc": "", "type": ["null", "string"], "name": "additionalComments"},
{"doc": "", "type": ["null", "string"], "name": "otherActionableVariants"}], "type": "record",
"name": "ReportEventQuestionnaireCancer"}], "name": "reportEventQuestionnaireCancer"}, {"default":
[], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ObservedVariant", "fields":
[{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type":
"org.gel.models.report.avro.Assembly", "name": "assembly"}, {"doc": "", "type": "Variant", "name":
"variant"}, {"doc": "", "type": ["null", {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"},
{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols":
["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}], "doc": ""}], "name": "variantCall"},
{"default": false, "doc": "", "type": "boolean", "name": "validated"}, {"default": [], "doc": "",
"type": {"items": "org.opencb.biodata.models.variant.avro.Property", "type": "array"}, "name":
"additionalProperties"}]}, "type": "array"}, "name": "observedVariants"}, {"default": [], "doc": "",
"type": {"items": "Comment", "type": "array"}, "name": "comments"}, {"default": [], "doc": "",
"type": {"items": "org.opencb.biodata.models.variant.avro.Property", "type": "array"}, "name":
"additionalProperties"}]}, "type": "array"}, "name": "reportEvents"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "userId",
        "variants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'comments': Comment,
            'curations': CurationEntry,
            'evidences': EvidenceEntry,
            'reportEvents': ReportEventEntry,
            'variants': Variant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'comments': Comment,
            'curations': CurationEntry,
            'evidences': EvidenceEntry,
            'reportEvents': ReportEventEntry,
            'variants': Variant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'comments', 'curations', 'evidences', 'reportEvents',
        'userId', 'variants'
    ]

    def __init__(self, **kwargs):
        self.comments = kwargs.get(
            'comments', [])
        self.curations = kwargs.get(
            'curations', [])
        self.evidences = kwargs.get(
            'evidences', [])
        self.reportEvents = kwargs.get(
            'reportEvents', [])
        self.userId = kwargs.get(
            'userId', None)
        self.variants = kwargs.get(
            'variants', None)


class EvidenceSource(ProtocolElement):
    """
    The source of an evidence.
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "EvidenceSource",
"fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name": "date"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "date",
        "name",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'date', 'name', 'version'
    ]

    def __init__(self, **kwargs):
        self.date = kwargs.get(
            'date', None)
        self.name = kwargs.get(
            'name', None)
        self.version = kwargs.get(
            'version', None)


class EvidenceSubmission(ProtocolElement):
    """
    The submission information
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name": "submitter"},
{"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null", "string"],
"name": "id"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "date",
        "id",
        "submitter",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'date', 'id', 'submitter'
    ]

    def __init__(self, **kwargs):
        self.date = kwargs.get(
            'date', None)
        self.id = kwargs.get(
            'id', None)
        self.submitter = kwargs.get(
            'submitter', None)


class ExitQuestionnaireInjectCancer(ProtocolElement):
    """
    Record for cancer exit questionnaire injection as part of the data
    intake for CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ExitQuestionnaireInjectCancer",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro",
"type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerCaseLevelQuestions",
"fields": [{"doc": "", "type": "double", "name": "total_review_time"}, {"doc": "", "type": "double",
"name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name": "mdt2_time"}, {"doc": "",
"type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "", "type": ["null",
"double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"], "name":
"analytical_validation_time"}, {"doc": "", "type": "double", "name": "primary_reporting_time"},
{"doc": "", "type": "double", "name": "primary_authorisation_time"}, {"doc": "", "type": "double",
"name": "report_distribution_time"}, {"doc": "", "type": "double", "name": "total_time"}, {"doc":
"", "type": {"symbols": ["domain_1", "domain_1_and_2", "domain_1_2_and_suplementary"], "doc": "",
"type": "enum", "name": "ReviewedParts"}, "name": "reviewedInMdtWga"}, {"doc": "", "type":
{"symbols": ["yes", "no"], "doc": "", "type": "enum", "name": "CancerActionableVariants"}, "name":
"actionableVariants"}], "doc": ""}, "name": "cancercaseLevelQuestions"}, {"doc": "", "type":
{"items": {"doc": "", "type": "record", "name": "CancerSomaticVariantLevelQuestionnaire", "fields":
[{"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "",
"type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "",
"type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly", "name": "assembly"}], "doc":
""}, "name": "variantCoordinates"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro",
"type": "record", "name": "CancerSomaticVariantLevelQuestions", "fields": [{"doc": "", "type":
"string", "name": "variantDetails"}, {"doc": "", "type": {"items": {"symbols":
["predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionabilitySomatic"}, "type": "array"},
"name": "variantActionability"}, {"doc": "", "type": ["null", "string"], "name":
"otherVariantActionability"}, {"doc": "", "type": {"symbols": ["already_actioned",
"actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum", "name":
"CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga"], "doc": "", "type": "enum", "name": "CancerTested"}, "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}], "doc": ""}, "name":
"variantLevelQuestions"}]}, "type": "array"}, "name": "cancerSomaticExitQuestionnaires"}, {"doc":
"", "type": {"items": {"doc": "", "type": "record", "name":
"CancerGermlineVariantLevelQuestionnaire", "fields": [{"doc": "", "type":
"org.gel.models.report.avro.VariantCoordinates", "name": "variantCoordinates"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
"CancerTested", "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}, "name": "variantLevelQuestions"}]}, "type": "array"}, "name":
"cancerGermlineExitQuestionnaires"}, {"doc": "", "type": ["null", "string"], "name":
"additionalComments"}, {"doc": "", "type": ["null", "string"], "name": "otherActionableVariants"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "assembly",
        "author",
        "authorVersion",
        "cancerGermlineExitQuestionnaires",
        "cancerSomaticExitQuestionnaires",
        "cancercaseLevelQuestions",
        "cohortId",
        "groupId",
        "id",
        "otherActionableVariants",
        "parentId",
        "parentVersion",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cancerGermlineExitQuestionnaires': CancerGermlineVariantLevelQuestionnaire,
            'cancerSomaticExitQuestionnaires': CancerSomaticVariantLevelQuestionnaire,
            'cancercaseLevelQuestions': CancerCaseLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cancerGermlineExitQuestionnaires': CancerGermlineVariantLevelQuestionnaire,
            'cancerSomaticExitQuestionnaires': CancerSomaticVariantLevelQuestionnaire,
            'cancercaseLevelQuestions': CancerCaseLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'assembly', 'author', 'authorVersion',
        'cancerGermlineExitQuestionnaires',
        'cancerSomaticExitQuestionnaires', 'cancercaseLevelQuestions',
        'cohortId', 'groupId', 'id', 'otherActionableVariants',
        'parentId', 'parentVersion', 'reportModelVersion', 'version',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cancerGermlineExitQuestionnaires = kwargs.get(
            'cancerGermlineExitQuestionnaires', None)
        self.cancerSomaticExitQuestionnaires = kwargs.get(
            'cancerSomaticExitQuestionnaires', None)
        self.cancercaseLevelQuestions = kwargs.get(
            'cancercaseLevelQuestions', CancerCaseLevelQuestions())
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.otherActionableVariants = kwargs.get(
            'otherActionableVariants', None)
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class ExitQuestionnaireInjectRD(ProtocolElement):
    """
    Record for exit questionnaire injection as part of the data intake
    for CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ExitQuestionnaireInjectRD",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro",
"type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "ExitQuestionnaireRD", "fields": [{"doc": "", "type":
{"items": {"doc": "", "type": "record", "name": "ReportedVariantQuestionnaireRD", "fields": [{"doc":
"", "type": {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "",
"type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "",
"type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly", "name": "assembly"}], "doc":
""}, "name": "variantCoordinates"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"ReportEventQuestionnaireRD", "fields": [{"doc": "", "type": ["null", "int"], "name":
"groupOfVariants"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name":
"ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc":
"", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name":
"reportingQuestion"}, {"doc": "", "type": {"symbols": ["pathogenic_variant",
"likely_pathogenic_variant", "variant_of_unknown_clinical_significance", "likely_benign_variant",
"benign_variant", "not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name":
"acmgClassification"}, {"doc": "", "type": "string", "name": "publications"}], "doc": ""}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name":
"variantGroup"}, {"doc": "", "type": {"items": "VariantLevelQuestions", "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}, "name": "variantGroupLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions", "fields": [{"doc":
"", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum", "name":
"CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes", "no"],
"type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "", "type":
"string", "name": "additionalComments"}], "doc": ""}, "name": "familyLevelQuestions"}]}, "name":
"reportEvent"}]}, "type": "array"}, "name": "variants"}]}], "name": "exitQuestionnaireRd"}, {"doc":
"", "type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"RareDiseaseExitQuestionnaire", "fields": [{"doc": "", "type": "string", "name": "eventDate"},
{"doc": "", "type": "string", "name": "reporter"}, {"doc": "", "type": "FamilyLevelQuestions",
"name": "familyLevelQuestions"}, {"doc": "", "type": {"items": "VariantGroupLevelQuestions", "type":
"array"}, "name": "variantGroupLevelQuestions"}], "doc": ""}], "name":
"rareDiseaseExitQuestionnaire"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "cohortId",
        "exitQuestionnaireRd",
        "groupId",
        "id",
        "parentId",
        "parentVersion",
        "rareDiseaseExitQuestionnaire",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'exitQuestionnaireRd': ExitQuestionnaireRD,
            'rareDiseaseExitQuestionnaire': RareDiseaseExitQuestionnaire,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'exitQuestionnaireRd': ExitQuestionnaireRD,
            'rareDiseaseExitQuestionnaire': RareDiseaseExitQuestionnaire,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'cohortId',
        'exitQuestionnaireRd', 'groupId', 'id', 'parentId',
        'parentVersion', 'rareDiseaseExitQuestionnaire',
        'reportModelVersion', 'version', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.exitQuestionnaireRd = kwargs.get(
            'exitQuestionnaireRd', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.rareDiseaseExitQuestionnaire = kwargs.get(
            'rareDiseaseExitQuestionnaire', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class ExitQuestionnaireRD(ProtocolElement):
    """
    This is an entity to hold the information in
    org.gel.models.report.avro.RareDiseaseExitQuestionnaire in     a
    form compatible with CVA.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ExitQuestionnaireRD", "fields":
[{"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"ReportedVariantQuestionnaireRD", "fields": [{"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "",
"type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "assembly"}], "doc": ""}, "name": "variantCoordinates"}, {"doc": "", "type": {"doc": "",
"type": "record", "name": "ReportEventQuestionnaireRD", "fields": [{"doc": "", "type": ["null",
"int"], "name": "groupOfVariants"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro",
"type": "record", "name": "VariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name":
"ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc":
"", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name":
"reportingQuestion"}, {"doc": "", "type": {"symbols": ["pathogenic_variant",
"likely_pathogenic_variant", "variant_of_unknown_clinical_significance", "likely_benign_variant",
"benign_variant", "not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name":
"acmgClassification"}, {"doc": "", "type": "string", "name": "publications"}], "doc": ""}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name":
"variantGroup"}, {"doc": "", "type": {"items": "VariantLevelQuestions", "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}, "name": "variantGroupLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions", "fields": [{"doc":
"", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum", "name":
"CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes", "no"],
"type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "", "type":
"string", "name": "additionalComments"}], "doc": ""}, "name": "familyLevelQuestions"}]}, "name":
"reportEvent"}]}, "type": "array"}, "name": "variants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "variants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantQuestionnaireRD,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantQuestionnaireRD,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'variants'
    ]

    def __init__(self, **kwargs):
        self.variants = kwargs.get(
            'variants', None)


class ExonOverlap(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "ExonOverlap",
"fields": [{"type": ["null", "string"], "name": "number"}, {"type": ["null", "float"], "name":
"percentage"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "number",
        "percentage",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'number', 'percentage'
    ]

    def __init__(self, **kwargs):
        self.number = kwargs.get(
            'number', None)
        self.percentage = kwargs.get(
            'percentage', None)


class Experiment(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.metadata", "type": "record", "name": "Experiment",
"fields": [{"default": null, "type": ["null", "string"], "name": "center"}, {"default": null,
"type": ["null", "string"], "name": "date"}, {"default": null, "type": ["null", "string"], "name":
"molecule"}, {"default": null, "type": ["null", "string"], "name": "technique"}, {"default": null,
"type": ["null", "string"], "name": "library"}, {"default": null, "type": ["null", "string"],
"name": "libraryLayout"}, {"default": null, "type": ["null", "string"], "name": "platform"},
{"default": null, "type": ["null", "string"], "name": "description"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'center', 'date', 'description', 'library', 'libraryLayout',
        'molecule', 'platform', 'technique'
    ]

    def __init__(self, **kwargs):
        self.center = kwargs.get(
            'center', None)
        self.date = kwargs.get(
            'date', None)
        self.description = kwargs.get(
            'description', None)
        self.library = kwargs.get(
            'library', None)
        self.libraryLayout = kwargs.get(
            'libraryLayout', None)
        self.molecule = kwargs.get(
            'molecule', None)
        self.platform = kwargs.get(
            'platform', None)
        self.technique = kwargs.get(
            'technique', None)


class Expression(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Expression",
"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type": ["null",
"string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"}, {"type":
["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP", "DOWN"],
"type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null", "float"],
"name": "pvalue"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "experimentId",
        "experimentalFactor",
        "expression",
        "factorValue",
        "geneName",
        "pvalue",
        "technologyPlatform",
        "transcriptId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'experimentId', 'experimentalFactor', 'expression',
        'factorValue', 'geneName', 'pvalue', 'technologyPlatform',
        'transcriptId'
    ]

    def __init__(self, **kwargs):
        self.experimentId = kwargs.get(
            'experimentId', None)
        self.experimentalFactor = kwargs.get(
            'experimentalFactor', None)
        self.expression = kwargs.get(
            'expression', None)
        self.factorValue = kwargs.get(
            'factorValue', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.pvalue = kwargs.get(
            'pvalue', None)
        self.technologyPlatform = kwargs.get(
            'technologyPlatform', None)
        self.transcriptId = kwargs.get(
            'transcriptId', None)


class ExpressionCall(object):
    """
    No documentation
    """
    UP = "UP"
    DOWN = "DOWN"

    def __hash__(self):
        return str(self).__hash__()


class FamiliarRelationship(object):
    """
    Familiar relationship from pedrigree
    """
    TwinsMonozygous = "TwinsMonozygous"
    TwinsDizygous = "TwinsDizygous"
    TwinsUnknown = "TwinsUnknown"
    FullSibling = "FullSibling"
    FullSiblingF = "FullSiblingF"
    FullSiblingM = "FullSiblingM"
    Mother = "Mother"
    Father = "Father"
    Son = "Son"
    Daughter = "Daughter"
    ChildOfUnknownSex = "ChildOfUnknownSex"
    MaternalAunt = "MaternalAunt"
    MaternalUncle = "MaternalUncle"
    MaternalUncleOrAunt = "MaternalUncleOrAunt"
    PaternalAunt = "PaternalAunt"
    PaternalUncle = "PaternalUncle"
    PaternalUncleOrAunt = "PaternalUncleOrAunt"
    MaternalGrandmother = "MaternalGrandmother"
    PaternalGrandmother = "PaternalGrandmother"
    MaternalGrandfather = "MaternalGrandfather"
    PaternalGrandfather = "PaternalGrandfather"
    DoubleFirstCousin = "DoubleFirstCousin"
    MaternalCousinSister = "MaternalCousinSister"
    PaternalCousinSister = "PaternalCousinSister"
    MaternalCousinBrother = "MaternalCousinBrother"
    PaternalCousinBrother = "PaternalCousinBrother"
    Cousin = "Cousin"
    Spouse = "Spouse"
    Other = "Other"
    RelationIsNotClear = "RelationIsNotClear"
    Unknown = "Unknown"

    def __hash__(self):
        return str(self).__hash__()


class FamilyLevelQuestions(ProtocolElement):
    """
    The family level questions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions",
"fields": [{"doc": "", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum",
"name": "CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes",
"no"], "type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "",
"type": "string", "name": "additionalComments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "caseSolvedFamily",
        "segregationQuestion",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'caseSolvedFamily',
        'segregationQuestion'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.caseSolvedFamily = kwargs.get(
            'caseSolvedFamily', None)
        self.segregationQuestion = kwargs.get(
            'segregationQuestion', None)


class FamilyQCState(object):
    """
    FamilyQCState
    """
    noState = "noState"
    passedMedicalReviewReadyForInterpretation = "passedMedicalReviewReadyForInterpretation"
    passedMedicalReviewNotReadyForInterpretation = "passedMedicalReviewNotReadyForInterpretation"
    queryToGel = "queryToGel"
    queryToGMC = "queryToGMC"
    failed = "failed"

    def __hash__(self):
        return str(self).__hash__()


class FeatureTypes(object):
    """
    The feature types
    """
    regulatory_region = "regulatory_region"
    gene = "gene"
    transcript = "transcript"
    protein = "protein"

    def __hash__(self):
        return str(self).__hash__()


class File(ProtocolElement):
    """
    This defines a file     This record is uniquely defined by the
    sample identfier and an URI     Currently sample identifier can be
    a single string or a list of strings if multiple samples are
    associated with the same file     *
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "File", "fields": [{"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"}, {"doc": "", "type":
"string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF", "VCF_small",
"VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV", "VCF_SV_CNV", "SVG",
"ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES", "COVERAGE"], "type":
"enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null", "string"], "name":
"md5Sum"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "fileType",
        "md5Sum",
        "sampleId",
        "uriFile",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fileType', 'md5Sum', 'sampleId', 'uriFile'
    ]

    def __init__(self, **kwargs):
        self.fileType = kwargs.get(
            'fileType', None)
        self.md5Sum = kwargs.get(
            'md5Sum', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.uriFile = kwargs.get(
            'uriFile', None)


class FileEntry(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "FileEntry",
"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "", "type": ["null",
"string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "attributes",
        "call",
        "fileId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'attributes', 'call', 'fileId'
    ]

    def __init__(self, **kwargs):
        self.attributes = kwargs.get(
            'attributes', None)
        self.call = kwargs.get(
            'call', None)
        self.fileId = kwargs.get(
            'fileId', None)


class FileType(object):
    """
    No documentation
    """
    BAM = "BAM"
    gVCF = "gVCF"
    VCF_small = "VCF_small"
    VCF_somatic_small = "VCF_somatic_small"
    VCF_CNV = "VCF_CNV"
    VCF_somatic_CNV = "VCF_somatic_CNV"
    VCF_SV = "VCF_SV"
    VCF_somatic_SV = "VCF_somatic_SV"
    VCF_SV_CNV = "VCF_SV_CNV"
    SVG = "SVG"
    ANN = "ANN"
    BigWig = "BigWig"
    MD5Sum = "MD5Sum"
    ROH = "ROH"
    OTHER = "OTHER"
    PARTITION = "PARTITION"
    VARIANT_FREQUENCIES = "VARIANT_FREQUENCIES"
    COVERAGE = "COVERAGE"

    def __hash__(self):
        return str(self).__hash__()


class GeneDrugInteraction(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"GeneDrugInteraction", "fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "drugName",
        "geneName",
        "source",
        "studyType",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'drugName', 'geneName', 'source', 'studyType', 'type'
    ]

    def __init__(self, **kwargs):
        self.drugName = kwargs.get(
            'drugName', None)
        self.geneName = kwargs.get(
            'geneName', None)
        self.source = kwargs.get(
            'source', None)
        self.studyType = kwargs.get(
            'studyType', None)
        self.type = kwargs.get(
            'type', None)


class GenePanel(ProtocolElement):
    """
    A panel of genes
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "GenePanel", "fields":
[{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "panelName",
        "panelVersion",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'panelName', 'panelVersion'
    ]

    def __init__(self, **kwargs):
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)


class GeneTraitAssociation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"GeneTraitAssociation", "fields": [{"type": "string", "name": "id"}, {"type": "string", "name":
"name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null", "float"], "name": "score"},
{"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "associationTypes"}, {"type": ["null", {"items": "string", "type": "array"}],
"name": "sources"}, {"type": "string", "name": "source"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "associationTypes",
        "hpo",
        "id",
        "name",
        "numberOfPubmeds",
        "score",
        "source",
        "sources",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'associationTypes', 'hpo', 'id', 'name', 'numberOfPubmeds',
        'score', 'source', 'sources'
    ]

    def __init__(self, **kwargs):
        self.associationTypes = kwargs.get(
            'associationTypes', None)
        self.hpo = kwargs.get(
            'hpo', None)
        self.id = kwargs.get(
            'id', None)
        self.name = kwargs.get(
            'name', None)
        self.numberOfPubmeds = kwargs.get(
            'numberOfPubmeds', None)
        self.score = kwargs.get(
            'score', None)
        self.source = kwargs.get(
            'source', None)
        self.sources = kwargs.get(
            'sources', None)


class GenomicEntity(ProtocolElement):
    """
    A genomic feature
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "GenomicEntity", "fields":
[{"doc": "", "type": {"symbols": ["regulatory_region", "gene", "transcript", "intergenic"], "doc":
"", "type": "enum", "name": "GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string",
"name": "ensemblId"}, {"doc": "", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "otherIds"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ensemblId",
        "geneSymbol",
        "otherIds",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ensemblId', 'geneSymbol', 'otherIds', 'type'
    ]

    def __init__(self, **kwargs):
        self.ensemblId = kwargs.get(
            'ensemblId', None)
        self.geneSymbol = kwargs.get(
            'geneSymbol', None)
        self.otherIds = kwargs.get(
            'otherIds', None)
        self.type = kwargs.get(
            'type', None)


class GenomicEntityType(object):
    """
    Types of genomic features:  * `regulatory_region`: a regulatory
    region * `gene`: a gene * `transcript`: a transcript *
    `intergenic`: an intergenic region
    """
    regulatory_region = "regulatory_region"
    gene = "gene"
    transcript = "transcript"
    intergenic = "intergenic"

    def __hash__(self):
        return str(self).__hash__()


class GenomicFeature(ProtocolElement):
    """
    The genomic feature
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ensemblId",
        "featureType",
        "xrefs",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ensemblId', 'featureType', 'xrefs'
    ]

    def __init__(self, **kwargs):
        self.ensemblId = kwargs.get(
            'ensemblId', None)
        self.featureType = kwargs.get(
            'featureType', None)
        self.xrefs = kwargs.get(
            'xrefs', None)


class Genotype(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Genotype",
"fields": [{"type": "string", "name": "reference"}, {"type": "string", "name": "alternate"},
{"default": [], "type": {"items": "int", "type": "array"}, "name": "allelesIdx"}, {"type":
"boolean", "name": "phased"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "phased",
        "reference",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'allelesIdx', 'alternate', 'phased', 'reference'
    ]

    def __init__(self, **kwargs):
        self.allelesIdx = kwargs.get(
            'allelesIdx', [])
        self.alternate = kwargs.get(
            'alternate', None)
        self.phased = kwargs.get(
            'phased', None)
        self.reference = kwargs.get(
            'reference', None)


class GermlineSample(ProtocolElement):
    """
    A germline sample
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "GermlineSample",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type": ["null",
{"symbols": ["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS",
"BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type":
"enum", "name": "SampleSource"}], "name": "source"}, {"doc": "", "type": ["null", {"symbols":
["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"}, {"doc": "", "type":
["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS", "ASPIRATE"], "type":
"enum", "name": "PreparationMethod"}], "name": "preparationMethod"}, {"doc": "", "type": ["null",
{"symbols": ["CRUK", "OXFORD", "CLL", "IIP", "MAIN", "EXPT"], "type": "enum", "name":
"ProgrammePhase"}], "name": "programmePhase"}, {"doc": "", "type": ["null", "string"], "name":
"clinicalSampleDateTime"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "clinicalSampleDateTime",
        "labSampleId",
        "preparationMethod",
        "product",
        "programmePhase",
        "sampleId",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'clinicalSampleDateTime', 'labSampleId',
        'preparationMethod', 'product', 'programmePhase', 'sampleId',
        'source'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.clinicalSampleDateTime = kwargs.get(
            'clinicalSampleDateTime', None)
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.programmePhase = kwargs.get(
            'programmePhase', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)


class Gwas(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Gwas", "fields":
[{"type": ["null", "string"], "name": "snpIdCurrent"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "traits"}, {"type": ["null", "double"], "name": "riskAlleleFrequency"}, {"type":
["null", "string"], "name": "reportedGenes"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "reportedGenes",
        "riskAlleleFrequency",
        "snpIdCurrent",
        "traits",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'reportedGenes', 'riskAlleleFrequency', 'snpIdCurrent',
        'traits'
    ]

    def __init__(self, **kwargs):
        self.reportedGenes = kwargs.get(
            'reportedGenes', None)
        self.riskAlleleFrequency = kwargs.get(
            'riskAlleleFrequency', None)
        self.snpIdCurrent = kwargs.get(
            'snpIdCurrent', None)
        self.traits = kwargs.get(
            'traits', None)


class HeritableTrait(ProtocolElement):
    """
    The entity representing a phenotype and its inheritance pattern.
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "HeritableTrait",
"fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "", "type": ["null",
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name": "ModeOfInheritance"}], "name":
"inheritanceMode"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "inheritanceMode",
        "trait",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'inheritanceMode', 'trait'
    ]

    def __init__(self, **kwargs):
        self.inheritanceMode = kwargs.get(
            'inheritanceMode', None)
        self.trait = kwargs.get(
            'trait', None)


class HpoTerm(ProtocolElement):
    """
    This defines an HPO term and its modifiers (possibly multiple)
    If HPO term presence is unknown we don't have a entry on the list
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "HpoTerm", "fields":
[{"doc": "", "type": "string", "name": "term"}, {"doc": "", "type": ["null", {"symbols": ["yes",
"no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "termPresence"},
{"doc": "", "type": ["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null",
{"fields": [{"type": ["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type":
"enum", "name": "Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "hpoBuildNumber",
        "modifiers",
        "term",
        "termPresence",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiers': HpoTermModifiers,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiers': HpoTermModifiers,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'hpoBuildNumber', 'modifiers', 'term',
        'termPresence'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.hpoBuildNumber = kwargs.get(
            'hpoBuildNumber', None)
        self.modifiers = kwargs.get(
            'modifiers', None)
        self.term = kwargs.get(
            'term', None)
        self.termPresence = kwargs.get(
            'termPresence', None)


class HpoTermModifiers(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "HpoTermModifiers",
"fields": [{"type": ["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type":
"enum", "name": "Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "laterality",
        "progression",
        "severity",
        "spatialPattern",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'laterality', 'progression', 'severity', 'spatialPattern'
    ]

    def __init__(self, **kwargs):
        self.laterality = kwargs.get(
            'laterality', None)
        self.progression = kwargs.get(
            'progression', None)
        self.severity = kwargs.get(
            'severity', None)
        self.spatialPattern = kwargs.get(
            'spatialPattern', None)


class InbreedingCoefficient(ProtocolElement):
    """
    Inbreeding coefficient
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "coefficient",
        "estimationMethod",
        "program",
        "sampleId",
        "standardError",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'coefficient', 'estimationMethod', 'program', 'sampleId',
        'standardError', 'version'
    ]

    def __init__(self, **kwargs):
        self.coefficient = kwargs.get(
            'coefficient', None)
        self.estimationMethod = kwargs.get(
            'estimationMethod', None)
        self.program = kwargs.get(
            'program', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.standardError = kwargs.get(
            'standardError', None)
        self.version = kwargs.get(
            'version', None)


class Individual(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.metadata", "type": "record", "name": "Individual",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"default": null, "type": ["null",
"string"], "name": "family"}, {"default": null, "type": ["null", "string"], "name": "father"},
{"default": null, "type": ["null", "string"], "name": "mother"}, {"default": null, "type": ["null",
"string"], "name": "sex"}, {"default": null, "type": ["null", "string"], "name": "phenotype"},
{"default": [], "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "id"},
{"default": {}, "doc": "", "type": {"values": "string", "type": "map"}, "name": "annotations"}],
"type": "record", "name": "Sample"}, "type": "array"}, "name": "samples"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'samples': Sample,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'samples': Sample,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'family', 'father', 'id', 'mother', 'phenotype', 'samples',
        'sex'
    ]

    def __init__(self, **kwargs):
        self.family = kwargs.get(
            'family', None)
        self.father = kwargs.get(
            'father', None)
        self.id = kwargs.get(
            'id', None)
        self.mother = kwargs.get(
            'mother', None)
        self.phenotype = kwargs.get(
            'phenotype', None)
        self.samples = kwargs.get(
            'samples', [])
        self.sex = kwargs.get(
            'sex', None)


class InterpretationData(ProtocolElement):
    """
    Represents the set of all interpretation data (excluding file
    contents) to be stored in MDT for one TieringResult. Semantic
    restrictions (not automatically verifiable):  * All
    InterpretedGenomesRD in interpretationResults refer to the
    TieringResult tieringResult. * All InterpretedGenomesRD in
    interpretationResults have passed the QC stage and have been
    approved by the originating GMCs
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationData",
"fields": [{"type": {"doc": "", "type": "record", "name": "InterpretationRequestRD", "fields":
[{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "genomeAssembly"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name":
"workspace"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "File",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"},
{"doc": "", "type": "string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF",
"VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null",
"string"], "name": "md5Sum"}]}, "type": "array"}], "name": "bams"}, {"doc": "", "type": ["null",
{"items": "File", "type": "array"}], "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File",
"type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name":
"pedigreeDiagram"}, {"doc": "", "type": ["null", "File"], "name": "annotationFile"}, {"doc": "",
"type": ["null", {"values": "File", "type": "map"}], "name": "otherFiles"}, {"doc": "", "type":
["null", {"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree",
"fields": [{"doc": "", "type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type":
"string", "name": "GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name":
"versionControl"}, {"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"PedigreeMember", "fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "",
"type": ["null", "boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name":
"participantId"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "ParticipantQCState"}],
"name": "participantQCState"}, {"doc": "", "type": ["null", "string"], "name": "gelSuperFamilyId"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"symbols": ["UNKNOWN", "XX", "XY", "XO",
"XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"], "doc": "", "type": "enum", "name":
"PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc": "", "type": ["null", "int"],
"name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name": "fatherId"}, {"doc": "",
"type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null", "int"], "name":
"superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols": ["yes", "no",
"unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "monozygotic"}, {"doc":
"", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"], "doc": "", "type":
"enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type": ["null",
{"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc": "",
"type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}], "name": "pedigree"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float",
"type": "map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "InterpretationFlag", "fields": [{"doc":
"", "type": {"symbols": ["mixed_chemistries", "mixedLab_preparation", "low_tumour_purity",
"uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype", "high_cnv_count",
"high_estimate_human_contamination_fraction", "mixed_recruiting_gmc", "suspected_mosaicism",
"low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}]}, "type": "array"}], "name": "interpretationFlags"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}]}, "name":
"interpretationMetaData"}, {"type": ["null", {"doc": "", "type": "record", "name":
"InterpretedGenomeRD", "fields": [{"doc": "", "type": "ReportVersionControl", "name":
"versionControl"}, {"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "",
"type": "int", "name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name":
"interpretationService"}, {"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "",
"type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type":
"string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "",
"type": "Assembly", "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type":
["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", "org.gel.models.participant.avro.Penetrance"], "name": "penetrance"},
{"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null", {"values":
"float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type": ["null",
{"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name": "variants"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "softwareVersions"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "comments"}]}], "name":
"tieringResult"}, {"type": ["null", {"items": "InterpretedGenomeRD", "type": "array"}], "name":
"otherInterpretationResults"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "interpretationMetaData",
        "otherInterpretationResults",
        "tieringResult",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretationMetaData': InterpretationRequestRD,
            'otherInterpretationResults': InterpretedGenomeRD,
            'tieringResult': InterpretedGenomeRD,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretationMetaData': InterpretationRequestRD,
            'otherInterpretationResults': InterpretedGenomeRD,
            'tieringResult': InterpretedGenomeRD,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'interpretationMetaData', 'otherInterpretationResults',
        'tieringResult'
    ]

    def __init__(self, **kwargs):
        self.interpretationMetaData = kwargs.get(
            'interpretationMetaData', InterpretationRequestRD())
        self.otherInterpretationResults = kwargs.get(
            'otherInterpretationResults', None)
        self.tieringResult = kwargs.get(
            'tieringResult', None)


class InterpretationFlag(ProtocolElement):
    """
    A given interpretation flag together with an optional description
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationFlag",
"fields": [{"doc": "", "type": {"symbols": ["mixed_chemistries", "mixedLab_preparation",
"low_tumour_purity", "uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype",
"high_cnv_count", "high_estimate_human_contamination_fraction", "mixed_recruiting_gmc",
"suspected_mosaicism", "low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalDescription",
        "interpretationFlag",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalDescription', 'interpretationFlag'
    ]

    def __init__(self, **kwargs):
        self.additionalDescription = kwargs.get(
            'additionalDescription', None)
        self.interpretationFlag = kwargs.get(
            'interpretationFlag', None)


class InterpretationFlags(object):
    """
    Some flags relevant to the interpretation of a case
    """
    mixed_chemistries = "mixed_chemistries"
    mixedLab_preparation = "mixedLab_preparation"
    low_tumour_purity = "low_tumour_purity"
    uniparental_isodisomy = "uniparental_isodisomy"
    uniparental_heterodisomy = "uniparental_heterodisomy"
    unusual_karyotype = "unusual_karyotype"
    high_cnv_count = "high_cnv_count"
    high_estimate_human_contamination_fraction = "high_estimate_human_contamination_fraction"
    mixed_recruiting_gmc = "mixed_recruiting_gmc"
    suspected_mosaicism = "suspected_mosaicism"
    low_quality_sample = "low_quality_sample"
    ffpe_tumour_sample = "ffpe_tumour_sample"
    ff_nano_tumour_sample = "ff_nano_tumour_sample"
    missing_values_for_proband_in_reported_variant = "missing_values_for_proband_in_reported_variant"
    reissued = "reissued"
    supplementary_report_errors = "supplementary_report_errors"
    internal_use_only = "internal_use_only"
    high_priority = "high_priority"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class InterpretationRequestRD(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationRequestRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "genomeAssembly"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name":
"workspace"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "File",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"},
{"doc": "", "type": "string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF",
"VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null",
"string"], "name": "md5Sum"}]}, "type": "array"}], "name": "bams"}, {"doc": "", "type": ["null",
{"items": "File", "type": "array"}], "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File",
"type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name":
"pedigreeDiagram"}, {"doc": "", "type": ["null", "File"], "name": "annotationFile"}, {"doc": "",
"type": ["null", {"values": "File", "type": "map"}], "name": "otherFiles"}, {"doc": "", "type":
["null", {"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree",
"fields": [{"doc": "", "type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type":
"string", "name": "GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name":
"versionControl"}, {"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"PedigreeMember", "fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "",
"type": ["null", "boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name":
"participantId"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "ParticipantQCState"}],
"name": "participantQCState"}, {"doc": "", "type": ["null", "string"], "name": "gelSuperFamilyId"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"symbols": ["UNKNOWN", "XX", "XY", "XO",
"XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"], "doc": "", "type": "enum", "name":
"PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc": "", "type": ["null", "int"],
"name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name": "fatherId"}, {"doc": "",
"type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null", "int"], "name":
"superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols": ["yes", "no",
"unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "monozygotic"}, {"doc":
"", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"], "doc": "", "type":
"enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type": ["null",
{"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc": "",
"type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}], "name": "pedigree"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float",
"type": "map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "InterpretationFlag", "fields": [{"doc":
"", "type": {"symbols": ["mixed_chemistries", "mixedLab_preparation", "low_tumour_purity",
"uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype", "high_cnv_count",
"high_estimate_human_contamination_fraction", "mixed_recruiting_gmc", "suspected_mosaicism",
"low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}]}, "type": "array"}], "name": "interpretationFlags"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "annotationFile",
        "bams",
        "bigWigs",
        "genePanelsCoverage",
        "genomeAssembly",
        "internalStudyId",
        "interpretationFlags",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "otherFamilyHistory",
        "otherFiles",
        "pedigree",
        "pedigreeDiagram",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'annotationFile', 'bams', 'bigWigs',
        'genePanelsCoverage', 'genomeAssembly', 'internalStudyId',
        'interpretationFlags', 'interpretationRequestId',
        'interpretationRequestVersion', 'otherFamilyHistory',
        'otherFiles', 'pedigree', 'pedigreeDiagram', 'vcfs',
        'versionControl', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomeAssembly = kwargs.get(
            'genomeAssembly', None)
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.interpretationFlags = kwargs.get(
            'interpretationFlags', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.pedigree = kwargs.get(
            'pedigree', None)
        self.pedigreeDiagram = kwargs.get(
            'pedigreeDiagram', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class InterpretedGenomeRD(ProtocolElement):
    """
    A interpreted genome for the rare disease program. This holds the
    list of candidate variants reported by an     interpretation
    service together with all the relevant information that identify
    the case and how these conclusions were reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretedGenomeRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols":
["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"},
"name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"},
"name": "variants"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"comments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "comments",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "interpretationService",
        "referenceDatabasesVersions",
        "reportUrl",
        "softwareVersions",
        "variants",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariant,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariant,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'comments', 'interpretationRequestId',
        'interpretationRequestVersion', 'interpretationService',
        'referenceDatabasesVersions', 'reportUrl', 'softwareVersions',
        'variants', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.comments = kwargs.get(
            'comments', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.interpretationService = kwargs.get(
            'interpretationService', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportUrl = kwargs.get(
            'reportUrl', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.variants = kwargs.get(
            'variants', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())


class KgPopCategory(object):
    """
    1K Genomes project populations
    """
    ACB = "ACB"
    ASW = "ASW"
    BEB = "BEB"
    CDX = "CDX"
    CEU = "CEU"
    CHB = "CHB"
    CHS = "CHS"
    CLM = "CLM"
    ESN = "ESN"
    FIN = "FIN"
    GBR = "GBR"
    GIH = "GIH"
    GWD = "GWD"
    IBS = "IBS"
    ITU = "ITU"
    JPT = "JPT"
    KHV = "KHV"
    LWK = "LWK"
    MSL = "MSL"
    MXL = "MXL"
    PEL = "PEL"
    PJL = "PJL"
    PUR = "PUR"
    STU = "STU"
    TSI = "TSI"
    YRI = "YRI"

    def __hash__(self):
        return str(self).__hash__()


class KgSuperPopCategory(object):
    """
    1K Genomes project super populations
    """
    AFR = "AFR"
    AMR = "AMR"
    EAS = "EAS"
    EUR = "EUR"
    SAS = "SAS"

    def __hash__(self):
        return str(self).__hash__()


class Laterality(object):
    """
    No documentation
    """
    RIGHT = "RIGHT"
    UNILATERAL = "UNILATERAL"
    BILATERAL = "BILATERAL"
    LEFT = "LEFT"

    def __hash__(self):
        return str(self).__hash__()


class LifeStatus(object):
    """
    Life Status
    """
    ALIVE = "ALIVE"
    ABORTED = "ABORTED"
    DECEASED = "DECEASED"
    UNBORN = "UNBORN"
    STILLBORN = "STILLBORN"
    MISCARRIAGE = "MISCARRIAGE"

    def __hash__(self):
        return str(self).__hash__()


class MatchedSamples(ProtocolElement):
    """
    This defines a pair of germline and tumor, this pair should/must
    be analyzed together
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "MatchedSamples",
"fields": [{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type":
["null", "string"], "name": "tumourSampleId"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "germlineSampleId",
        "tumourSampleId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'germlineSampleId', 'tumourSampleId'
    ]

    def __init__(self, **kwargs):
        self.germlineSampleId = kwargs.get(
            'germlineSampleId', None)
        self.tumourSampleId = kwargs.get(
            'tumourSampleId', None)


class Method(object):
    """
    No documentation
    """
    RESECTION = "RESECTION"
    BIOPSY = "BIOPSY"
    BLOOD = "BLOOD"

    def __hash__(self):
        return str(self).__hash__()


class ModeOfInheritance(object):
    """
    An enumeration for the different mode of inheritances:  *
    `monoallelic_not_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, not imprinted *
    `monoallelic_maternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, maternally imprinted (paternal allele expressed)
    * `monoallelic_paternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, paternally imprinted (maternal allele expressed)
    * `monoallelic`: MONOALLELIC, autosomal or pseudoautosomal,
    imprinted status unknown * `biallelic`: BIALLELIC, autosomal or
    pseudoautosomal * `monoallelic_and_biallelic`: BOTH monoallelic
    and biallelic, autosomal or pseudoautosomal *
    `monoallelic_and_more_severe_biallelic`: BOTH monoallelic and
    biallelic, autosomal or pseudoautosomal (but BIALLELIC mutations
    cause a more SEVERE disease form), autosomal or pseudoautosomal *
    `xlinked_biallelic`: X-LINKED: hemizygous mutation in males,
    biallelic mutations in females * `xlinked_monoallelic`: X linked:
    hemizygous mutation in males, monoallelic mutations in females may
    cause disease (may be less severe, later onset than males) *
    `mitochondrial`: MITOCHONDRIAL * `unknown`: Unknown * `NA`: Not
    applicable
    """
    monoallelic = "monoallelic"
    monoallelic_not_imprinted = "monoallelic_not_imprinted"
    monoallelic_maternally_imprinted = "monoallelic_maternally_imprinted"
    monoallelic_paternally_imprinted = "monoallelic_paternally_imprinted"
    biallelic = "biallelic"
    monoallelic_and_biallelic = "monoallelic_and_biallelic"
    monoallelic_and_more_severe_biallelic = "monoallelic_and_more_severe_biallelic"
    xlinked_biallelic = "xlinked_biallelic"
    xlinked_monoallelic = "xlinked_monoallelic"
    mitochondrial = "mitochondrial"
    unknown = "unknown"
    NA = "NA"

    def __hash__(self):
        return str(self).__hash__()


class ModifiedVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ModifiedVariant", "fields":
[{"type": {"doc": "", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type":
{"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string",
"name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string",
"name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type":
{"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name":
"assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name":
"dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "name": "previousVariant"}, {"type":
"ReportedVariant", "name": "modifiedVariant"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedVariant",
        "previousVariant",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiedVariant': ReportedVariant,
            'previousVariant': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiedVariant': ReportedVariant,
            'previousVariant': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedVariant', 'previousVariant'
    ]

    def __init__(self, **kwargs):
        self.modifiedVariant = kwargs.get(
            'modifiedVariant', ReportedVariant())
        self.previousVariant = kwargs.get(
            'previousVariant', ReportedVariant())


class ObservedVariant(ProtocolElement):
    """
    A variant observed in a specific sample. The information about the
    observation is contained within a CalledGenotype, it is linked to
    one abstract Variant.  Every ObservedVariant is uniquely
    identified by:  * sample id * variant identifier (being a variant
    identifier formed by chromosome + position + reference +
    alternate)  Duplication of the prior fields is not to be
    supported.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ObservedVariant", "fields":
[{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "namespace": "org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc":
""}, "name": "assembly"}, {"doc": "", "type": {"doc": "", "type": "record", "name": "Variant",
"fields": [{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantRepresentation", "fields": [{"doc": "", "type": "org.gel.models.report.avro.Assembly",
"name": "assembly"}, {"doc": "", "type": ["null", "string"], "name": "annotatorVersion"}, {"doc":
"", "type": ["null", "string"], "name": "annotationsVersion"}, {"doc": "", "type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantAvro", "fields":
[{"doc": "", "type": ["null", "string"], "name": "id"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "names"}, {"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "strand"}, {"default": null, "doc":
"", "type": ["null", {"fields": [{"type": ["null", "int"], "name": "ciStartLeft"}, {"type": ["null",
"int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name": "ciEndLeft"}, {"type": ["null",
"int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"], "name": "copyNumber"}, {"doc":
"", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type": ["null", "string"], "name":
"rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols": ["COPY_NUMBER_GAIN", "COPY_NUMBER_LOSS",
"TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name": "StructuralVariantType"}], "name":
"type"}], "type": "record", "name": "StructuralVariation"}], "name": "sv"}, {"doc": "", "type":
"int", "name": "length"}, {"doc": "", "type": {"symbols": ["SNV", "SNP", "MNV", "MNP", "INDEL",
"SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV", "DUPLICATION", "BREAKEND",
"NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name":
"type"}, {"default": null, "doc": "", "type": ["null", {"values": {"items": "string", "type":
"array"}, "type": "map"}], "name": "hgvs"}, {"doc": "", "type": {"items": {"fields": [{"doc": "",
"type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "", "type": ["null",
"string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name": "files"},
{"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "", "type":
["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"type": "VariantType", "name": "type"}],
"type": "record", "name": "AlternateCoordinate"}, "type": "array"}], "name": "secondaryAlternates"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name": "format"}, {"doc": "", "type":
{"items": {"items": "string", "type": "array"}, "type": "array"}, "name": "samplesData"}, {"doc":
"", "type": {"values": {"fields": [{"type": ["null", "string"], "name": "refAllele"}, {"type":
["null", "string"], "name": "altAllele"}, {"type": ["null", "int"], "name": "refAlleleCount"},
{"type": ["null", "int"], "name": "altAlleleCount"}, {"type": {"values": "int", "type": "map",
"java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesCount"}, {"type":
{"values": "float", "type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"},
"name": "genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"}, {"type": ["null",
"int"], "name": "missingGenotypes"}, {"type": ["null", "float"], "name": "refAlleleFreq"}, {"type":
["null", "float"], "name": "altAlleleFreq"}, {"type": ["null", "float"], "name": "maf"}, {"type":
["null", "float"], "name": "mgf"}, {"type": ["null", "string"], "name": "mafAllele"}, {"type":
["null", "string"], "name": "mgfGenotype"}, {"type": ["null", "boolean"], "name": "passedFilters"},
{"type": ["null", "int"], "name": "mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name": "controlsPercentDominant"}, {"type":
["null", "float"], "name": "casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name": "quality"}, {"type": ["null",
"int"], "name": "numSamples"}, {"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields": [{"type": ["null", "float"], "name":
"chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name": "n_Aa_10"}, {"type":
["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"}, {"type":
["null", "float"], "name": "p"}, {"type": ["null", "float"], "name": "q"}], "type": "record",
"name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record", "name": "VariantStats"},
"type": "map"}, "name": "stats"}], "type": "record", "name": "StudyEntry"}, "type": "array"},
"name": "studies"}, {"default": null, "doc": "", "type": ["null", {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "string"], "name": "reference"}, {"type": ["null",
"string"], "name": "alternate"}, {"type": ["null", "string"], "name": "ancestralAllele"}, {"type":
["null", "string"], "name": "id"}, {"type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "id"}, {"type": ["null", "string"], "name": "source"}], "type": "record", "name":
"Xref"}, "type": "array"}], "name": "xrefs"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "hgvs"}, {"type": ["null", "string"], "name": "displayConsequenceType"},
{"default": [], "type": {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"},
{"type": ["null", "string"], "name": "ensemblGeneId"}, {"type": ["null", "string"], "name":
"ensemblTranscriptId"}, {"type": ["null", "string"], "name": "strand"}, {"type": ["null", "string"],
"name": "biotype"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name":
"number"}, {"type": ["null", "float"], "name": "percentage"}], "type": "record", "name":
"ExonOverlap"}, "type": "array"}], "name": "exonOverlap"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "transcriptAnnotationFlags"}, {"type": ["null", "int"], "name":
"cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"}, {"type": ["null", "string"],
"name": "codon"}, {"type": ["null", {"fields": [{"default": null, "type": ["null", "string"],
"name": "uniprotAccession"}, {"default": null, "type": ["null", "string"], "name": "uniprotName"},
{"type": "int", "name": "position"}, {"type": ["null", "string"], "name": "reference"}, {"type":
["null", "string"], "name": "alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"},
{"type": ["null", "string"], "name": "functionalDescription"}, {"type": ["null", {"items":
{"fields": [{"type": "double", "name": "score"}, {"type": "string", "name": "source"}, {"type":
["null", "string"], "name": "description"}], "type": "record", "name": "Score"}, "type": "array"}],
"name": "substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"keywords"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"},
{"type": "int", "name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}], "type": "record", "name":
"ProteinFeature"}, "type": "array"}], "name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"}, {"type": {"items": {"fields":
[{"type": "string", "name": "accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type":
"record", "name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type":
["null", {"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record",
"name": "PopulationFrequency"}, "type": "array"}], "name": "populationFrequencies"}, {"type":
["null", "string"], "name": "minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"},
{"type": ["null", {"items": "Score", "type": "array"}], "name": "conservation"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"],
"name": "transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type":
["null", "string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP",
"DOWN"], "type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null",
"float"], "name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}], "type": "record", "name": "VariantAnnotation"}], "name":
"annotation"}]}, "name": "variant"}]}, "type": "array"}, "name": "variants"}]}, "name": "variant"},
{"doc": "", "type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}], "doc": ""}], "name": "variantCall"}, {"default": false, "doc": "", "type":
"boolean", "name": "validated"}, {"default": [], "doc": "", "type": {"items":
"org.opencb.biodata.models.variant.avro.Property", "type": "array"}, "name":
"additionalProperties"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "date",
        "variant",
        "variantCall",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'variant': Variant,
            'variantCall': VariantCall,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'variant': Variant,
            'variantCall': VariantCall,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalProperties', 'assembly', 'date', 'validated',
        'variant', 'variantCall'
    ]

    def __init__(self, **kwargs):
        self.additionalProperties = kwargs.get(
            'additionalProperties', [])
        self.assembly = kwargs.get(
            'assembly', None)
        self.date = kwargs.get(
            'date', None)
        self.validated = kwargs.get(
            'validated', False)
        self.variant = kwargs.get(
            'variant', Variant())
        self.variantCall = kwargs.get(
            'variantCall', None)


class OtherFamilyHistory(ProtocolElement):
    """
    Family history for secondary findings.     Arrays of strings
    describing discrete family history phenotypes.     Usually:
    `EndocrineTumours`, `colorectal`, `BreastOvarian` and `HDOrStroke`
    but can be others
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "OtherFamilyHistory",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"maternalFamilyHistory"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "paternalFamilyHistory"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "maternalFamilyHistory",
        "paternalFamilyHistory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'maternalFamilyHistory', 'paternalFamilyHistory'
    ]

    def __init__(self, **kwargs):
        self.maternalFamilyHistory = kwargs.get(
            'maternalFamilyHistory', None)
        self.paternalFamilyHistory = kwargs.get(
            'paternalFamilyHistory', None)


class ParticipantInjectCancer(ProtocolElement):
    """
    Record for tiered variant injection as part of the data intake for
    CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ParticipantInjectCancer",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "CancerParticipant",
"fields": [{"doc": "", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "morphology"}, {"doc": "", "type": "boolean", "name":
"readyForAnalysis"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"ConsentStatus", "fields": [{"default": false, "doc": "", "type": "boolean", "name":
"programmeConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"primaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", "string"],
"name": "center"}, {"doc": "", "type": "string", "name": "individualId"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisDisease"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisSubDisease"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "assignedICD10"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"TumourSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL",
"IIP", "MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"},
{"doc": "", "type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST",
"CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC",
"HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL",
"OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS",
"UPPER_GASTROINTESTINAL", "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}]}, "type": "array"}, "name":
"tumourSamples"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GermlineSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
["null", "SampleSource"], "name": "source"}, {"doc": "", "type": ["null", "Product"], "name":
"product"}, {"doc": "", "type": ["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc":
"", "type": ["null", "ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null",
"string"], "name": "clinicalSampleDateTime"}]}, "type": "array"}, "name": "germlineSamples"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "MatchedSamples", "fields":
[{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type": ["null",
"string"], "name": "tumourSampleId"}]}, "type": "array"}, "name": "matchedSamples"}, {"doc": "",
"type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"}],
"doc": ""}, "name": "participant"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "participant",
        "reportModelVersion",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'participant': CancerParticipant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'participant': CancerParticipant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'participant', 'reportModelVersion', 'version'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.participant = kwargs.get(
            'participant', CancerParticipant())
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)


class ParticipantQCState(object):
    """
    QCState Status
    """
    noState = "noState"
    passedMedicalReviewReadyForInterpretation = "passedMedicalReviewReadyForInterpretation"
    passedMedicalReviewNotReadyForInterpretation = "passedMedicalReviewNotReadyForInterpretation"
    queryToGel = "queryToGel"
    queryToGMC = "queryToGMC"
    failed = "failed"

    def __hash__(self):
        return str(self).__hash__()


class Pedigree(ProtocolElement):
    """
    This is the concept of a family with associated phenotypes as
    present in the record RDParticipant
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree", "fields":
[{"doc": "", "type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name":
"familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "analysisPanels",
        "diseasePenetrances",
        "familyId",
        "familyQCState",
        "members",
        "readyForAnalysis",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analysisPanels': AnalysisPanel,
            'diseasePenetrances': DiseasePenetrance,
            'members': PedigreeMember,
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analysisPanels': AnalysisPanel,
            'diseasePenetrances': DiseasePenetrance,
            'members': PedigreeMember,
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'analysisPanels', 'diseasePenetrances', 'familyId',
        'familyQCState', 'members', 'readyForAnalysis',
        'versionControl'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.analysisPanels = kwargs.get(
            'analysisPanels', None)
        self.diseasePenetrances = kwargs.get(
            'diseasePenetrances', None)
        self.familyId = kwargs.get(
            'familyId', None)
        self.familyQCState = kwargs.get(
            'familyQCState', None)
        self.members = kwargs.get(
            'members', None)
        self.readyForAnalysis = kwargs.get(
            'readyForAnalysis', None)
        self.versionControl = kwargs.get(
            'versionControl', None)


class PedigreeInjectRD(ProtocolElement):
    """
    Record for tiered variant injection as part of the data intake for
    CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "PedigreeInjectRD", "fields":
[{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type": {"namespace":
"org.gel.models.participant.avro", "type": "record", "name": "Pedigree", "fields": [{"doc": "",
"type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name":
"familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}, "name": "pedigree"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "pedigree",
        "reportModelVersion",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'pedigree': Pedigree,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'pedigree': Pedigree,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'pedigree', 'reportModelVersion', 'version'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.pedigree = kwargs.get(
            'pedigree', Pedigree())
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)


class PedigreeMember(ProtocolElement):
    """
    This defines a RD Participant (demographics and pedigree
    information)
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInformation",
        "adoptedStatus",
        "affectionStatus",
        "ancestries",
        "consanguineousParents",
        "consentStatus",
        "disorderList",
        "fatherId",
        "gelSuperFamilyId",
        "hpoTermList",
        "inbreedingCoefficient",
        "isProband",
        "lifeStatus",
        "monozygotic",
        "motherId",
        "participantId",
        "participantQCState",
        "pedigreeId",
        "personKaryotypicSex",
        "samples",
        "sex",
        "superFatherId",
        "superMotherId",
        "twinGroup",
        "yearOfBirth",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ancestries': Ancestries,
            'consentStatus': ConsentStatus,
            'disorderList': Disorder,
            'hpoTermList': HpoTerm,
            'inbreedingCoefficient': InbreedingCoefficient,
            'samples': Sample,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ancestries': Ancestries,
            'consentStatus': ConsentStatus,
            'disorderList': Disorder,
            'hpoTermList': HpoTerm,
            'inbreedingCoefficient': InbreedingCoefficient,
            'samples': Sample,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInformation', 'adoptedStatus', 'affectionStatus',
        'ancestries', 'consanguineousParents', 'consentStatus',
        'disorderList', 'fatherId', 'gelSuperFamilyId', 'hpoTermList',
        'inbreedingCoefficient', 'isProband', 'lifeStatus',
        'monozygotic', 'motherId', 'participantId',
        'participantQCState', 'pedigreeId', 'personKaryotypicSex',
        'samples', 'sex', 'superFatherId', 'superMotherId',
        'twinGroup', 'yearOfBirth'
    ]

    def __init__(self, **kwargs):
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.adoptedStatus = kwargs.get(
            'adoptedStatus', None)
        self.affectionStatus = kwargs.get(
            'affectionStatus', None)
        self.ancestries = kwargs.get(
            'ancestries', None)
        self.consanguineousParents = kwargs.get(
            'consanguineousParents', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.disorderList = kwargs.get(
            'disorderList', None)
        self.fatherId = kwargs.get(
            'fatherId', None)
        self.gelSuperFamilyId = kwargs.get(
            'gelSuperFamilyId', None)
        self.hpoTermList = kwargs.get(
            'hpoTermList', None)
        self.inbreedingCoefficient = kwargs.get(
            'inbreedingCoefficient', None)
        self.isProband = kwargs.get(
            'isProband', None)
        self.lifeStatus = kwargs.get(
            'lifeStatus', None)
        self.monozygotic = kwargs.get(
            'monozygotic', None)
        self.motherId = kwargs.get(
            'motherId', None)
        self.participantId = kwargs.get(
            'participantId', None)
        self.participantQCState = kwargs.get(
            'participantQCState', None)
        self.pedigreeId = kwargs.get(
            'pedigreeId', None)
        self.personKaryotypicSex = kwargs.get(
            'personKaryotypicSex', None)
        self.samples = kwargs.get(
            'samples', None)
        self.sex = kwargs.get(
            'sex', None)
        self.superFatherId = kwargs.get(
            'superFatherId', None)
        self.superMotherId = kwargs.get(
            'superMotherId', None)
        self.twinGroup = kwargs.get(
            'twinGroup', None)
        self.yearOfBirth = kwargs.get(
            'yearOfBirth', None)


class Penetrance(object):
    """
    Penetrance assumed in the analysis
    """
    complete = "complete"
    incomplete = "incomplete"

    def __hash__(self):
        return str(self).__hash__()


class PersonKaryotipicSex(object):
    """
    Karyotipic Sex
    """
    UNKNOWN = "UNKNOWN"
    XX = "XX"
    XY = "XY"
    XO = "XO"
    XXY = "XXY"
    XXX = "XXX"
    XXYY = "XXYY"
    XXXY = "XXXY"
    XXXX = "XXXX"
    XYY = "XYY"
    OTHER = "OTHER"

    def __hash__(self):
        return str(self).__hash__()


class PhenotypesSolved(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    partially = "partially"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class PopulationFrequency(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"PopulationFrequency", "fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "altAllele",
        "altAlleleFreq",
        "altHomGenotypeFreq",
        "hetGenotypeFreq",
        "population",
        "refAllele",
        "refAlleleFreq",
        "refHomGenotypeFreq",
        "study",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'altAllele', 'altAlleleFreq', 'altHomGenotypeFreq',
        'hetGenotypeFreq', 'population', 'refAllele', 'refAlleleFreq',
        'refHomGenotypeFreq', 'study'
    ]

    def __init__(self, **kwargs):
        self.altAllele = kwargs.get(
            'altAllele', None)
        self.altAlleleFreq = kwargs.get(
            'altAlleleFreq', None)
        self.altHomGenotypeFreq = kwargs.get(
            'altHomGenotypeFreq', None)
        self.hetGenotypeFreq = kwargs.get(
            'hetGenotypeFreq', None)
        self.population = kwargs.get(
            'population', None)
        self.refAllele = kwargs.get(
            'refAllele', None)
        self.refAlleleFreq = kwargs.get(
            'refAlleleFreq', None)
        self.refHomGenotypeFreq = kwargs.get(
            'refHomGenotypeFreq', None)
        self.study = kwargs.get(
            'study', None)


class PreparationMethod(object):
    """
    No documentation
    """
    EDTA = "EDTA"
    ORAGENE = "ORAGENE"
    FF = "FF"
    FFPE = "FFPE"
    CD128_SORTED_CELLS = "CD128_SORTED_CELLS"
    ASPIRATE = "ASPIRATE"

    def __hash__(self):
        return str(self).__hash__()


class Product(object):
    """
    No documentation
    """
    DNA = "DNA"
    RNA = "RNA"

    def __hash__(self):
        return str(self).__hash__()


class Program(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.metadata", "type": "record", "name": "Program", "fields":
[{"default": null, "type": ["null", "string"], "name": "name"}, {"default": null, "type": ["null",
"string"], "name": "version"}, {"default": null, "type": ["null", "string"], "name": "commandLine"},
{"default": null, "type": ["null", "string"], "name": "url"}, {"default": null, "type": ["null",
"string"], "name": "commit"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'commandLine', 'commit', 'name', 'url', 'version'
    ]

    def __init__(self, **kwargs):
        self.commandLine = kwargs.get(
            'commandLine', None)
        self.commit = kwargs.get(
            'commit', None)
        self.name = kwargs.get(
            'name', None)
        self.url = kwargs.get(
            'url', None)
        self.version = kwargs.get(
            'version', None)


class ProgrammePhase(object):
    """
    No documentation
    """
    CRUK = "CRUK"
    OXFORD = "OXFORD"
    CLL = "CLL"
    IIP = "IIP"
    MAIN = "MAIN"
    EXPT = "EXPT"

    def __hash__(self):
        return str(self).__hash__()


class Progression(object):
    """
    No documentation
    """
    PROGRESSIVE = "PROGRESSIVE"
    NONPROGRESSIVE = "NONPROGRESSIVE"

    def __hash__(self):
        return str(self).__hash__()


class Property(ProtocolElement):
    """
    A property in the form of name-value pair.     Names are
    restricted to ontology ids, they should be checked against
    existing ontologies in resources like     Ontology Lookup Service.
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Property",
"fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"doc": "", "type": ["null",
"string"], "name": "name"}, {"doc": "", "type": ["null", "string"], "name": "value"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "name",
        "value",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'name', 'value'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.name = kwargs.get(
            'name', None)
        self.value = kwargs.get(
            'value', None)


class ProteinFeature(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "ProteinFeature",
"fields": [{"type": ["null", "string"], "name": "id"}, {"type": "int", "name": "start"}, {"type":
"int", "name": "end"}, {"type": ["null", "string"], "name": "type"}, {"type": ["null", "string"],
"name": "description"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "description",
        "end",
        "id",
        "start",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'description', 'end', 'id', 'start', 'type'
    ]

    def __init__(self, **kwargs):
        self.description = kwargs.get(
            'description', None)
        self.end = kwargs.get(
            'end', None)
        self.id = kwargs.get(
            'id', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', None)


class ProteinVariantAnnotation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"ProteinVariantAnnotation", "fields": [{"default": null, "type": ["null", "string"], "name":
"uniprotAccession"}, {"default": null, "type": ["null", "string"], "name": "uniprotName"}, {"type":
"int", "name": "position"}, {"type": ["null", "string"], "name": "reference"}, {"type": ["null",
"string"], "name": "alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"}, {"type":
["null", "string"], "name": "functionalDescription"}, {"type": ["null", {"items": {"fields":
[{"type": "double", "name": "score"}, {"type": "string", "name": "source"}, {"type": ["null",
"string"], "name": "description"}], "type": "record", "name": "Score"}, "type": "array"}], "name":
"substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name": "keywords"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": "int",
"name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"], "name": "type"},
{"type": ["null", "string"], "name": "description"}], "type": "record", "name": "ProteinFeature"},
"type": "array"}], "name": "features"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "features",
        "functionalDescription",
        "keywords",
        "position",
        "reference",
        "substitutionScores",
        "uniprotVariantId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'features': ProteinFeature,
            'substitutionScores': Score,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'features': ProteinFeature,
            'substitutionScores': Score,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'features', 'functionalDescription', 'keywords',
        'position', 'reference', 'substitutionScores',
        'uniprotAccession', 'uniprotName', 'uniprotVariantId'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', None)
        self.features = kwargs.get(
            'features', None)
        self.functionalDescription = kwargs.get(
            'functionalDescription', None)
        self.keywords = kwargs.get(
            'keywords', None)
        self.position = kwargs.get(
            'position', None)
        self.reference = kwargs.get(
            'reference', None)
        self.substitutionScores = kwargs.get(
            'substitutionScores', None)
        self.uniprotAccession = kwargs.get(
            'uniprotAccession', None)
        self.uniprotName = kwargs.get(
            'uniprotName', None)
        self.uniprotVariantId = kwargs.get(
            'uniprotVariantId', None)


class RDFamilyChange(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "RDFamilyChange",
"fields": [{"doc": "", "type": "string", "name": "FamilyId"}, {"doc": "", "type": {"symbols":
["FamilyAdded", "FamilyDeleted", "ProbandChanged", "ParticipantAdded", "ParticipantRemoved",
"ConsentStatusChanged", "AffectionStatusChanged", "PanelAssignmentChanged", "SexChanged",
"SampleChanged"], "doc": "", "type": "enum", "name": "RDFamilyChangeCode"}, "name": "code"}, {"doc":
"", "type": {"doc": "", "type": "record", "name": "Pedigree", "fields": [{"doc": "", "type":
["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name":
"familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}]}, "name": "Family"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "Family",
        "FamilyId",
        "code",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'Family': Pedigree,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'Family': Pedigree,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'Family', 'FamilyId', 'code'
    ]

    def __init__(self, **kwargs):
        self.Family = kwargs.get(
            'Family', Pedigree())
        self.FamilyId = kwargs.get(
            'FamilyId', None)
        self.code = kwargs.get(
            'code', None)


class RDFamilyChangeCode(object):
    """
    This code define the change type:      * `FamilyAdded`: This is a
    new family.     * `FamilyDeleted`: This family should be removed.
    * `ProbandChanged`: The proband participant is now a different
    member of the family.     * `ParticipantAdded`: A new participant
    has been sequenced and added to the family.     *
    `ParticipantRemoved`: A participant has been removed.     *
    `ConsentStatusChanged`: One or more participant in this family has
    a different consent status.     * `AffectionStatusChanged`:
    HPOterms or Disorder changed in one or more participants in this
    family.     * `PanelAssignmentChanged`: Gene Panels has changed in
    this family.     * `SexChanged`: Sex has changed for one or more
    participants in this family.     * `SampleChanged`: The sample/s
    associated to one or more participant in this family has changed.
    """
    FamilyAdded = "FamilyAdded"
    FamilyDeleted = "FamilyDeleted"
    ProbandChanged = "ProbandChanged"
    ParticipantAdded = "ParticipantAdded"
    ParticipantRemoved = "ParticipantRemoved"
    ConsentStatusChanged = "ConsentStatusChanged"
    AffectionStatusChanged = "AffectionStatusChanged"
    PanelAssignmentChanged = "PanelAssignmentChanged"
    SexChanged = "SexChanged"
    SampleChanged = "SampleChanged"

    def __hash__(self):
        return str(self).__hash__()


class RareDiseaseExitQuestionnaire(ProtocolElement):
    """
    The rare disease program exit questionnaire
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"RareDiseaseExitQuestionnaire", "fields": [{"doc": "", "type": "string", "name": "eventDate"},
{"doc": "", "type": "string", "name": "reporter"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "FamilyLevelQuestions", "fields": [{"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "CaseSolvedFamily"}, "name": "caseSolvedFamily"},
{"doc": "", "type": {"symbols": ["yes", "no"], "type": "enum", "name": "SegregationQuestion"},
"name": "segregationQuestion"}, {"doc": "", "type": "string", "name": "additionalComments"}]},
"name": "familyLevelQuestions"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name": "variantGroup"}, {"doc":
"", "type": {"items": {"doc": "", "type": "record", "name": "VariantLevelQuestions", "fields":
[{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name": "confirmationDecision"},
{"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"},
"name": "confirmationOutcome"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ReportingQuestion"}, "name": "reportingQuestion"}, {"doc": "", "type": {"symbols":
["pathogenic_variant", "likely_pathogenic_variant", "variant_of_unknown_clinical_significance",
"likely_benign_variant", "benign_variant", "not_assessed"], "type": "enum", "name":
"ACMGClassification"}, "name": "acmgClassification"}, {"doc": "", "type": "string", "name":
"publications"}]}, "type": "array"}, "name": "variantLevelQuestions"}, {"doc": "", "type":
{"symbols": ["yes", "no", "not_yet", "na"], "type": "enum", "name": "Actionability"}, "name":
"actionability"}, {"doc": "", "type": {"items": {"symbols": ["none", "change_in_medication",
"surgical_option", "additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"phenotypesExplained"}]}, "type": "array"}, "name": "variantGroupLevelQuestions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "eventDate",
        "familyLevelQuestions",
        "reporter",
        "variantGroupLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'eventDate', 'familyLevelQuestions', 'reporter',
        'variantGroupLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.eventDate = kwargs.get(
            'eventDate', None)
        self.familyLevelQuestions = kwargs.get(
            'familyLevelQuestions', FamilyLevelQuestions())
        self.reporter = kwargs.get(
            'reporter', None)
        self.variantGroupLevelQuestions = kwargs.get(
            'variantGroupLevelQuestions', None)


class Read(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.sequence", "type": "record", "name": "Read", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": "string", "name": "sequence"},
{"doc": "", "type": "string", "name": "quality"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "quality",
        "sequence",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'quality', 'sequence'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.quality = kwargs.get(
            'quality', None)
        self.sequence = kwargs.get(
            'sequence', None)


class Repeat(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Repeat",
"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null", "string"], "name":
"chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name": "end"},
{"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"], "name": "consensusSize"},
{"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null", "float"], "name":
"percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type": ["null", "string"],
"name": "sequence"}, {"type": ["null", "string"], "name": "source"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chromosome",
        "consensusSize",
        "copyNumber",
        "end",
        "id",
        "percentageMatch",
        "period",
        "score",
        "sequence",
        "source",
        "start",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chromosome', 'consensusSize', 'copyNumber', 'end', 'id',
        'percentageMatch', 'period', 'score', 'sequence', 'source',
        'start'
    ]

    def __init__(self, **kwargs):
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.consensusSize = kwargs.get(
            'consensusSize', None)
        self.copyNumber = kwargs.get(
            'copyNumber', None)
        self.end = kwargs.get(
            'end', None)
        self.id = kwargs.get(
            'id', None)
        self.percentageMatch = kwargs.get(
            'percentageMatch', None)
        self.period = kwargs.get(
            'period', None)
        self.score = kwargs.get(
            'score', None)
        self.sequence = kwargs.get(
            'sequence', None)
        self.source = kwargs.get(
            'source', None)
        self.start = kwargs.get(
            'start', None)


class ReportEvent(ProtocolElement):
    """
    A report event holds all the information about why a given variant
    is relevant to report. The same variant may have     several
    report events. For instance, we may have two report events from
    the tiering process when two panels are     analysed, a positive
    report from a Genomic Medicine Centre (GMC) will correspond to an
    additional report event.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEvent", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "",
"type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name": "variantConsequences"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "GenePanel", "fields": [{"doc":
"", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "eventJustification",
        "fullyExplainsPhenotype",
        "genePanel",
        "genomicEntities",
        "groupOfVariants",
        "modeOfInheritance",
        "penetrance",
        "phenotypes",
        "reportEventId",
        "score",
        "tier",
        "variantClassification",
        "variantConsequences",
        "vendorSpecificScores",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'genePanel': GenePanel,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'genePanel': GenePanel,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'eventJustification', 'fullyExplainsPhenotype', 'genePanel',
        'genomicEntities', 'groupOfVariants', 'modeOfInheritance',
        'penetrance', 'phenotypes', 'reportEventId', 'score', 'tier',
        'variantClassification', 'variantConsequences',
        'vendorSpecificScores'
    ]

    def __init__(self, **kwargs):
        self.eventJustification = kwargs.get(
            'eventJustification', None)
        self.fullyExplainsPhenotype = kwargs.get(
            'fullyExplainsPhenotype', None)
        self.genePanel = kwargs.get(
            'genePanel', None)
        self.genomicEntities = kwargs.get(
            'genomicEntities', None)
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.modeOfInheritance = kwargs.get(
            'modeOfInheritance', None)
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.phenotypes = kwargs.get(
            'phenotypes', None)
        self.reportEventId = kwargs.get(
            'reportEventId', None)
        self.score = kwargs.get(
            'score', None)
        self.tier = kwargs.get(
            'tier', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)
        self.variantConsequences = kwargs.get(
            'variantConsequences', None)
        self.vendorSpecificScores = kwargs.get(
            'vendorSpecificScores', None)


class ReportEventCancer(ProtocolElement):
    """
    A report event holds all the information about why a given variant
    is relevant to report. This is the report event     corresponding
    to the cancer program
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEventCancer", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "Action", "fields": [{"doc": "", "type": ["null", {"symbols":
["therapy", "therapeutic", "prognosis", "diagnosis"], "doc": "", "type": "enum", "name":
"ActionType"}], "name": "actionType"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "references"}, {"doc": "", "type": ["null", {"symbols": ["clinical",
"pre_clinical"], "doc": "", "type": "enum", "name": "ActionStatus"}], "name": "status"}, {"doc": "",
"type": "boolean", "name": "variantActionable"}, {"doc": "", "type": ["null", "string"], "name":
"url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"}, {"doc": "", "type":
"string", "name": "source"}]}, "type": "array"}], "name": "actions"}, {"doc": "", "type": ["null",
"int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "",
"type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"items": {"symbols": ["oncogene",
"tumor_suppressor_gene", "both"], "doc": "", "type": "enum", "name": "RoleInCancer"}, "type":
"array"}], "name": "roleInCancer"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1",
"TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actions",
        "eventJustification",
        "genomicEntities",
        "groupOfVariants",
        "reportEventId",
        "roleInCancer",
        "score",
        "tier",
        "variantClassification",
        "variantConsequences",
        "vendorSpecificScores",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'actions': Action,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'actions': Action,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actions', 'eventJustification', 'genomicEntities',
        'groupOfVariants', 'reportEventId', 'roleInCancer', 'score',
        'tier', 'variantClassification', 'variantConsequences',
        'vendorSpecificScores'
    ]

    def __init__(self, **kwargs):
        self.actions = kwargs.get(
            'actions', None)
        self.eventJustification = kwargs.get(
            'eventJustification', None)
        self.genomicEntities = kwargs.get(
            'genomicEntities', None)
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.reportEventId = kwargs.get(
            'reportEventId', None)
        self.roleInCancer = kwargs.get(
            'roleInCancer', None)
        self.score = kwargs.get(
            'score', None)
        self.tier = kwargs.get(
            'tier', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)
        self.variantConsequences = kwargs.get(
            'variantConsequences', None)
        self.vendorSpecificScores = kwargs.get(
            'vendorSpecificScores', None)


class ReportEventEntry(ProtocolElement):
    """
    A variant or variants (i.e.: composite heterozygous) reported by
    any manual or automated means. The information about the report is
    contained within a ReportEvent, it is linked to one or more
    ObservedVariant.  Every ReportedVariant is uniquely identified by:
    * report event id * report model version * id * version * family
    id * cohort id * variants identifiers (being a variant identifier
    formed by chromosome + position + reference + alternate)
    Duplication of the prior fields is not be supported.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ReportEventEntry", "fields":
[{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type": ["null", "boolean"],
"name": "latest"}, {"doc": "", "type": ["null", "string"], "name": "parentId"}, {"doc": "", "type":
["null", "int"], "name": "parentVersion"}, {"doc": "", "type": "string", "name": "groupId"}, {"doc":
"", "type": "string", "name": "cohortId"}, {"doc": "", "type": "string", "name": "date"}, {"doc":
"", "type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"symbols": ["reported", "candidate", "tiered",
"questionnaire", "other"], "doc": "", "type": "enum", "name": "ReportEventType"}, "name": "type"},
{"doc": "", "type": {"symbols": ["cancer", "rare_disease"], "namespace":
"org.gel.models.report.avro", "type": "enum", "name": "Program", "doc": ""}, "name": "program"},
{"default": false, "doc": "", "type": "boolean", "name": "validated"}, {"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name": "workspace"}, {"doc": "", "type": ["null",
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEvent", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "",
"type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name": "variantConsequences"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "GenePanel", "fields": [{"doc":
"", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}], "doc": ""}], "name": "reportEvent"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "ReportEventQuestionnaireRD", "fields": [{"doc": "",
"type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "VariantLevelQuestions", "fields": [{"doc":
"", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no",
"na"], "type": "enum", "name": "ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "",
"type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name":
"confirmationOutcome"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name":
"ReportingQuestion"}, "name": "reportingQuestion"}, {"doc": "", "type": {"symbols":
["pathogenic_variant", "likely_pathogenic_variant", "variant_of_unknown_clinical_significance",
"likely_benign_variant", "benign_variant", "not_assessed"], "type": "enum", "name":
"ACMGClassification"}, "name": "acmgClassification"}, {"doc": "", "type": "string", "name":
"publications"}], "doc": ""}, "name": "variantLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "VariantGroupLevelQuestions", "fields":
[{"doc": "", "type": "int", "name": "variantGroup"}, {"doc": "", "type": {"items":
"VariantLevelQuestions", "type": "array"}, "name": "variantLevelQuestions"}, {"doc": "", "type":
{"symbols": ["yes", "no", "not_yet", "na"], "type": "enum", "name": "Actionability"}, "name":
"actionability"}, {"doc": "", "type": {"items": {"symbols": ["none", "change_in_medication",
"surgical_option", "additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}, "name": "variantGroupLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions", "fields": [{"doc":
"", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum", "name":
"CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes", "no"],
"type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "", "type":
"string", "name": "additionalComments"}], "doc": ""}, "name": "familyLevelQuestions"}]}], "name":
"reportEventQuestionnaire"}, {"doc": "", "type": ["null", {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "",
"type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": "GenomicEntity", "type":
"array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": "VariantConsequence", "type":
"array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy",
"therapeutic", "prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name":
"actionType"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"references"}, {"doc": "", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "",
"type": "enum", "name": "ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name":
"variantActionable"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]},
"type": "array"}], "name": "actions"}, {"doc": "", "type": ["null", "int"], "name":
"groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name": "eventJustification"}, {"doc":
"", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
"VariantClassification"], "name": "variantClassification"}, {"doc": "", "type": ["null", {"items":
{"symbols": ["oncogene", "tumor_suppressor_gene", "both"], "doc": "", "type": "enum", "name":
"RoleInCancer"}, "type": "array"}], "name": "roleInCancer"}, {"doc": "", "type": ["null", "Tier"],
"name": "tier"}], "doc": ""}], "name": "reportEventCancer"}, {"doc": "", "type": ["null", {"fields":
[{"doc": "", "type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerSomaticVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["predicts_therapeutic_response",
"prognostic", "defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type":
"enum", "name": "CancerActionabilitySomatic"}, "type": "array"}, "name": "variantActionability"},
{"doc": "", "type": ["null", "string"], "name": "otherVariantActionability"}, {"doc": "", "type":
{"symbols": ["already_actioned", "actioned_result_of_this_wga", "not_yet_actioned"], "doc": "",
"type": "enum", "name": "CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type":
{"symbols": ["not_indicated_for_patient_care", "no_orthologous_test_available",
"test_performed_prior_to_wga", "technical_validation_following_wga"], "doc": "", "type": "enum",
"name": "CancerTested"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}], "name": "cancerSomaticVariantLevelQuestions"}, {"doc": "",
"type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
"CancerTested", "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}], "name": "cancerGermlineVariantLevelQuestions"}, {"doc": "",
"type": {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerCaseLevelQuestions", "fields": [{"doc": "", "type": "double", "name": "total_review_time"},
{"doc": "", "type": "double", "name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name":
"mdt2_time"}, {"doc": "", "type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "",
"type": ["null", "double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"],
"name": "analytical_validation_time"}, {"doc": "", "type": "double", "name":
"primary_reporting_time"}, {"doc": "", "type": "double", "name": "primary_authorisation_time"},
{"doc": "", "type": "double", "name": "report_distribution_time"}, {"doc": "", "type": "double",
"name": "total_time"}, {"doc": "", "type": {"symbols": ["domain_1", "domain_1_and_2",
"domain_1_2_and_suplementary"], "doc": "", "type": "enum", "name": "ReviewedParts"}, "name":
"reviewedInMdtWga"}, {"doc": "", "type": {"symbols": ["yes", "no"], "doc": "", "type": "enum",
"name": "CancerActionableVariants"}, "name": "actionableVariants"}], "doc": ""}, "name":
"cancercaseLevelQuestions"}, {"doc": "", "type": ["null", "string"], "name": "additionalComments"},
{"doc": "", "type": ["null", "string"], "name": "otherActionableVariants"}], "type": "record",
"name": "ReportEventQuestionnaireCancer"}], "name": "reportEventQuestionnaireCancer"}, {"default":
[], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ObservedVariant", "fields":
[{"doc": "", "type": "string", "name": "date"}, {"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "namespace": "org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc":
""}, "name": "assembly"}, {"doc": "", "type": {"doc": "", "type": "record", "name": "Variant",
"fields": [{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantRepresentation", "fields": [{"doc": "", "type": "org.gel.models.report.avro.Assembly",
"name": "assembly"}, {"doc": "", "type": ["null", "string"], "name": "annotatorVersion"}, {"doc":
"", "type": ["null", "string"], "name": "annotationsVersion"}, {"doc": "", "type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantAvro", "fields":
[{"doc": "", "type": ["null", "string"], "name": "id"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "names"}, {"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "strand"}, {"default": null, "doc":
"", "type": ["null", {"fields": [{"type": ["null", "int"], "name": "ciStartLeft"}, {"type": ["null",
"int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name": "ciEndLeft"}, {"type": ["null",
"int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"], "name": "copyNumber"}, {"doc":
"", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type": ["null", "string"], "name":
"rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols": ["COPY_NUMBER_GAIN", "COPY_NUMBER_LOSS",
"TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name": "StructuralVariantType"}], "name":
"type"}], "type": "record", "name": "StructuralVariation"}], "name": "sv"}, {"doc": "", "type":
"int", "name": "length"}, {"doc": "", "type": {"symbols": ["SNV", "SNP", "MNV", "MNP", "INDEL",
"SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV", "DUPLICATION", "BREAKEND",
"NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name":
"type"}, {"default": null, "doc": "", "type": ["null", {"values": {"items": "string", "type":
"array"}, "type": "map"}], "name": "hgvs"}, {"doc": "", "type": {"items": {"fields": [{"doc": "",
"type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "", "type": ["null",
"string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name": "files"},
{"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "", "type":
["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"type": "VariantType", "name": "type"}],
"type": "record", "name": "AlternateCoordinate"}, "type": "array"}], "name": "secondaryAlternates"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name": "format"}, {"doc": "", "type":
{"items": {"items": "string", "type": "array"}, "type": "array"}, "name": "samplesData"}, {"doc":
"", "type": {"values": {"fields": [{"type": ["null", "string"], "name": "refAllele"}, {"type":
["null", "string"], "name": "altAllele"}, {"type": ["null", "int"], "name": "refAlleleCount"},
{"type": ["null", "int"], "name": "altAlleleCount"}, {"type": {"values": "int", "type": "map",
"java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesCount"}, {"type":
{"values": "float", "type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"},
"name": "genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"}, {"type": ["null",
"int"], "name": "missingGenotypes"}, {"type": ["null", "float"], "name": "refAlleleFreq"}, {"type":
["null", "float"], "name": "altAlleleFreq"}, {"type": ["null", "float"], "name": "maf"}, {"type":
["null", "float"], "name": "mgf"}, {"type": ["null", "string"], "name": "mafAllele"}, {"type":
["null", "string"], "name": "mgfGenotype"}, {"type": ["null", "boolean"], "name": "passedFilters"},
{"type": ["null", "int"], "name": "mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name": "controlsPercentDominant"}, {"type":
["null", "float"], "name": "casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name": "quality"}, {"type": ["null",
"int"], "name": "numSamples"}, {"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields": [{"type": ["null", "float"], "name":
"chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name": "n_Aa_10"}, {"type":
["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"}, {"type":
["null", "float"], "name": "p"}, {"type": ["null", "float"], "name": "q"}], "type": "record",
"name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record", "name": "VariantStats"},
"type": "map"}, "name": "stats"}], "type": "record", "name": "StudyEntry"}, "type": "array"},
"name": "studies"}, {"default": null, "doc": "", "type": ["null", {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "string"], "name": "reference"}, {"type": ["null",
"string"], "name": "alternate"}, {"type": ["null", "string"], "name": "ancestralAllele"}, {"type":
["null", "string"], "name": "id"}, {"type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "id"}, {"type": ["null", "string"], "name": "source"}], "type": "record", "name":
"Xref"}, "type": "array"}], "name": "xrefs"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "hgvs"}, {"type": ["null", "string"], "name": "displayConsequenceType"},
{"default": [], "type": {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"},
{"type": ["null", "string"], "name": "ensemblGeneId"}, {"type": ["null", "string"], "name":
"ensemblTranscriptId"}, {"type": ["null", "string"], "name": "strand"}, {"type": ["null", "string"],
"name": "biotype"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name":
"number"}, {"type": ["null", "float"], "name": "percentage"}], "type": "record", "name":
"ExonOverlap"}, "type": "array"}], "name": "exonOverlap"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "transcriptAnnotationFlags"}, {"type": ["null", "int"], "name":
"cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"}, {"type": ["null", "string"],
"name": "codon"}, {"type": ["null", {"fields": [{"default": null, "type": ["null", "string"],
"name": "uniprotAccession"}, {"default": null, "type": ["null", "string"], "name": "uniprotName"},
{"type": "int", "name": "position"}, {"type": ["null", "string"], "name": "reference"}, {"type":
["null", "string"], "name": "alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"},
{"type": ["null", "string"], "name": "functionalDescription"}, {"type": ["null", {"items":
{"fields": [{"type": "double", "name": "score"}, {"type": "string", "name": "source"}, {"type":
["null", "string"], "name": "description"}], "type": "record", "name": "Score"}, "type": "array"}],
"name": "substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"keywords"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"},
{"type": "int", "name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}], "type": "record", "name":
"ProteinFeature"}, "type": "array"}], "name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"}, {"type": {"items": {"fields":
[{"type": "string", "name": "accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type":
"record", "name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type":
["null", {"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record",
"name": "PopulationFrequency"}, "type": "array"}], "name": "populationFrequencies"}, {"type":
["null", "string"], "name": "minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"},
{"type": ["null", {"items": "Score", "type": "array"}], "name": "conservation"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"],
"name": "transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type":
["null", "string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP",
"DOWN"], "type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null",
"float"], "name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}], "type": "record", "name": "VariantAnnotation"}], "name":
"annotation"}]}, "name": "variant"}]}, "type": "array"}, "name": "variants"}]}, "name": "variant"},
{"doc": "", "type": ["null", {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}], "doc": ""}], "name": "variantCall"}, {"default": false, "doc": "", "type":
"boolean", "name": "validated"}, {"default": [], "doc": "", "type": {"items":
"org.opencb.biodata.models.variant.avro.Property", "type": "array"}, "name":
"additionalProperties"}]}, "type": "array"}, "name": "observedVariants"}, {"default": [], "doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "Comment", "fields": [{"doc": "", "type":
"string", "name": "text"}, {"doc": "", "type": "string", "name": "date"}, {"doc": "", "type":
"string", "name": "userid"}]}, "type": "array"}, "name": "comments"}, {"default": [], "doc": "",
"type": {"items": "org.opencb.biodata.models.variant.avro.Property", "type": "array"}, "name":
"additionalProperties"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "author",
        "authorVersion",
        "cohortId",
        "date",
        "groupId",
        "id",
        "latest",
        "parentId",
        "parentVersion",
        "program",
        "reportEvent",
        "reportEventCancer",
        "reportEventQuestionnaire",
        "reportEventQuestionnaireCancer",
        "reportModelVersion",
        "type",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'comments': Comment,
            'observedVariants': ObservedVariant,
            'reportEvent': ReportEvent,
            'reportEventCancer': ReportEventCancer,
            'reportEventQuestionnaire': ReportEventQuestionnaireRD,
            'reportEventQuestionnaireCancer': ReportEventQuestionnaireCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalProperties': Property,
            'comments': Comment,
            'observedVariants': ObservedVariant,
            'reportEvent': ReportEvent,
            'reportEventCancer': ReportEventCancer,
            'reportEventQuestionnaire': ReportEventQuestionnaireRD,
            'reportEventQuestionnaireCancer': ReportEventQuestionnaireCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalProperties', 'author', 'authorVersion', 'cohortId',
        'comments', 'date', 'groupId', 'id', 'latest',
        'observedVariants', 'parentId', 'parentVersion', 'program',
        'reportEvent', 'reportEventCancer',
        'reportEventQuestionnaire', 'reportEventQuestionnaireCancer',
        'reportModelVersion', 'type', 'validated', 'version',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalProperties = kwargs.get(
            'additionalProperties', [])
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.comments = kwargs.get(
            'comments', [])
        self.date = kwargs.get(
            'date', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.latest = kwargs.get(
            'latest', None)
        self.observedVariants = kwargs.get(
            'observedVariants', [])
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.program = kwargs.get(
            'program', None)
        self.reportEvent = kwargs.get(
            'reportEvent', None)
        self.reportEventCancer = kwargs.get(
            'reportEventCancer', None)
        self.reportEventQuestionnaire = kwargs.get(
            'reportEventQuestionnaire', None)
        self.reportEventQuestionnaireCancer = kwargs.get(
            'reportEventQuestionnaireCancer', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.type = kwargs.get(
            'type', None)
        self.validated = kwargs.get(
            'validated', False)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', [])


class ReportEventQuestionnaireCancer(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ReportEventQuestionnaireCancer",
"fields": [{"doc": "", "type": ["null", {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "CancerSomaticVariantLevelQuestions", "fields": [{"doc": "", "type": "string",
"name": "variantDetails"}, {"doc": "", "type": {"items": {"symbols":
["predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionabilitySomatic"}, "type": "array"},
"name": "variantActionability"}, {"doc": "", "type": ["null", "string"], "name":
"otherVariantActionability"}, {"doc": "", "type": {"symbols": ["already_actioned",
"actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum", "name":
"CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga"], "doc": "", "type": "enum", "name": "CancerTested"}, "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}], "doc": ""}],
"name": "cancerSomaticVariantLevelQuestions"}, {"doc": "", "type": ["null", {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "CancerGermlineVariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
{"symbols": ["germline_susceptibility", "predicts_therapeutic_response", "prognostic",
"defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type": "enum", "name":
"CancerActionability"}, "type": "array"}, "name": "variantActionability"}, {"type": ["null",
"string"], "name": "otherVariantActionability"}, {"doc": "", "type": {"symbols":
["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type": "enum", "name":
"CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type": "CancerTested", "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}], "doc": ""}],
"name": "cancerGermlineVariantLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "CancerCaseLevelQuestions", "fields":
[{"doc": "", "type": "double", "name": "total_review_time"}, {"doc": "", "type": "double", "name":
"mdt1_time"}, {"doc": "", "type": ["null", "double"], "name": "mdt2_time"}, {"doc": "", "type":
["null", "double"], "name": "validation_assay_time"}, {"doc": "", "type": ["null", "double"],
"name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"], "name":
"analytical_validation_time"}, {"doc": "", "type": "double", "name": "primary_reporting_time"},
{"doc": "", "type": "double", "name": "primary_authorisation_time"}, {"doc": "", "type": "double",
"name": "report_distribution_time"}, {"doc": "", "type": "double", "name": "total_time"}, {"doc":
"", "type": {"symbols": ["domain_1", "domain_1_and_2", "domain_1_2_and_suplementary"], "doc": "",
"type": "enum", "name": "ReviewedParts"}, "name": "reviewedInMdtWga"}, {"doc": "", "type":
{"symbols": ["yes", "no"], "doc": "", "type": "enum", "name": "CancerActionableVariants"}, "name":
"actionableVariants"}], "doc": ""}, "name": "cancercaseLevelQuestions"}, {"doc": "", "type":
["null", "string"], "name": "additionalComments"}, {"doc": "", "type": ["null", "string"], "name":
"otherActionableVariants"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "cancerGermlineVariantLevelQuestions",
        "cancerSomaticVariantLevelQuestions",
        "cancercaseLevelQuestions",
        "otherActionableVariants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cancerGermlineVariantLevelQuestions': CancerGermlineVariantLevelQuestions,
            'cancerSomaticVariantLevelQuestions': CancerSomaticVariantLevelQuestions,
            'cancercaseLevelQuestions': CancerCaseLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cancerGermlineVariantLevelQuestions': CancerGermlineVariantLevelQuestions,
            'cancerSomaticVariantLevelQuestions': CancerSomaticVariantLevelQuestions,
            'cancercaseLevelQuestions': CancerCaseLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'cancerGermlineVariantLevelQuestions',
        'cancerSomaticVariantLevelQuestions',
        'cancercaseLevelQuestions', 'otherActionableVariants'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.cancerGermlineVariantLevelQuestions = kwargs.get(
            'cancerGermlineVariantLevelQuestions', None)
        self.cancerSomaticVariantLevelQuestions = kwargs.get(
            'cancerSomaticVariantLevelQuestions', None)
        self.cancercaseLevelQuestions = kwargs.get(
            'cancercaseLevelQuestions', CancerCaseLevelQuestions())
        self.otherActionableVariants = kwargs.get(
            'otherActionableVariants', None)


class ReportEventQuestionnaireRD(ProtocolElement):
    """
    The report event for a questionnaire in RD.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ReportEventQuestionnaireRD",
"fields": [{"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name":
"confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name": "reportingQuestion"},
{"doc": "", "type": {"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name": "acmgClassification"},
{"doc": "", "type": "string", "name": "publications"}], "doc": ""}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name":
"variantGroup"}, {"doc": "", "type": {"items": "VariantLevelQuestions", "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}, "name": "variantGroupLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions", "fields": [{"doc":
"", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum", "name":
"CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes", "no"],
"type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "", "type":
"string", "name": "additionalComments"}], "doc": ""}, "name": "familyLevelQuestions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "familyLevelQuestions",
        "groupOfVariants",
        "variantGroupLevelQuestions",
        "variantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
            'variantLevelQuestions': VariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
            'variantLevelQuestions': VariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'familyLevelQuestions', 'groupOfVariants',
        'variantGroupLevelQuestions', 'variantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.familyLevelQuestions = kwargs.get(
            'familyLevelQuestions', FamilyLevelQuestions())
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.variantGroupLevelQuestions = kwargs.get(
            'variantGroupLevelQuestions', VariantGroupLevelQuestions())
        self.variantLevelQuestions = kwargs.get(
            'variantLevelQuestions', VariantLevelQuestions())


class ReportEventType(object):
    """
    The type of the ReportedVariant      * reported: this is a variant
    reported by a GMC * candidate: this is a variant suggested by a
    Clinical Interpretation Partner * tiered: this is a variant
    highlighted by the tiering process * other: any other source
    """
    reported = "reported"
    candidate = "candidate"
    tiered = "tiered"
    questionnaire = "questionnaire"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class ReportVersionControl(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportVersionControl",
"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name": "gitVersionControl"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'gitVersionControl'
    ]

    def __init__(self, **kwargs):
        self.gitVersionControl = kwargs.get(
            'gitVersionControl', '5.0.0')


class ReportedModeOfInheritance(object):
    """
    An enumeration for the different mode of inheritances:  *
    `monoallelic_not_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, not imprinted *
    `monoallelic_maternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, maternally imprinted (paternal allele expressed)
    * `monoallelic_paternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, paternally imprinted (maternal allele expressed)
    * `monoallelic`: MONOALLELIC, autosomal or pseudoautosomal,
    imprinted status unknown * `biallelic`: BIALLELIC, autosomal or
    pseudoautosomal * `monoallelic_and_biallelic`: BOTH monoallelic
    and biallelic, autosomal or pseudoautosomal *
    `monoallelic_and_more_severe_biallelic`: BOTH monoallelic and
    biallelic, autosomal or pseudoautosomal (but BIALLELIC mutations
    cause a more SEVERE disease form), autosomal or pseudoautosomal *
    `xlinked_biallelic`: X-LINKED: hemizygous mutation in males,
    biallelic mutations in females * `xlinked_monoallelic`: X linked:
    hemizygous mutation in males, monoallelic mutations in females may
    cause disease (may be less severe, later onset than males) *
    `mitochondrial`: MITOCHONDRIAL * `unknown`: Unknown
    """
    monoallelic = "monoallelic"
    monoallelic_not_imprinted = "monoallelic_not_imprinted"
    monoallelic_maternally_imprinted = "monoallelic_maternally_imprinted"
    monoallelic_paternally_imprinted = "monoallelic_paternally_imprinted"
    biallelic = "biallelic"
    monoallelic_and_biallelic = "monoallelic_and_biallelic"
    monoallelic_and_more_severe_biallelic = "monoallelic_and_more_severe_biallelic"
    xlinked_biallelic = "xlinked_biallelic"
    xlinked_monoallelic = "xlinked_monoallelic"
    mitochondrial = "mitochondrial"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class ReportedVariant(ProtocolElement):
    """
    A reported variant
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedVariant", "fields":
[{"doc": "", "type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc":
"", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc":
"", "type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name":
"Assembly"}, "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null",
"string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alleleFrequencies",
        "alleleOrigins",
        "cdnaChanges",
        "clinVarIds",
        "comments",
        "cosmicIds",
        "dbSnpId",
        "genomicChanges",
        "proteinChanges",
        "references",
        "reportEvents",
        "variantAttributes",
        "variantCalls",
        "variantCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEvent,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEvent,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alleleFrequencies',
        'alleleOrigins', 'cdnaChanges', 'clinVarIds', 'comments',
        'cosmicIds', 'dbSnpId', 'genomicChanges', 'proteinChanges',
        'references', 'reportEvents', 'variantAttributes',
        'variantCalls', 'variantCoordinates'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alleleFrequencies = kwargs.get(
            'alleleFrequencies', None)
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.cdnaChanges = kwargs.get(
            'cdnaChanges', None)
        self.clinVarIds = kwargs.get(
            'clinVarIds', None)
        self.comments = kwargs.get(
            'comments', None)
        self.cosmicIds = kwargs.get(
            'cosmicIds', None)
        self.dbSnpId = kwargs.get(
            'dbSnpId', None)
        self.genomicChanges = kwargs.get(
            'genomicChanges', None)
        self.proteinChanges = kwargs.get(
            'proteinChanges', None)
        self.references = kwargs.get(
            'references', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)
        self.variantAttributes = kwargs.get(
            'variantAttributes', None)
        self.variantCalls = kwargs.get(
            'variantCalls', None)
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())


class ReportedVariantCancer(ProtocolElement):
    """
    A reported variant in the cancer program
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedVariantCancer",
"fields": [{"doc": "", "type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields":
[{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name":
"position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string",
"name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type":
"enum", "name": "Assembly"}, "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "",
"type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc":
"", "type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alleleFrequencies",
        "alleleOrigins",
        "cdnaChanges",
        "clinVarIds",
        "comments",
        "cosmicIds",
        "dbSnpId",
        "genomicChanges",
        "proteinChanges",
        "references",
        "reportEvents",
        "variantAttributes",
        "variantCalls",
        "variantCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEventCancer,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEventCancer,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alleleFrequencies',
        'alleleOrigins', 'cdnaChanges', 'clinVarIds', 'comments',
        'cosmicIds', 'dbSnpId', 'genomicChanges', 'proteinChanges',
        'references', 'reportEvents', 'variantAttributes',
        'variantCalls', 'variantCoordinates'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alleleFrequencies = kwargs.get(
            'alleleFrequencies', None)
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.cdnaChanges = kwargs.get(
            'cdnaChanges', None)
        self.clinVarIds = kwargs.get(
            'clinVarIds', None)
        self.comments = kwargs.get(
            'comments', None)
        self.cosmicIds = kwargs.get(
            'cosmicIds', None)
        self.dbSnpId = kwargs.get(
            'dbSnpId', None)
        self.genomicChanges = kwargs.get(
            'genomicChanges', None)
        self.proteinChanges = kwargs.get(
            'proteinChanges', None)
        self.references = kwargs.get(
            'references', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)
        self.variantAttributes = kwargs.get(
            'variantAttributes', None)
        self.variantCalls = kwargs.get(
            'variantCalls', None)
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())


class ReportedVariantInjectCancer(ProtocolElement):
    """
    Record for cancer candidate variant injection as part of the data
    intake for CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ReportedVariantInjectCancer",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro",
"type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportCancer",
"fields": [{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type":
"int", "name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name":
"reportingDate"}, {"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null",
{"items": {"doc": "", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "",
"type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type":
"string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "",
"type": "Assembly", "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type":
["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}],
"name": "variants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "softwareVersions"}], "doc": ""}, "name":
"clinicalReport"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "clinicalReport",
        "cohortId",
        "groupId",
        "id",
        "parentId",
        "parentVersion",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinicalReport': ClinicalReportCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinicalReport': ClinicalReportCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'clinicalReport',
        'cohortId', 'groupId', 'id', 'parentId', 'parentVersion',
        'reportModelVersion', 'version', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.clinicalReport = kwargs.get(
            'clinicalReport', ClinicalReportCancer())
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class ReportedVariantInjectRD(ProtocolElement):
    """
    Record for candidate variant injection as part of the data intake
    for CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ReportedVariantInjectRD",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro",
"type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type":
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportRD", "fields":
[{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int",
"name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "reportingDate"},
{"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly",
"name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}], "name":
"variants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "AdditionalAnalysisPanel", "fields":
[{"type": "string", "name": "specificDisease"}, {"type": "GenePanel", "name": "panel"}]}, "type":
"array"}], "name": "additionalAnalysisPanels"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "references"}, {"doc": "", "type": {"values": "string", "type": "map"},
"name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"},
"name": "softwareVersions"}], "doc": ""}, "name": "clinicalReport"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "clinicalReport",
        "cohortId",
        "groupId",
        "id",
        "parentId",
        "parentVersion",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinicalReport': ClinicalReportRD,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinicalReport': ClinicalReportRD,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'clinicalReport',
        'cohortId', 'groupId', 'id', 'parentId', 'parentVersion',
        'reportModelVersion', 'version', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.clinicalReport = kwargs.get(
            'clinicalReport', ClinicalReportRD())
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class ReportedVariantQuestionnaireRD(ProtocolElement):
    """
    This object holds all questionnaire questions together with
    normalized variant coordinates.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "ReportedVariantQuestionnaireRD",
"fields": [{"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type": "record", "name":
"VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "",
"type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "",
"type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc":
"", "type": "enum", "name": "Assembly"}, "name": "assembly"}], "doc": ""}, "name":
"variantCoordinates"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"ReportEventQuestionnaireRD", "fields": [{"doc": "", "type": ["null", "int"], "name":
"groupOfVariants"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name":
"ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc":
"", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name":
"reportingQuestion"}, {"doc": "", "type": {"symbols": ["pathogenic_variant",
"likely_pathogenic_variant", "variant_of_unknown_clinical_significance", "likely_benign_variant",
"benign_variant", "not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name":
"acmgClassification"}, {"doc": "", "type": "string", "name": "publications"}], "doc": ""}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"namespace": "org.gel.models.report.avro", "type":
"record", "name": "VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name":
"variantGroup"}, {"doc": "", "type": {"items": "VariantLevelQuestions", "type": "array"}, "name":
"variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"], "type":
"enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}, "name": "variantGroupLevelQuestions"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions", "fields": [{"doc":
"", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum", "name":
"CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes", "no"],
"type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "", "type":
"string", "name": "additionalComments"}], "doc": ""}, "name": "familyLevelQuestions"}]}, "name":
"reportEvent"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "reportEvent",
        "variantCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportEvent': ReportEventQuestionnaireRD,
            'variantCoordinates': VariantCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportEvent': ReportEventQuestionnaireRD,
            'variantCoordinates': VariantCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'reportEvent', 'variantCoordinates'
    ]

    def __init__(self, **kwargs):
        self.reportEvent = kwargs.get(
            'reportEvent', ReportEventQuestionnaireRD())
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())


class ReportingQuestion(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class RequestDetails(ProtocolElement):
    """
    Details about the transaction sender
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "RequestDetails", "fields":
[{"doc": "", "type": ["null", "string"], "name": "ip"}, {"doc": "", "type": ["null", "string"],
"name": "host"}, {"doc": "", "type": ["null", "int"], "name": "port"}, {"doc": "", "type": ["null",
"string"], "name": "user"}, {"doc": "", "type": ["null", "string"], "name": "uri"}, {"doc": "",
"type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"], "name":
"authType"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "authType",
        "host",
        "ip",
        "port",
        "uri",
        "url",
        "user",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'authType', 'host', 'ip', 'port', 'uri', 'url', 'user'
    ]

    def __init__(self, **kwargs):
        self.authType = kwargs.get(
            'authType', None)
        self.host = kwargs.get(
            'host', None)
        self.ip = kwargs.get(
            'ip', None)
        self.port = kwargs.get(
            'port', None)
        self.uri = kwargs.get(
            'uri', None)
        self.url = kwargs.get(
            'url', None)
        self.user = kwargs.get(
            'user', None)


class ReviewedParts(object):
    """
    An enumeration for Which parts of the WGA were reviewed?: *
    `domain_1`: Domain 1 only * `domain_1_and_2`: Domains 1 and 2 *
    `domain_1_2_and_suplementary`: Domains 1, 2 and supplementary
    analysis
    """
    domain_1 = "domain_1"
    domain_1_and_2 = "domain_1_and_2"
    domain_1_2_and_suplementary = "domain_1_2_and_suplementary"

    def __hash__(self):
        return str(self).__hash__()


class RoleInCancer(object):
    """
    The role of a given genomic feature in cancer  * `NCIT_C16936`:
    oncogene. A gene that is a mutated (changed) form of a gene
    involved in normal cell growth. Oncogenes may cause the growth of
    cancer cells. Mutations in genes that become oncogenes can be
    inherited or caused by being exposed to substances in the
    environment that cause cancer.
    http://purl.obolibrary.org/obo/NCIT_C16936 * `NCIT_C17362`:
    tumor_suppressor_gene. A type of gene that makes a protein called
    a tumor suppressor protein that helps control cell growth.
    Mutations (changes in DNA) in antioncogenes may lead to cancer.
    http://purl.obolibrary.org/obo/NCIT_C17362
    """
    oncogene = "oncogene"
    tumor_suppressor_gene = "tumor_suppressor_gene"
    both = "both"

    def __hash__(self):
        return str(self).__hash__()


class Sample(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.metadata", "type": "record", "name": "Sample", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"default": {}, "doc": "", "type": {"values":
"string", "type": "map"}, "name": "annotations"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'annotations', 'id'
    ]

    def __init__(self, **kwargs):
        self.annotations = kwargs.get(
            'annotations', {})
        self.id = kwargs.get(
            'id', None)


class SampleSetType(object):
    """
    No documentation
    """
    CASE_CONTROL = "CASE_CONTROL"
    CASE_SET = "CASE_SET"
    CONTROL_SET = "CONTROL_SET"
    PAIRED = "PAIRED"
    TIME_SERIES = "TIME_SERIES"
    FAMILY = "FAMILY"
    TRIO = "TRIO"
    MISCELLANEOUS = "MISCELLANEOUS"
    UNKNOWN = "UNKNOWN"

    def __hash__(self):
        return str(self).__hash__()


class SampleSource(object):
    """
    The source of the sample
    """
    TUMOUR = "TUMOUR"
    BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS = "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS"
    BONE_MARROW_ASPIRATE_TUMOUR_CELLS = "BONE_MARROW_ASPIRATE_TUMOUR_CELLS"
    BLOOD = "BLOOD"
    SALIVA = "SALIVA"
    FIBROBLAST = "FIBROBLAST"
    TISSUE = "TISSUE"

    def __hash__(self):
        return str(self).__hash__()


class Score(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Score", "fields":
[{"type": "double", "name": "score"}, {"type": "string", "name": "source"}, {"type": ["null",
"string"], "name": "description"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "description",
        "score",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'description', 'score', 'source'
    ]

    def __init__(self, **kwargs):
        self.description = kwargs.get(
            'description', None)
        self.score = kwargs.get(
            'score', None)
        self.source = kwargs.get(
            'source', None)


class SegregationQuestion(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"

    def __hash__(self):
        return str(self).__hash__()


class SensitiveInformation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "SensitiveInformation",
"fields": [{"doc": "", "type": {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}, "name": "versionControl"},
{"type": "string", "name": "gelID"}, {"type": ["null", {"items": "string", "type": "array"}],
"name": "externalIds"}, {"type": ["null", "string"], "name": "genomicMedicineCenter"}, {"type":
["null", "string"], "name": "fullNameOfResponsibleConsultant"}, {"type": ["null", "string"], "name":
"contactNumber"}, {"type": ["null", "string"], "name": "hospitalOfResponsibleConsultant"}, {"type":
["null", "string"], "name": "centerSampleId"}, {"type": ["null", "string"], "name":
"originatingCenter"}, {"type": ["null", "string"], "name": "centerPatientId"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "centerPatientId",
        "centerSampleId",
        "contactNumber",
        "externalIds",
        "fullNameOfResponsibleConsultant",
        "gelID",
        "genomicMedicineCenter",
        "hospitalOfResponsibleConsultant",
        "originatingCenter",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'centerPatientId', 'centerSampleId', 'contactNumber',
        'externalIds', 'fullNameOfResponsibleConsultant', 'gelID',
        'genomicMedicineCenter', 'hospitalOfResponsibleConsultant',
        'originatingCenter', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.centerPatientId = kwargs.get(
            'centerPatientId', None)
        self.centerSampleId = kwargs.get(
            'centerSampleId', None)
        self.contactNumber = kwargs.get(
            'contactNumber', None)
        self.externalIds = kwargs.get(
            'externalIds', None)
        self.fullNameOfResponsibleConsultant = kwargs.get(
            'fullNameOfResponsibleConsultant', None)
        self.gelID = kwargs.get(
            'gelID', None)
        self.genomicMedicineCenter = kwargs.get(
            'genomicMedicineCenter', None)
        self.hospitalOfResponsibleConsultant = kwargs.get(
            'hospitalOfResponsibleConsultant', None)
        self.originatingCenter = kwargs.get(
            'originatingCenter', None)
        self.versionControl = kwargs.get(
            'versionControl', VersionControl())


class SequenceOntologyTerm(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"SequenceOntologyTerm", "fields": [{"type": "string", "name": "accession"}, {"type": "string",
"name": "name"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "accession",
        "name",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'accession', 'name'
    ]

    def __init__(self, **kwargs):
        self.accession = kwargs.get(
            'accession', None)
        self.name = kwargs.get(
            'name', None)


class ServiceHealth(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.system.avro", "type": "record", "name": "ServiceHealth", "fields":
[{"type": "string", "name": "serviceName"}, {"type": "string", "name": "requestUrl"}, {"type":
"string", "name": "datetime"}, {"type": {"symbols": ["OK", "DOWN"], "doc": "", "type": "enum",
"name": "Status"}, "name": "status"}, {"type": {"doc": "", "type": "record", "name": "Dependencies",
"fields": [{"type": {"items": {"doc": "", "type": "record", "name": "DataStore", "fields": [{"type":
"string", "name": "type"}, {"type": "string", "name": "description"}, {"type": {"items": "string",
"type": "array"}, "name": "url"}, {"type": "Status", "name": "status"}, {"type": ["null", {"values":
"string", "type": "map"}], "name": "additionalProperties"}]}, "type": "array"}, "name":
"datastores"}, {"type": {"items": {"doc": "", "type": "record", "name": "API", "fields": [{"type":
{"symbols": ["REST", "MONGODB", "OTHER"], "type": "enum", "name": "APIType"}, "name": "type"},
{"type": "string", "name": "description"}, {"type": {"items": "string", "type": "array"}, "name":
"url"}, {"type": "Status", "name": "status"}, {"type": ["null", {"values": "string", "type":
"map"}], "name": "additionalProperties"}]}, "type": "array"}, "name": "apis"}]}, "name":
"dependencies"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "datetime",
        "dependencies",
        "requestUrl",
        "serviceName",
        "status",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'dependencies': Dependencies,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'dependencies': Dependencies,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'datetime', 'dependencies', 'requestUrl', 'serviceName',
        'status'
    ]

    def __init__(self, **kwargs):
        self.datetime = kwargs.get(
            'datetime', None)
        self.dependencies = kwargs.get(
            'dependencies', Dependencies())
        self.requestUrl = kwargs.get(
            'requestUrl', None)
        self.serviceName = kwargs.get(
            'serviceName', None)
        self.status = kwargs.get(
            'status', None)


class Severity(object):
    """
    No documentation
    """
    BORDERLINE = "BORDERLINE"
    MILD = "MILD"
    MODERATE = "MODERATE"
    SEVERE = "SEVERE"
    PROFOUND = "PROFOUND"

    def __hash__(self):
        return str(self).__hash__()


class Sex(object):
    """
    Sex
    """
    MALE = "MALE"
    FEMALE = "FEMALE"
    UNKNOWN = "UNKNOWN"

    def __hash__(self):
        return str(self).__hash__()


class SomaticInformation(ProtocolElement):
    """
    The somatic information.
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"SomaticInformation", "fields": [{"doc": "", "type": ["null", "string"], "name": "primarySite"},
{"doc": "", "type": ["null", "string"], "name": "siteSubtype"}, {"doc": "", "type": ["null",
"string"], "name": "primaryHistology"}, {"doc": "", "type": ["null", "string"], "name":
"histologySubtype"}, {"doc": "", "type": ["null", "string"], "name": "tumourOrigin"}, {"doc": "",
"type": ["null", "string"], "name": "sampleSource"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "histologySubtype",
        "primaryHistology",
        "primarySite",
        "sampleSource",
        "siteSubtype",
        "tumourOrigin",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'histologySubtype', 'primaryHistology', 'primarySite',
        'sampleSource', 'siteSubtype', 'tumourOrigin'
    ]

    def __init__(self, **kwargs):
        self.histologySubtype = kwargs.get(
            'histologySubtype', None)
        self.primaryHistology = kwargs.get(
            'primaryHistology', None)
        self.primarySite = kwargs.get(
            'primarySite', None)
        self.sampleSource = kwargs.get(
            'sampleSource', None)
        self.siteSubtype = kwargs.get(
            'siteSubtype', None)
        self.tumourOrigin = kwargs.get(
            'tumourOrigin', None)


class SpatialPattern(object):
    """
    No documentation
    """
    DISTAL = "DISTAL"
    GENERALIZED = "GENERALIZED"
    LOCALIZED = "LOCALIZED"
    PROXIMAL = "PROXIMAL"

    def __hash__(self):
        return str(self).__hash__()


class Species(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.metadata", "type": "record", "name": "Species", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "scientificName"}, {"default": null, "type": ["null", "string"], "name":
"taxonomyId"}, {"default": null, "type": ["null", "string"], "name": "strain"}, {"default": null,
"type": ["null", "string"], "name": "assembly"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'id', 'scientificName', 'strain', 'taxonomyId'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.id = kwargs.get(
            'id', None)
        self.scientificName = kwargs.get(
            'scientificName', None)
        self.strain = kwargs.get(
            'strain', None)
        self.taxonomyId = kwargs.get(
            'taxonomyId', None)


class Status(object):
    """
    Represents the contract of service status
    """
    OK = "OK"
    DOWN = "DOWN"

    def __hash__(self):
        return str(self).__hash__()


class StructuralVariantType(object):
    """
    * Type of structural variation      * <ul>      *
    <li>COPY_NUMBER_GAIN for CNVs</li>      * <li>COPY_NUMBER_LOSS for
    CNVs</li>      * <li>TANDEM_DUPLICATION for DUP</li>      * </ul>
    """
    COPY_NUMBER_GAIN = "COPY_NUMBER_GAIN"
    COPY_NUMBER_LOSS = "COPY_NUMBER_LOSS"
    TANDEM_DUPLICATION = "TANDEM_DUPLICATION"

    def __hash__(self):
        return str(self).__hash__()


class StructuralVariation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"StructuralVariation", "fields": [{"type": ["null", "int"], "name": "ciStartLeft"}, {"type":
["null", "int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name": "ciEndLeft"}, {"type":
["null", "int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"], "name": "copyNumber"},
{"doc": "", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type": ["null", "string"],
"name": "rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols": ["COPY_NUMBER_GAIN",
"COPY_NUMBER_LOSS", "TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name":
"StructuralVariantType"}], "name": "type"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ciEndLeft",
        "ciEndRight",
        "ciStartLeft",
        "ciStartRight",
        "copyNumber",
        "leftSvInsSeq",
        "rightSvInsSeq",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ciEndLeft', 'ciEndRight', 'ciStartLeft', 'ciStartRight',
        'copyNumber', 'leftSvInsSeq', 'rightSvInsSeq', 'type'
    ]

    def __init__(self, **kwargs):
        self.ciEndLeft = kwargs.get(
            'ciEndLeft', None)
        self.ciEndRight = kwargs.get(
            'ciEndRight', None)
        self.ciStartLeft = kwargs.get(
            'ciStartLeft', None)
        self.ciStartRight = kwargs.get(
            'ciStartRight', None)
        self.copyNumber = kwargs.get(
            'copyNumber', None)
        self.leftSvInsSeq = kwargs.get(
            'leftSvInsSeq', None)
        self.rightSvInsSeq = kwargs.get(
            'rightSvInsSeq', None)
        self.type = kwargs.get(
            'type', None)


class StudyEntry(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "StudyEntry",
"fields": [{"doc": "", "type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "",
"type": ["null", "string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name":
"files"}, {"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "",
"type": ["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"type": {"symbols": ["SNV",
"SNP", "MNV", "MNP", "INDEL", "SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV",
"DUPLICATION", "BREAKEND", "NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name":
"VariantType"}, "name": "type"}], "type": "record", "name": "AlternateCoordinate"}, "type":
"array"}], "name": "secondaryAlternates"}, {"doc": "", "type": {"items": "string", "type": "array"},
"name": "format"}, {"doc": "", "type": {"items": {"items": "string", "type": "array"}, "type":
"array"}, "name": "samplesData"}, {"doc": "", "type": {"values": {"fields": [{"type": ["null",
"string"], "name": "refAllele"}, {"type": ["null", "string"], "name": "altAllele"}, {"type":
["null", "int"], "name": "refAlleleCount"}, {"type": ["null", "int"], "name": "altAlleleCount"},
{"type": {"values": "int", "type": "map", "java-key-class":
"org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesCount"}, {"type": {"values":
"float", "type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"}, {"type": ["null", "int"],
"name": "missingGenotypes"}, {"type": ["null", "float"], "name": "refAlleleFreq"}, {"type": ["null",
"float"], "name": "altAlleleFreq"}, {"type": ["null", "float"], "name": "maf"}, {"type": ["null",
"float"], "name": "mgf"}, {"type": ["null", "string"], "name": "mafAllele"}, {"type": ["null",
"string"], "name": "mgfGenotype"}, {"type": ["null", "boolean"], "name": "passedFilters"}, {"type":
["null", "int"], "name": "mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name": "controlsPercentDominant"}, {"type":
["null", "float"], "name": "casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name": "quality"}, {"type": ["null",
"int"], "name": "numSamples"}, {"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields": [{"type": ["null", "float"], "name":
"chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name": "n_Aa_10"}, {"type":
["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"}, {"type":
["null", "float"], "name": "p"}, {"type": ["null", "float"], "name": "q"}], "type": "record",
"name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record", "name": "VariantStats"},
"type": "map"}, "name": "stats"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "format",
        "samplesData",
        "stats",
        "studyId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'files': FileEntry,
            'secondaryAlternates': AlternateCoordinate,
            'stats': VariantStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'files': FileEntry,
            'secondaryAlternates': AlternateCoordinate,
            'stats': VariantStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'files', 'format', 'samplesData', 'secondaryAlternates',
        'stats', 'studyId'
    ]

    def __init__(self, **kwargs):
        self.files = kwargs.get(
            'files', [])
        self.format = kwargs.get(
            'format', None)
        self.samplesData = kwargs.get(
            'samplesData', None)
        self.secondaryAlternates = kwargs.get(
            'secondaryAlternates', None)
        self.stats = kwargs.get(
            'stats', None)
        self.studyId = kwargs.get(
            'studyId', None)


class SupportingEvidences(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "SupportingEvidences",
"fields": [{"type": {"items": "string", "type": "array"}, "name": "previousSupportingEvidences"},
{"type": {"items": "string", "type": "array"}, "name": "modifiedSupportingEvidences"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedSupportingEvidences",
        "previousSupportingEvidences",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedSupportingEvidences', 'previousSupportingEvidences'
    ]

    def __init__(self, **kwargs):
        self.modifiedSupportingEvidences = kwargs.get(
            'modifiedSupportingEvidences', None)
        self.previousSupportingEvidences = kwargs.get(
            'previousSupportingEvidences', None)


class TernaryOption(object):
    """
    This defines a yes/no/unknown case
    """
    yes = "yes"
    no = "no"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class Tier(object):
    """
    Variant tiers as defined by Genomics England
    """
    NONE = "NONE"
    TIER1 = "TIER1"
    TIER2 = "TIER2"
    TIER3 = "TIER3"
    TIER4 = "TIER4"
    TIER5 = "TIER5"

    def __hash__(self):
        return str(self).__hash__()


class TieredVariantInjectCancer(ProtocolElement):
    """
    Record for tiered variant injection as part of the data intake for
    CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "TieredVariantInjectCancer",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "", "type":
"string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name": "authorVersion"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"}, {"doc": "", "type":
{"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro", "type": "enum", "name":
"Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "CancerInterpretedGenome", "fields":
[{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "", "type": {"doc": "",
"type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly",
"name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"},
"name": "variants"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"comments"}], "doc": ""}, "name": "interpretedGenome"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "cohortId",
        "groupId",
        "id",
        "interpretedGenome",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': CancerInterpretedGenome,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': CancerInterpretedGenome,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'cohortId', 'groupId',
        'id', 'interpretedGenome', 'reportModelVersion', 'version',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.interpretedGenome = kwargs.get(
            'interpretedGenome', CancerInterpretedGenome())
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class TieredVariantInjectRD(ProtocolElement):
    """
    Record for tiered variant injection as part of the data intake for
    CVA
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "TieredVariantInjectRD",
"fields": [{"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "", "type":
"string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name": "authorVersion"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"}, {"doc": "", "type":
{"symbols": ["GRCh38", "GRCh37"], "namespace": "org.gel.models.report.avro", "type": "enum", "name":
"Assembly", "doc": ""}, "name": "assembly"}, {"doc": "", "type": {"namespace":
"org.gel.models.report.avro", "type": "record", "name": "InterpretedGenomeRD", "fields": [{"doc":
"", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": "Assembly",
"name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"],
"name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name": "variants"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "softwareVersions"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "comments"}], "doc": ""}, "name":
"interpretedGenome"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "cohortId",
        "groupId",
        "id",
        "interpretedGenome",
        "reportModelVersion",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': InterpretedGenomeRD,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretedGenome': InterpretedGenomeRD,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'cohortId', 'groupId',
        'id', 'interpretedGenome', 'reportModelVersion', 'version',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.id = kwargs.get(
            'id', None)
        self.interpretedGenome = kwargs.get(
            'interpretedGenome', InterpretedGenomeRD())
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class TissueSource(object):
    """
    No documentation
    """
    BMA_TUMOUR_SORTED_CELLS = "BMA_TUMOUR_SORTED_CELLS"
    CT_GUIDED_BIOPSY = "CT_GUIDED_BIOPSY"
    ENDOSCOPIC_BIOPSY = "ENDOSCOPIC_BIOPSY"
    ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY = "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY"
    ENDOSCOPIC_ULTRASOUND_GUIDED_FNA = "ENDOSCOPIC_ULTRASOUND_GUIDED_FNA"
    LAPAROSCOPIC_BIOPSY = "LAPAROSCOPIC_BIOPSY"
    LAPAROSCOPIC_EXCISION = "LAPAROSCOPIC_EXCISION"
    MRI_GUIDED_BIOPSY = "MRI_GUIDED_BIOPSY"
    NON_GUIDED_BIOPSY = "NON_GUIDED_BIOPSY"
    SURGICAL_RESECTION = "SURGICAL_RESECTION"
    STEREOTACTICALLY_GUIDED_BIOPSY = "STEREOTACTICALLY_GUIDED_BIOPSY"
    USS_GUIDED_BIOPSY = "USS_GUIDED_BIOPSY"
    NON_STANDARD_BIOPSY = "NON_STANDARD_BIOPSY"

    def __hash__(self):
        return str(self).__hash__()


class TraitAssociation(object):
    """
    Association of variants to a given trait. *
    `established_risk_allele` : Established risk allele for variants
    associated to disease * `likely_risk_allele` : Likely risk allele
    for variants associated to disease * `uncertain_risk_allele` :
    Uncertain risk allele for variants associated to disease *
    `protective` : Protective allele
    """
    established_risk_allele = "established_risk_allele"
    likely_risk_allele = "likely_risk_allele"
    uncertain_risk_allele = "uncertain_risk_allele"
    protective = "protective"

    def __hash__(self):
        return str(self).__hash__()


class Transaction(ProtocolElement):
    """
    A transaction having all necessary data to process it into the
    database
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "Transaction", "fields": [{"doc":
"", "type": "string", "name": "id"}, {"doc": "", "type": "string", "name": "lastModified"}, {"doc":
"", "type": {"symbols": ["PENDING", "BLOCKED", "PROCESSING", "PERSISTING", "DONE", "CANCELLING",
"CANCELLED", "ERROR", "ROLLBACK_ERROR", "DELETED"], "doc": "", "type": "enum", "name":
"TransactionStatus"}, "name": "status"}, {"doc": "", "type": ["null", "bytes"], "name":
"compressedData"}, {"doc": "", "type": "string", "name": "requestSignature"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "options"}, {"doc": "", "type": ["null", "int"],
"name": "processingMilli"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"TransactionDetails", "fields": [{"doc": "", "type": "string", "name": "type"}, {"doc": "", "type":
"int", "name": "numberOfElements"}, {"doc": "", "type": "string", "name": "reportModelVersion"},
{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc":
"", "type": "string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"},
{"doc": "", "type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"},
{"doc": "", "type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": ["null", {"symbols": ["GRCh38", "GRCh37"], "namespace":
"org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc": ""}], "name": "assembly"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "TransactionStatusChange",
"fields": [{"doc": "", "type": "TransactionStatus", "name": "to"}, {"doc": "", "type": "string",
"name": "timestamp"}, {"doc": "", "type": ["null", "string"], "name": "message"}, {"doc": "",
"type": ["null", "string"], "name": "errorMessage"}, {"doc": "", "type": ["null", "string"], "name":
"stackTrace"}, {"doc": "", "type": ["null", "string"], "name": "cvaVersion"}]}, "type": "array"},
"name": "history"}]}, "name": "transactionDetails"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "RequestDetails", "fields": [{"doc": "", "type": ["null", "string"],
"name": "ip"}, {"doc": "", "type": ["null", "string"], "name": "host"}, {"doc": "", "type": ["null",
"int"], "name": "port"}, {"doc": "", "type": ["null", "string"], "name": "user"}, {"doc": "",
"type": ["null", "string"], "name": "uri"}, {"doc": "", "type": ["null", "string"], "name": "url"},
{"doc": "", "type": ["null", "string"], "name": "authType"}]}], "name": "requestDetails"}], "doc":
""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "compressedData",
        "id",
        "lastModified",
        "options",
        "processingMilli",
        "requestDetails",
        "requestSignature",
        "status",
        "transactionDetails",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'requestDetails': RequestDetails,
            'transactionDetails': TransactionDetails,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'requestDetails': RequestDetails,
            'transactionDetails': TransactionDetails,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'compressedData', 'id', 'lastModified', 'options',
        'processingMilli', 'requestDetails', 'requestSignature',
        'status', 'transactionDetails'
    ]

    def __init__(self, **kwargs):
        self.compressedData = kwargs.get(
            'compressedData', None)
        self.id = kwargs.get(
            'id', None)
        self.lastModified = kwargs.get(
            'lastModified', None)
        self.options = kwargs.get(
            'options', None)
        self.processingMilli = kwargs.get(
            'processingMilli', None)
        self.requestDetails = kwargs.get(
            'requestDetails', None)
        self.requestSignature = kwargs.get(
            'requestSignature', None)
        self.status = kwargs.get(
            'status', None)
        self.transactionDetails = kwargs.get(
            'transactionDetails', TransactionDetails())


class TransactionDetails(ProtocolElement):
    """
    Details about the content of a transaction and some logs.
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "TransactionDetails", "fields":
[{"doc": "", "type": "string", "name": "type"}, {"doc": "", "type": "int", "name":
"numberOfElements"}, {"doc": "", "type": "string", "name": "reportModelVersion"}, {"doc": "",
"type": "string", "name": "id"}, {"doc": "", "type": "int", "name": "version"}, {"doc": "", "type":
"string", "name": "parentId"}, {"doc": "", "type": "int", "name": "parentVersion"}, {"doc": "",
"type": "string", "name": "groupId"}, {"doc": "", "type": "string", "name": "cohortId"}, {"doc": "",
"type": "string", "name": "author"}, {"doc": "", "type": ["null", "string"], "name":
"authorVersion"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "workspace"},
{"doc": "", "type": ["null", {"symbols": ["GRCh38", "GRCh37"], "namespace":
"org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc": ""}], "name": "assembly"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "TransactionStatusChange",
"fields": [{"doc": "", "type": {"symbols": ["PENDING", "BLOCKED", "PROCESSING", "PERSISTING",
"DONE", "CANCELLING", "CANCELLED", "ERROR", "ROLLBACK_ERROR", "DELETED"], "doc": "", "type": "enum",
"name": "TransactionStatus"}, "name": "to"}, {"doc": "", "type": "string", "name": "timestamp"},
{"doc": "", "type": ["null", "string"], "name": "message"}, {"doc": "", "type": ["null", "string"],
"name": "errorMessage"}, {"doc": "", "type": ["null", "string"], "name": "stackTrace"}, {"doc": "",
"type": ["null", "string"], "name": "cvaVersion"}]}, "type": "array"}, "name": "history"}], "doc":
""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "assembly",
        "author",
        "authorVersion",
        "cohortId",
        "groupId",
        "history",
        "id",
        "numberOfElements",
        "parentId",
        "parentVersion",
        "reportModelVersion",
        "type",
        "version",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'history': TransactionStatusChange,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'history': TransactionStatusChange,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'assembly', 'author', 'authorVersion', 'cohortId', 'groupId',
        'history', 'id', 'numberOfElements', 'parentId',
        'parentVersion', 'reportModelVersion', 'type', 'version',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.assembly = kwargs.get(
            'assembly', None)
        self.author = kwargs.get(
            'author', None)
        self.authorVersion = kwargs.get(
            'authorVersion', None)
        self.cohortId = kwargs.get(
            'cohortId', None)
        self.groupId = kwargs.get(
            'groupId', None)
        self.history = kwargs.get(
            'history', None)
        self.id = kwargs.get(
            'id', None)
        self.numberOfElements = kwargs.get(
            'numberOfElements', None)
        self.parentId = kwargs.get(
            'parentId', None)
        self.parentVersion = kwargs.get(
            'parentVersion', None)
        self.reportModelVersion = kwargs.get(
            'reportModelVersion', None)
        self.type = kwargs.get(
            'type', None)
        self.version = kwargs.get(
            'version', None)
        self.workspace = kwargs.get(
            'workspace', None)


class TransactionStatus(object):
    """
    The transaction status:  * PENDING: a transaction in the queue
    pending to be processed * BLOCKED: a transaction already being
    processed * PROCESSING: a transaction being processed (normalised,
    lifted over and annotated) * PERSISTING: a transaction being
    persisted in the database * BLOCKED: a transaction already being
    processed * DONE: a transaction has been successfully processed *
    CANCELLING: a transaction is being rolled back * CANCELLED: a
    transaction has been rolled back * ERROR: erroneous transaction
    that cannot be processed, nor retried (this is caused by reported
    variants already in the database) * ROLLBACK_ERROR: a transaction
    failed to roll back (this may leave the database in an
    inconsistent state) * DELETED: a transaction has been deleted by a
    user (same effect as CANCELLED but user triggered)      The happy
    path is PENDING -> BLOCKED -> PROCESSING -> PERSISTING -> DONE
    """
    PENDING = "PENDING"
    BLOCKED = "BLOCKED"
    PROCESSING = "PROCESSING"
    PERSISTING = "PERSISTING"
    DONE = "DONE"
    CANCELLING = "CANCELLING"
    CANCELLED = "CANCELLED"
    ERROR = "ERROR"
    ROLLBACK_ERROR = "ROLLBACK_ERROR"
    DELETED = "DELETED"

    def __hash__(self):
        return str(self).__hash__()


class TransactionStatusChange(ProtocolElement):
    """
    Keeps track of a transaction status change
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "TransactionStatusChange",
"fields": [{"doc": "", "type": {"symbols": ["PENDING", "BLOCKED", "PROCESSING", "PERSISTING",
"DONE", "CANCELLING", "CANCELLED", "ERROR", "ROLLBACK_ERROR", "DELETED"], "doc": "", "type": "enum",
"name": "TransactionStatus"}, "name": "to"}, {"doc": "", "type": "string", "name": "timestamp"},
{"doc": "", "type": ["null", "string"], "name": "message"}, {"doc": "", "type": ["null", "string"],
"name": "errorMessage"}, {"doc": "", "type": ["null", "string"], "name": "stackTrace"}, {"doc": "",
"type": ["null", "string"], "name": "cvaVersion"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "cvaVersion",
        "errorMessage",
        "message",
        "stackTrace",
        "timestamp",
        "to",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'cvaVersion', 'errorMessage', 'message', 'stackTrace',
        'timestamp', 'to'
    ]

    def __init__(self, **kwargs):
        self.cvaVersion = kwargs.get(
            'cvaVersion', None)
        self.errorMessage = kwargs.get(
            'errorMessage', None)
        self.message = kwargs.get(
            'message', None)
        self.stackTrace = kwargs.get(
            'stackTrace', None)
        self.timestamp = kwargs.get(
            'timestamp', None)
        self.to = kwargs.get(
            'to', None)


class TumorigenesisClassification(object):
    """
    Variant classification according to its relation to cancer
    aetiology. * `driver` : Driver variants * `passenger` : Passenger
    variants * `modifier` : Modifier variants
    """
    driver = "driver"
    passenger = "passenger"
    modifier = "modifier"

    def __hash__(self):
        return str(self).__hash__()


class TumourContent(object):
    """
    No documentation
    """
    High = "High"
    Medium = "Medium"
    Low = "Low"

    def __hash__(self):
        return str(self).__hash__()


class TumourSample(ProtocolElement):
    """
    A tumour sample
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "TumourSample", "fields":
[{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type": "string",
"name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL", "IIP",
"MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"}, {"doc": "",
"type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST", "CARCINOMA_OF_UNKNOWN_PRIMARY",
"CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC", "HEPATOPANCREATOBILIARY", "LUNG",
"MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL", "OVARIAN", "PROSTATE", "RENAL",
"SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS", "UPPER_GASTROINTESTINAL",
"NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "clinicalSampleDateTime",
        "diseaseSubType",
        "diseaseType",
        "labSampleId",
        "morphologyICD",
        "morphologySnomedCT",
        "morphologySnomedRT",
        "preparationMethod",
        "product",
        "programmePhase",
        "sampleId",
        "source",
        "tissueSource",
        "topographyICD",
        "topographySnomedCT",
        "topographySnomedRT",
        "tumourContent",
        "tumourId",
        "tumourType",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'clinicalSampleDateTime', 'diseaseSubType',
        'diseaseType', 'labSampleId', 'morphologyICD',
        'morphologySnomedCT', 'morphologySnomedRT',
        'preparationMethod', 'product', 'programmePhase', 'sampleId',
        'source', 'tissueSource', 'topographyICD',
        'topographySnomedCT', 'topographySnomedRT', 'tumourContent',
        'tumourId', 'tumourType'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.clinicalSampleDateTime = kwargs.get(
            'clinicalSampleDateTime', None)
        self.diseaseSubType = kwargs.get(
            'diseaseSubType', None)
        self.diseaseType = kwargs.get(
            'diseaseType', None)
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.morphologyICD = kwargs.get(
            'morphologyICD', None)
        self.morphologySnomedCT = kwargs.get(
            'morphologySnomedCT', None)
        self.morphologySnomedRT = kwargs.get(
            'morphologySnomedRT', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.programmePhase = kwargs.get(
            'programmePhase', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)
        self.tissueSource = kwargs.get(
            'tissueSource', None)
        self.topographyICD = kwargs.get(
            'topographyICD', None)
        self.topographySnomedCT = kwargs.get(
            'topographySnomedCT', None)
        self.topographySnomedRT = kwargs.get(
            'topographySnomedRT', None)
        self.tumourContent = kwargs.get(
            'tumourContent', None)
        self.tumourId = kwargs.get(
            'tumourId', None)
        self.tumourType = kwargs.get(
            'tumourType', None)


class TumourType(object):
    """
    No documentation
    """
    PRIMARY = "PRIMARY"
    METASTATIC_RECURRENCE = "METASTATIC_RECURRENCE"
    RECURRENCE_OF_PRIMARY_TUMOUR = "RECURRENCE_OF_PRIMARY_TUMOUR"
    METASTASES = "METASTASES"

    def __hash__(self):
        return str(self).__hash__()


class Variant(ProtocolElement):
    """
    The map of variants in the different assemblies
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "Variant", "fields": [{"default":
[], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantRepresentation",
"fields": [{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace":
"org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"},
{"doc": "", "type": ["null", "string"], "name": "annotatorVersion"}, {"doc": "", "type": ["null",
"string"], "name": "annotationsVersion"}, {"doc": "", "type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantAvro", "fields":
[{"doc": "", "type": ["null", "string"], "name": "id"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "names"}, {"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "strand"}, {"default": null, "doc":
"", "type": ["null", {"fields": [{"type": ["null", "int"], "name": "ciStartLeft"}, {"type": ["null",
"int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name": "ciEndLeft"}, {"type": ["null",
"int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"], "name": "copyNumber"}, {"doc":
"", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type": ["null", "string"], "name":
"rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols": ["COPY_NUMBER_GAIN", "COPY_NUMBER_LOSS",
"TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name": "StructuralVariantType"}], "name":
"type"}], "type": "record", "name": "StructuralVariation"}], "name": "sv"}, {"doc": "", "type":
"int", "name": "length"}, {"doc": "", "type": {"symbols": ["SNV", "SNP", "MNV", "MNP", "INDEL",
"SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV", "DUPLICATION", "BREAKEND",
"NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name":
"type"}, {"default": null, "doc": "", "type": ["null", {"values": {"items": "string", "type":
"array"}, "type": "map"}], "name": "hgvs"}, {"doc": "", "type": {"items": {"fields": [{"doc": "",
"type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "", "type": ["null",
"string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name": "files"},
{"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "", "type":
["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"type": "VariantType", "name": "type"}],
"type": "record", "name": "AlternateCoordinate"}, "type": "array"}], "name": "secondaryAlternates"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name": "format"}, {"doc": "", "type":
{"items": {"items": "string", "type": "array"}, "type": "array"}, "name": "samplesData"}, {"doc":
"", "type": {"values": {"fields": [{"type": ["null", "string"], "name": "refAllele"}, {"type":
["null", "string"], "name": "altAllele"}, {"type": ["null", "int"], "name": "refAlleleCount"},
{"type": ["null", "int"], "name": "altAlleleCount"}, {"type": {"values": "int", "type": "map",
"java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesCount"}, {"type":
{"values": "float", "type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"},
"name": "genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"}, {"type": ["null",
"int"], "name": "missingGenotypes"}, {"type": ["null", "float"], "name": "refAlleleFreq"}, {"type":
["null", "float"], "name": "altAlleleFreq"}, {"type": ["null", "float"], "name": "maf"}, {"type":
["null", "float"], "name": "mgf"}, {"type": ["null", "string"], "name": "mafAllele"}, {"type":
["null", "string"], "name": "mgfGenotype"}, {"type": ["null", "boolean"], "name": "passedFilters"},
{"type": ["null", "int"], "name": "mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name": "controlsPercentDominant"}, {"type":
["null", "float"], "name": "casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name": "quality"}, {"type": ["null",
"int"], "name": "numSamples"}, {"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields": [{"type": ["null", "float"], "name":
"chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name": "n_Aa_10"}, {"type":
["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"}, {"type":
["null", "float"], "name": "p"}, {"type": ["null", "float"], "name": "q"}], "type": "record",
"name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record", "name": "VariantStats"},
"type": "map"}, "name": "stats"}], "type": "record", "name": "StudyEntry"}, "type": "array"},
"name": "studies"}, {"default": null, "doc": "", "type": ["null", {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "string"], "name": "reference"}, {"type": ["null",
"string"], "name": "alternate"}, {"type": ["null", "string"], "name": "ancestralAllele"}, {"type":
["null", "string"], "name": "id"}, {"type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "id"}, {"type": ["null", "string"], "name": "source"}], "type": "record", "name":
"Xref"}, "type": "array"}], "name": "xrefs"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "hgvs"}, {"type": ["null", "string"], "name": "displayConsequenceType"},
{"default": [], "type": {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"},
{"type": ["null", "string"], "name": "ensemblGeneId"}, {"type": ["null", "string"], "name":
"ensemblTranscriptId"}, {"type": ["null", "string"], "name": "strand"}, {"type": ["null", "string"],
"name": "biotype"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name":
"number"}, {"type": ["null", "float"], "name": "percentage"}], "type": "record", "name":
"ExonOverlap"}, "type": "array"}], "name": "exonOverlap"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "transcriptAnnotationFlags"}, {"type": ["null", "int"], "name":
"cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"}, {"type": ["null", "string"],
"name": "codon"}, {"type": ["null", {"fields": [{"default": null, "type": ["null", "string"],
"name": "uniprotAccession"}, {"default": null, "type": ["null", "string"], "name": "uniprotName"},
{"type": "int", "name": "position"}, {"type": ["null", "string"], "name": "reference"}, {"type":
["null", "string"], "name": "alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"},
{"type": ["null", "string"], "name": "functionalDescription"}, {"type": ["null", {"items":
{"fields": [{"type": "double", "name": "score"}, {"type": "string", "name": "source"}, {"type":
["null", "string"], "name": "description"}], "type": "record", "name": "Score"}, "type": "array"}],
"name": "substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"keywords"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"},
{"type": "int", "name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}], "type": "record", "name":
"ProteinFeature"}, "type": "array"}], "name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"}, {"type": {"items": {"fields":
[{"type": "string", "name": "accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type":
"record", "name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type":
["null", {"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record",
"name": "PopulationFrequency"}, "type": "array"}], "name": "populationFrequencies"}, {"type":
["null", "string"], "name": "minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"},
{"type": ["null", {"items": "Score", "type": "array"}], "name": "conservation"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"],
"name": "transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type":
["null", "string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP",
"DOWN"], "type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null",
"float"], "name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}], "type": "record", "name": "VariantAnnotation"}], "name":
"annotation"}]}, "name": "variant"}]}, "type": "array"}, "name": "variants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': VariantRepresentation,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': VariantRepresentation,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'variants'
    ]

    def __init__(self, **kwargs):
        self.variants = kwargs.get(
            'variants', [])


class VariantAnnotation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantAnnotation", "fields": [{"type": ["null", "string"], "name": "chromosome"}, {"type":
["null", "int"], "name": "start"}, {"type": ["null", "int"], "name": "end"}, {"type": ["null",
"string"], "name": "reference"}, {"type": ["null", "string"], "name": "alternate"}, {"type":
["null", "string"], "name": "ancestralAllele"}, {"type": ["null", "string"], "name": "id"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "source"}], "type": "record", "name": "Xref"}, "type": "array"}], "name":
"xrefs"}, {"type": ["null", {"items": "string", "type": "array"}], "name": "hgvs"}, {"type":
["null", "string"], "name": "displayConsequenceType"}, {"default": [], "type": {"items": {"fields":
[{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"ensemblGeneId"}, {"type": ["null", "string"], "name": "ensemblTranscriptId"}, {"type": ["null",
"string"], "name": "strand"}, {"type": ["null", "string"], "name": "biotype"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "number"}, {"type": ["null", "float"],
"name": "percentage"}], "type": "record", "name": "ExonOverlap"}, "type": "array"}], "name":
"exonOverlap"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"transcriptAnnotationFlags"}, {"type": ["null", "int"], "name": "cdnaPosition"}, {"type": ["null",
"int"], "name": "cdsPosition"}, {"type": ["null", "string"], "name": "codon"}, {"type": ["null",
{"fields": [{"default": null, "type": ["null", "string"], "name": "uniprotAccession"}, {"default":
null, "type": ["null", "string"], "name": "uniprotName"}, {"type": "int", "name": "position"},
{"type": ["null", "string"], "name": "reference"}, {"type": ["null", "string"], "name":
"alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"}, {"type": ["null", "string"],
"name": "functionalDescription"}, {"type": ["null", {"items": {"fields": [{"type": "double", "name":
"score"}, {"type": "string", "name": "source"}, {"type": ["null", "string"], "name":
"description"}], "type": "record", "name": "Score"}, "type": "array"}], "name":
"substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name": "keywords"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": "int",
"name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"], "name": "type"},
{"type": ["null", "string"], "name": "description"}], "type": "record", "name": "ProteinFeature"},
"type": "array"}], "name": "features"}], "type": "record", "name": "ProteinVariantAnnotation"}],
"name": "proteinVariantAnnotation"}, {"type": {"items": {"fields": [{"type": "string", "name":
"accession"}, {"type": "string", "name": "name"}], "type": "record", "name":
"SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type": "record",
"name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type": ["null",
{"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name": "population"},
{"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"}, {"type": "float",
"name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type": ["null", "float"],
"name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name": "hetGenotypeFreq"}, {"type":
["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record", "name": "PopulationFrequency"},
"type": "array"}], "name": "populationFrequencies"}, {"type": ["null", "string"], "name":
"minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"}, {"type": ["null", {"items":
"Score", "type": "array"}], "name": "conservation"}, {"type": ["null", {"items": {"fields":
[{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type": ["null",
"string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"}, {"type":
["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP", "DOWN"],
"type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null", "float"],
"name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "ancestralAllele",
        "chromosome",
        "conservation",
        "cytoband",
        "displayConsequenceType",
        "drugs",
        "end",
        "functionalScore",
        "geneDrugInteraction",
        "geneExpression",
        "geneTraitAssociation",
        "hgvs",
        "id",
        "minorAllele",
        "minorAlleleFreq",
        "populationFrequencies",
        "reference",
        "repeat",
        "start",
        "traitAssociation",
        "variantTraitAssociation",
        "xrefs",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAttributes': AdditionalAttribute,
            'consequenceTypes': ConsequenceType,
            'conservation': Score,
            'cytoband': Cytoband,
            'drugs': Drug,
            'functionalScore': Score,
            'geneDrugInteraction': GeneDrugInteraction,
            'geneExpression': Expression,
            'geneTraitAssociation': GeneTraitAssociation,
            'populationFrequencies': PopulationFrequency,
            'repeat': Repeat,
            'traitAssociation': EvidenceEntry,
            'variantTraitAssociation': VariantTraitAssociation,
            'xrefs': Xref,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAttributes': AdditionalAttribute,
            'consequenceTypes': ConsequenceType,
            'conservation': Score,
            'cytoband': Cytoband,
            'drugs': Drug,
            'functionalScore': Score,
            'geneDrugInteraction': GeneDrugInteraction,
            'geneExpression': Expression,
            'geneTraitAssociation': GeneTraitAssociation,
            'populationFrequencies': PopulationFrequency,
            'repeat': Repeat,
            'traitAssociation': EvidenceEntry,
            'variantTraitAssociation': VariantTraitAssociation,
            'xrefs': Xref,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalAttributes', 'alternate', 'ancestralAllele',
        'chromosome', 'consequenceTypes', 'conservation', 'cytoband',
        'displayConsequenceType', 'drugs', 'end', 'functionalScore',
        'geneDrugInteraction', 'geneExpression',
        'geneTraitAssociation', 'hgvs', 'id', 'minorAllele',
        'minorAlleleFreq', 'populationFrequencies', 'reference',
        'repeat', 'start', 'traitAssociation',
        'variantTraitAssociation', 'xrefs'
    ]

    def __init__(self, **kwargs):
        self.additionalAttributes = kwargs.get(
            'additionalAttributes', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.ancestralAllele = kwargs.get(
            'ancestralAllele', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.consequenceTypes = kwargs.get(
            'consequenceTypes', [])
        self.conservation = kwargs.get(
            'conservation', None)
        self.cytoband = kwargs.get(
            'cytoband', None)
        self.displayConsequenceType = kwargs.get(
            'displayConsequenceType', None)
        self.drugs = kwargs.get(
            'drugs', None)
        self.end = kwargs.get(
            'end', None)
        self.functionalScore = kwargs.get(
            'functionalScore', None)
        self.geneDrugInteraction = kwargs.get(
            'geneDrugInteraction', None)
        self.geneExpression = kwargs.get(
            'geneExpression', None)
        self.geneTraitAssociation = kwargs.get(
            'geneTraitAssociation', None)
        self.hgvs = kwargs.get(
            'hgvs', None)
        self.id = kwargs.get(
            'id', None)
        self.minorAllele = kwargs.get(
            'minorAllele', None)
        self.minorAlleleFreq = kwargs.get(
            'minorAlleleFreq', None)
        self.populationFrequencies = kwargs.get(
            'populationFrequencies', None)
        self.reference = kwargs.get(
            'reference', None)
        self.repeat = kwargs.get(
            'repeat', None)
        self.start = kwargs.get(
            'start', None)
        self.traitAssociation = kwargs.get(
            'traitAssociation', None)
        self.variantTraitAssociation = kwargs.get(
            'variantTraitAssociation', None)
        self.xrefs = kwargs.get(
            'xrefs', None)


class VariantAttributes(ProtocolElement):
    """
    Some additional variant attributes
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantAttributes", "fields":
[{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"],
"name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc":
"", "type": ["null", {"values": "string", "type": "map"}], "name": "others"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "fdp50",
        "ihp",
        "others",
        "recurrentlyReported",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fdp50', 'ihp', 'others', 'recurrentlyReported'
    ]

    def __init__(self, **kwargs):
        self.fdp50 = kwargs.get(
            'fdp50', None)
        self.ihp = kwargs.get(
            'ihp', None)
        self.others = kwargs.get(
            'others', None)
        self.recurrentlyReported = kwargs.get(
            'recurrentlyReported', None)


class VariantAvro(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantAvro",
"fields": [{"doc": "", "type": ["null", "string"], "name": "id"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "names"}, {"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name":
"end"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string", "name":
"alternate"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "strand"},
{"default": null, "doc": "", "type": ["null", {"fields": [{"type": ["null", "int"], "name":
"ciStartLeft"}, {"type": ["null", "int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name":
"ciEndLeft"}, {"type": ["null", "int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"],
"name": "copyNumber"}, {"doc": "", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type":
["null", "string"], "name": "rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols":
["COPY_NUMBER_GAIN", "COPY_NUMBER_LOSS", "TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name":
"StructuralVariantType"}], "name": "type"}], "type": "record", "name": "StructuralVariation"}],
"name": "sv"}, {"doc": "", "type": "int", "name": "length"}, {"doc": "", "type": {"symbols": ["SNV",
"SNP", "MNV", "MNP", "INDEL", "SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV",
"DUPLICATION", "BREAKEND", "NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name":
"VariantType"}, "name": "type"}, {"default": null, "doc": "", "type": ["null", {"values": {"items":
"string", "type": "array"}, "type": "map"}], "name": "hgvs"}, {"doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "",
"type": ["null", "string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name":
"files"}, {"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "",
"type": ["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"type": "VariantType", "name":
"type"}], "type": "record", "name": "AlternateCoordinate"}, "type": "array"}], "name":
"secondaryAlternates"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "format"},
{"doc": "", "type": {"items": {"items": "string", "type": "array"}, "type": "array"}, "name":
"samplesData"}, {"doc": "", "type": {"values": {"fields": [{"type": ["null", "string"], "name":
"refAllele"}, {"type": ["null", "string"], "name": "altAllele"}, {"type": ["null", "int"], "name":
"refAlleleCount"}, {"type": ["null", "int"], "name": "altAlleleCount"}, {"type": {"values": "int",
"type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesCount"}, {"type": {"values": "float", "type": "map", "java-key-class":
"org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesFreq"}, {"type": ["null", "int"],
"name": "missingAlleles"}, {"type": ["null", "int"], "name": "missingGenotypes"}, {"type": ["null",
"float"], "name": "refAlleleFreq"}, {"type": ["null", "float"], "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "maf"}, {"type": ["null", "float"], "name": "mgf"}, {"type": ["null",
"string"], "name": "mafAllele"}, {"type": ["null", "string"], "name": "mgfGenotype"}, {"type":
["null", "boolean"], "name": "passedFilters"}, {"type": ["null", "int"], "name": "mendelianErrors"},
{"type": ["null", "float"], "name": "casesPercentDominant"}, {"type": ["null", "float"], "name":
"controlsPercentDominant"}, {"type": ["null", "float"], "name": "casesPercentRecessive"}, {"type":
["null", "float"], "name": "controlsPercentRecessive"}, {"type": ["null", "float"], "name":
"quality"}, {"type": ["null", "int"], "name": "numSamples"}, {"default": null, "type": ["null",
"VariantType"], "name": "variantType"}, {"default": null, "type": ["null", {"fields": [{"type":
["null", "float"], "name": "chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null",
"int"], "name": "n"}, {"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"],
"name": "n_Aa_10"}, {"type": ["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"],
"name": "e_AA_11"}, {"type": ["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"],
"name": "e_aa_00"}, {"type": ["null", "float"], "name": "p"}, {"type": ["null", "float"], "name":
"q"}], "type": "record", "name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record",
"name": "VariantStats"}, "type": "map"}, "name": "stats"}], "type": "record", "name": "StudyEntry"},
"type": "array"}, "name": "studies"}, {"default": null, "doc": "", "type": ["null", {"fields":
[{"type": ["null", "string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"},
{"type": ["null", "int"], "name": "end"}, {"type": ["null", "string"], "name": "reference"},
{"type": ["null", "string"], "name": "alternate"}, {"type": ["null", "string"], "name":
"ancestralAllele"}, {"type": ["null", "string"], "name": "id"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null", "string"], "name":
"source"}], "type": "record", "name": "Xref"}, "type": "array"}], "name": "xrefs"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "hgvs"}, {"type": ["null", "string"],
"name": "displayConsequenceType"}, {"default": [], "type": {"items": {"fields": [{"type": ["null",
"string"], "name": "geneName"}, {"type": ["null", "string"], "name": "ensemblGeneId"}, {"type":
["null", "string"], "name": "ensemblTranscriptId"}, {"type": ["null", "string"], "name": "strand"},
{"type": ["null", "string"], "name": "biotype"}, {"type": ["null", {"items": {"fields": [{"type":
["null", "string"], "name": "number"}, {"type": ["null", "float"], "name": "percentage"}], "type":
"record", "name": "ExonOverlap"}, "type": "array"}], "name": "exonOverlap"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "transcriptAnnotationFlags"}, {"type": ["null",
"int"], "name": "cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"}, {"type": ["null",
"string"], "name": "codon"}, {"type": ["null", {"fields": [{"default": null, "type": ["null",
"string"], "name": "uniprotAccession"}, {"default": null, "type": ["null", "string"], "name":
"uniprotName"}, {"type": "int", "name": "position"}, {"type": ["null", "string"], "name":
"reference"}, {"type": ["null", "string"], "name": "alternate"}, {"type": ["null", "string"],
"name": "uniprotVariantId"}, {"type": ["null", "string"], "name": "functionalDescription"}, {"type":
["null", {"items": {"fields": [{"type": "double", "name": "score"}, {"type": "string", "name":
"source"}, {"type": ["null", "string"], "name": "description"}], "type": "record", "name": "Score"},
"type": "array"}], "name": "substitutionScores"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "keywords"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "id"}, {"type": "int", "name": "start"}, {"type": "int", "name": "end"}, {"type": ["null",
"string"], "name": "type"}, {"type": ["null", "string"], "name": "description"}], "type": "record",
"name": "ProteinFeature"}, "type": "array"}], "name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"}, {"type": {"items": {"fields":
[{"type": "string", "name": "accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type":
"record", "name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type":
["null", {"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record",
"name": "PopulationFrequency"}, "type": "array"}], "name": "populationFrequencies"}, {"type":
["null", "string"], "name": "minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"},
{"type": ["null", {"items": "Score", "type": "array"}], "name": "conservation"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"],
"name": "transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type":
["null", "string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP",
"DOWN"], "type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null",
"float"], "name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}], "type": "record", "name": "VariantAnnotation"}], "name":
"annotation"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "chromosome",
        "end",
        "id",
        "length",
        "reference",
        "start",
        "studies",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotation': VariantAnnotation,
            'studies': StudyEntry,
            'sv': StructuralVariation,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotation': VariantAnnotation,
            'studies': StudyEntry,
            'sv': StructuralVariation,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'annotation', 'chromosome', 'end', 'hgvs', 'id',
        'length', 'names', 'reference', 'start', 'strand', 'studies',
        'sv', 'type'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', None)
        self.annotation = kwargs.get(
            'annotation', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.end = kwargs.get(
            'end', None)
        self.hgvs = kwargs.get(
            'hgvs', None)
        self.id = kwargs.get(
            'id', None)
        self.length = kwargs.get(
            'length', None)
        self.names = kwargs.get(
            'names', [])
        self.reference = kwargs.get(
            'reference', None)
        self.start = kwargs.get(
            'start', None)
        self.strand = kwargs.get(
            'strand', None)
        self.studies = kwargs.get(
            'studies', None)
        self.sv = kwargs.get(
            'sv', None)
        self.type = kwargs.get(
            'type', None)


class VariantCall(ProtocolElement):
    """
    This object holds all the information related to a specific
    variant observation in a given sample, including     zygosity,
    phase, depth of coverage, variant allele frequency and allele
    origins.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantCall", "fields":
[{"doc": "", "type": "string", "name": "participantId"}, {"doc": "", "type": "string", "name":
"sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous", "heterozygous",
"alternate_homozygous", "missing", "half_missing_reference", "half_missing_alternate",
"alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "", "type": "enum", "name":
"Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"], "name": "phaseSet"}, {"doc":
"", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": {"items": {"symbols": ["de_novo_variant", "germline_variant", "maternal_variant",
"paternal_variant", "pedigree_specific_variant", "population_specific_variant", "somatic_variant"],
"doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alleleOrigins",
        "depthAlternate",
        "depthReference",
        "participantId",
        "phaseSet",
        "sampleId",
        "vaf",
        "zygosity",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alleleOrigins', 'depthAlternate', 'depthReference',
        'participantId', 'phaseSet', 'sampleId', 'vaf', 'zygosity'
    ]

    def __init__(self, **kwargs):
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.depthAlternate = kwargs.get(
            'depthAlternate', None)
        self.depthReference = kwargs.get(
            'depthReference', None)
        self.participantId = kwargs.get(
            'participantId', None)
        self.phaseSet = kwargs.get(
            'phaseSet', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.vaf = kwargs.get(
            'vaf', None)
        self.zygosity = kwargs.get(
            'zygosity', None)


class VariantClassification(ProtocolElement):
    """
    The variant classification according to different properties.
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "doc": "",
"type": "enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "",
"type": ["null", {"symbols": ["responsive", "resistant", "toxicity", "indication",
"contraindication", "dosing", "increased_monitoring", "efficacy"], "doc": "", "type": "enum",
"name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type":
["null", {"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "clinicalSignificance",
        "drugResponseClassification",
        "functionalEffect",
        "traitAssociation",
        "tumorigenesisClassification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'clinicalSignificance', 'drugResponseClassification',
        'functionalEffect', 'traitAssociation',
        'tumorigenesisClassification'
    ]

    def __init__(self, **kwargs):
        self.clinicalSignificance = kwargs.get(
            'clinicalSignificance', None)
        self.drugResponseClassification = kwargs.get(
            'drugResponseClassification', None)
        self.functionalEffect = kwargs.get(
            'functionalEffect', None)
        self.traitAssociation = kwargs.get(
            'traitAssociation', None)
        self.tumorigenesisClassification = kwargs.get(
            'tumorigenesisClassification', None)


class VariantConsequence(ProtocolElement):
    """
    A variant consequence as defined by the Sequence Ontology (SO)
    (e.g.: id = SO:0001816 ; name = non synonymous)     NOTE: this
    record is equivalent to OpenCB's `ConsequenceType`, but we want to
    avoid naming collisions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantConsequence",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"],
"name": "name"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "name",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'name'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.name = kwargs.get(
            'name', None)


class VariantCoordinates(ProtocolElement):
    """
    The variant coordinates representing uniquely a small variant.
    No multi-allelic variant supported, alternate only represents one
    alternate allele.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantCoordinates",
"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name":
"position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string",
"name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type":
"enum", "name": "Assembly"}, "name": "assembly"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "assembly",
        "chromosome",
        "position",
        "reference",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'assembly', 'chromosome', 'position', 'reference'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', None)
        self.assembly = kwargs.get(
            'assembly', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.position = kwargs.get(
            'position', None)
        self.reference = kwargs.get(
            'reference', None)


class VariantFileHeader(ProtocolElement):
    """
    Variant File Header. Contains simple and complex metadata lines
    describing the content of the file.     This header matches with
    the VCF header.     A header may have multiple Simple or Complex
    lines with the same key
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantFileHeader", "fields": [{"type": "string", "name": "version"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "", "type":
"string", "name": "id"}, {"default": null, "doc": "", "type": ["null", "string"], "name":
"description"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "number"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "type"}, {"default": {}, "doc": "",
"type": {"values": "string", "type": "map"}, "name": "genericFields"}], "type": "record", "name":
"VariantFileHeaderComplexLine"}, "type": "array"}, "name": "complexLines"}, {"default": [], "doc":
"", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "", "type":
"string", "name": "value"}], "type": "record", "name": "VariantFileHeaderSimpleLine"}, "type":
"array"}, "name": "simpleLines"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'complexLines': VariantFileHeaderComplexLine,
            'simpleLines': VariantFileHeaderSimpleLine,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'complexLines': VariantFileHeaderComplexLine,
            'simpleLines': VariantFileHeaderSimpleLine,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'complexLines', 'simpleLines', 'version'
    ]

    def __init__(self, **kwargs):
        self.complexLines = kwargs.get(
            'complexLines', [])
        self.simpleLines = kwargs.get(
            'simpleLines', [])
        self.version = kwargs.get(
            'version', None)


class VariantFileHeaderComplexLine(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantFileHeaderComplexLine", "fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "",
"type": "string", "name": "id"}, {"default": null, "doc": "", "type": ["null", "string"], "name":
"description"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "number"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "type"}, {"default": {}, "doc": "",
"type": {"values": "string", "type": "map"}, "name": "genericFields"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "key",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'description', 'genericFields', 'id', 'key', 'number', 'type'
    ]

    def __init__(self, **kwargs):
        self.description = kwargs.get(
            'description', None)
        self.genericFields = kwargs.get(
            'genericFields', {})
        self.id = kwargs.get(
            'id', None)
        self.key = kwargs.get(
            'key', None)
        self.number = kwargs.get(
            'number', None)
        self.type = kwargs.get(
            'type', None)


class VariantFileHeaderSimpleLine(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantFileHeaderSimpleLine", "fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "",
"type": "string", "name": "value"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "key",
        "value",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'key', 'value'
    ]

    def __init__(self, **kwargs):
        self.key = kwargs.get(
            'key', None)
        self.value = kwargs.get(
            'value', None)


class VariantFileMetadata(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantFileMetadata", "fields": [{"doc": "", "type": "string", "name": "id"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "path"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "sampleIds"}, {"default": null, "doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantSetStats", "fields": [{"doc": "", "type": "int",
"name": "numVariants"}, {"doc": "", "type": "int", "name": "numSamples"}, {"doc": "", "type": "int",
"name": "numPass"}, {"doc": "", "type": "float", "name": "tiTvRatio"}, {"doc": "", "type": "float",
"name": "meanQuality"}, {"doc": "", "type": "float", "name": "stdDevQuality"}, {"default": [],
"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantsByFrequency", "fields":
[{"doc": "", "type": "float", "name": "startFrequency"}, {"doc": "", "type": "float", "name":
"endFrequency"}, {"doc": "", "type": "int", "name": "count"}]}, "type": "array"}, "name":
"numRareVariants"}, {"default": {}, "doc": "", "type": {"values": "int", "type": "map"}, "name":
"variantTypeCounts"}, {"default": {}, "doc": "", "type": {"values": "int", "type": "map"}, "name":
"variantBiotypeCounts"}, {"default": {}, "doc": "", "type": {"values": "int", "type": "map"},
"name": "consequenceTypesCounts"}, {"default": {}, "doc": "", "type": {"values": {"fields": [{"doc":
"", "type": "int", "name": "count"}, {"doc": "", "type": "float", "name": "density"}], "type":
"record", "name": "ChromosomeStats"}, "type": "map"}, "name": "chromosomeStats"}]}], "name":
"stats"}, {"default": null, "doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantFileHeader", "fields": [{"type": "string", "name": "version"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "", "type":
"string", "name": "id"}, {"default": null, "doc": "", "type": ["null", "string"], "name":
"description"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "number"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "type"}, {"default": {}, "doc": "",
"type": {"values": "string", "type": "map"}, "name": "genericFields"}], "type": "record", "name":
"VariantFileHeaderComplexLine"}, "type": "array"}, "name": "complexLines"}, {"default": [], "doc":
"", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "", "type":
"string", "name": "value"}], "type": "record", "name": "VariantFileHeaderSimpleLine"}, "type":
"array"}, "name": "simpleLines"}]}], "name": "header"}, {"default": {}, "doc": "", "type":
{"values": "string", "type": "map"}, "name": "attributes"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'header': VariantFileHeader,
            'stats': VariantSetStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'header': VariantFileHeader,
            'stats': VariantSetStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'attributes', 'header', 'id', 'path', 'sampleIds', 'stats'
    ]

    def __init__(self, **kwargs):
        self.attributes = kwargs.get(
            'attributes', {})
        self.header = kwargs.get(
            'header', None)
        self.id = kwargs.get(
            'id', None)
        self.path = kwargs.get(
            'path', None)
        self.sampleIds = kwargs.get(
            'sampleIds', [])
        self.stats = kwargs.get(
            'stats', None)


class VariantFunctionalEffect(object):
    """
    Variant effect with Sequence Ontology terms.  * `SO_0002052`:
    dominant_negative_variant
    (http://purl.obolibrary.org/obo/SO_0002052) * `SO_0002053`:
    gain_of_function_variant
    (http://purl.obolibrary.org/obo/SO_0002053) * `SO_0001773`:
    lethal_variant (http://purl.obolibrary.org/obo/SO_0001773) *
    `SO_0002054`: loss_of_function_variant
    (http://purl.obolibrary.org/obo/SO_0002054) * `SO_0001786`:
    loss_of_heterozygosity (http://purl.obolibrary.org/obo/SO_0001786)
    * `SO_0002055`: null_variant
    (http://purl.obolibrary.org/obo/SO_0002055)
    """
    dominant_negative_variant = "dominant_negative_variant"
    gain_of_function_variant = "gain_of_function_variant"
    lethal_variant = "lethal_variant"
    loss_of_function_variant = "loss_of_function_variant"
    loss_of_heterozygosity = "loss_of_heterozygosity"
    null_variant = "null_variant"

    def __hash__(self):
        return str(self).__hash__()


class VariantGlobalStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro.legacy", "type": "record", "name":
"VariantGlobalStats", "fields": [{"type": "int", "name": "numRecords"}, {"type": "int", "name":
"samplesCount"}, {"type": "int", "name": "passCount"}, {"type": "int", "name": "transitionsCount"},
{"type": "int", "name": "transversionsCount"}, {"type": "double", "name": "meanQuality"}, {"type":
{"values": "int", "type": "map"}, "name": "variantTypeCounts"}, {"type": {"values": "int", "type":
"map"}, "name": "chromosomeCounts"}, {"type": {"values": "int", "type": "map"}, "name":
"consequenceTypesCount"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chromosomeCounts",
        "consequenceTypesCount",
        "meanQuality",
        "numRecords",
        "passCount",
        "samplesCount",
        "transitionsCount",
        "transversionsCount",
        "variantTypeCounts",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chromosomeCounts', 'consequenceTypesCount', 'meanQuality',
        'numRecords', 'passCount', 'samplesCount', 'transitionsCount',
        'transversionsCount', 'variantTypeCounts'
    ]

    def __init__(self, **kwargs):
        self.chromosomeCounts = kwargs.get(
            'chromosomeCounts', None)
        self.consequenceTypesCount = kwargs.get(
            'consequenceTypesCount', None)
        self.meanQuality = kwargs.get(
            'meanQuality', None)
        self.numRecords = kwargs.get(
            'numRecords', None)
        self.passCount = kwargs.get(
            'passCount', None)
        self.samplesCount = kwargs.get(
            'samplesCount', None)
        self.transitionsCount = kwargs.get(
            'transitionsCount', None)
        self.transversionsCount = kwargs.get(
            'transversionsCount', None)
        self.variantTypeCounts = kwargs.get(
            'variantTypeCounts', None)


class VariantGroupLevelQuestions(ProtocolElement):
    """
    The variant group level questions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantGroupLevelQuestions",
"fields": [{"doc": "", "type": "int", "name": "variantGroup"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantLevelQuestions", "fields": [{"doc": "", "type": "string",
"name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name": "confirmationOutcome"},
{"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"},
"name": "reportingQuestion"}, {"doc": "", "type": {"symbols": ["pathogenic_variant",
"likely_pathogenic_variant", "variant_of_unknown_clinical_significance", "likely_benign_variant",
"benign_variant", "not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name":
"acmgClassification"}, {"doc": "", "type": "string", "name": "publications"}]}, "type": "array"},
"name": "variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"],
"type": "enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionability",
        "clinicalUtility",
        "phenotypesExplained",
        "phenotypesSolved",
        "variantGroup",
        "variantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantLevelQuestions': VariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantLevelQuestions': VariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionability', 'clinicalUtility', 'phenotypesExplained',
        'phenotypesSolved', 'variantGroup', 'variantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.actionability = kwargs.get(
            'actionability', None)
        self.clinicalUtility = kwargs.get(
            'clinicalUtility', None)
        self.phenotypesExplained = kwargs.get(
            'phenotypesExplained', None)
        self.phenotypesSolved = kwargs.get(
            'phenotypesSolved', None)
        self.variantGroup = kwargs.get(
            'variantGroup', None)
        self.variantLevelQuestions = kwargs.get(
            'variantLevelQuestions', None)


class VariantHardyWeinbergStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantHardyWeinbergStats", "fields": [{"type": ["null", "float"], "name": "chi2"}, {"type":
["null", "float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"}, {"type": ["null",
"int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name": "n_Aa_10"}, {"type": ["null", "int"],
"name": "n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type": ["null", "float"],
"name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"}, {"type": ["null", "float"],
"name": "p"}, {"type": ["null", "float"], "name": "q"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chi2",
        "e_AA_11",
        "e_Aa_10",
        "e_aa_00",
        "n",
        "n_AA_11",
        "n_Aa_10",
        "n_aa_00",
        "p",
        "pValue",
        "q",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chi2', 'e_AA_11', 'e_Aa_10', 'e_aa_00', 'n', 'n_AA_11',
        'n_Aa_10', 'n_aa_00', 'p', 'pValue', 'q'
    ]

    def __init__(self, **kwargs):
        self.chi2 = kwargs.get(
            'chi2', None)
        self.e_AA_11 = kwargs.get(
            'e_AA_11', None)
        self.e_Aa_10 = kwargs.get(
            'e_Aa_10', None)
        self.e_aa_00 = kwargs.get(
            'e_aa_00', None)
        self.n = kwargs.get(
            'n', None)
        self.n_AA_11 = kwargs.get(
            'n_AA_11', None)
        self.n_Aa_10 = kwargs.get(
            'n_Aa_10', None)
        self.n_aa_00 = kwargs.get(
            'n_aa_00', None)
        self.p = kwargs.get(
            'p', None)
        self.pValue = kwargs.get(
            'pValue', None)
        self.q = kwargs.get(
            'q', None)


class VariantLevelQuestions(ProtocolElement):
    """
    The variant level questions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name":
"confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name": "reportingQuestion"},
{"doc": "", "type": {"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name": "acmgClassification"},
{"doc": "", "type": "string", "name": "publications"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "acmgClassification",
        "confirmationDecision",
        "confirmationOutcome",
        "publications",
        "reportingQuestion",
        "variantDetails",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'acmgClassification', 'confirmationDecision',
        'confirmationOutcome', 'publications', 'reportingQuestion',
        'variantDetails'
    ]

    def __init__(self, **kwargs):
        self.acmgClassification = kwargs.get(
            'acmgClassification', None)
        self.confirmationDecision = kwargs.get(
            'confirmationDecision', None)
        self.confirmationOutcome = kwargs.get(
            'confirmationOutcome', None)
        self.publications = kwargs.get(
            'publications', None)
        self.reportingQuestion = kwargs.get(
            'reportingQuestion', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)


class VariantMetadata(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantMetadata", "fields": [{"default": "v1.0.0", "doc": "", "type": "string", "name": "version"},
{"default": null, "doc": "", "type": ["null", {"namespace": "org.opencb.biodata.models.metadata",
"type": "record", "name": "Species", "fields": [{"doc": "", "type": "string", "name": "id"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "scientificName"}, {"default":
null, "type": ["null", "string"], "name": "taxonomyId"}, {"default": null, "type": ["null",
"string"], "name": "strain"}, {"default": null, "type": ["null", "string"], "name": "assembly"}]}],
"name": "species"}, {"default": null, "doc": "", "type": ["null", "string"], "name":
"creationDate"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "description"},
{"default": [], "doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "description"}, {"default":
"NONE", "doc": "", "type": {"symbols": ["NONE", "BASIC", "EVS", "EXAC"], "doc": "", "type": "enum",
"name": "Aggregation"}, "name": "aggregation"}, {"default": null, "doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantFileHeader", "fields": [{"type": "string", "name":
"version"}, {"default": [], "doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string",
"name": "key"}, {"doc": "", "type": "string", "name": "id"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "description"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "number"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "type"},
{"default": {}, "doc": "", "type": {"values": "string", "type": "map"}, "name": "genericFields"}],
"type": "record", "name": "VariantFileHeaderComplexLine"}, "type": "array"}, "name":
"complexLines"}, {"default": [], "doc": "", "type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "key"}, {"doc": "", "type": "string", "name": "value"}], "type": "record", "name":
"VariantFileHeaderSimpleLine"}, "type": "array"}, "name": "simpleLines"}]}], "name":
"aggregatedHeader"}, {"default": [], "doc": "", "type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "id"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "path"},
{"default": [], "doc": "", "type": {"items": "string", "type": "array"}, "name": "sampleIds"},
{"default": null, "doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantSetStats", "fields": [{"doc": "", "type": "int", "name": "numVariants"}, {"doc": "", "type":
"int", "name": "numSamples"}, {"doc": "", "type": "int", "name": "numPass"}, {"doc": "", "type":
"float", "name": "tiTvRatio"}, {"doc": "", "type": "float", "name": "meanQuality"}, {"doc": "",
"type": "float", "name": "stdDevQuality"}, {"default": [], "doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "VariantsByFrequency", "fields": [{"doc": "", "type": "float", "name":
"startFrequency"}, {"doc": "", "type": "float", "name": "endFrequency"}, {"doc": "", "type": "int",
"name": "count"}]}, "type": "array"}, "name": "numRareVariants"}, {"default": {}, "doc": "", "type":
{"values": "int", "type": "map"}, "name": "variantTypeCounts"}, {"default": {}, "doc": "", "type":
{"values": "int", "type": "map"}, "name": "variantBiotypeCounts"}, {"default": {}, "doc": "",
"type": {"values": "int", "type": "map"}, "name": "consequenceTypesCounts"}, {"default": {}, "doc":
"", "type": {"values": {"fields": [{"doc": "", "type": "int", "name": "count"}, {"doc": "", "type":
"float", "name": "density"}], "type": "record", "name": "ChromosomeStats"}, "type": "map"}, "name":
"chromosomeStats"}]}], "name": "stats"}, {"default": null, "doc": "", "type": ["null",
"VariantFileHeader"], "name": "header"}, {"default": {}, "doc": "", "type": {"values": "string",
"type": "map"}, "name": "attributes"}], "type": "record", "name": "VariantFileMetadata"}, "type":
"array"}, "name": "files"}, {"default": [], "doc": "", "type": {"items": {"namespace":
"org.opencb.biodata.models.metadata", "type": "record", "name": "Individual", "fields": [{"doc": "",
"type": "string", "name": "id"}, {"default": null, "type": ["null", "string"], "name": "family"},
{"default": null, "type": ["null", "string"], "name": "father"}, {"default": null, "type": ["null",
"string"], "name": "mother"}, {"default": null, "type": ["null", "string"], "name": "sex"},
{"default": null, "type": ["null", "string"], "name": "phenotype"}, {"default": [], "type":
{"items": {"fields": [{"doc": "", "type": "string", "name": "id"}, {"default": {}, "doc": "",
"type": {"values": "string", "type": "map"}, "name": "annotations"}], "type": "record", "name":
"Sample"}, "type": "array"}, "name": "samples"}]}, "type": "array"}, "name": "individuals"},
{"default": [], "doc": "", "type": {"items": {"namespace": "org.opencb.biodata.models.metadata",
"type": "record", "name": "Cohort", "fields": [{"type": "string", "name": "id"}, {"default": [],
"type": {"items": "string", "type": "array"}, "name": "sampleIds"}, {"type": {"symbols":
["CASE_CONTROL", "CASE_SET", "CONTROL_SET", "PAIRED", "TIME_SERIES", "FAMILY", "TRIO",
"MISCELLANEOUS", "UNKNOWN"], "type": "enum", "name": "SampleSetType"}, "name": "sampleSetType"}]},
"type": "array"}, "name": "cohorts"}, {"doc": "", "type":
"org.opencb.biodata.models.metadata.SampleSetType", "name": "sampleSetType"}, {"default": null,
"doc": "", "type": ["null", {"fields": [{"default": {}, "type": {"values": "VariantSetStats",
"type": "map"}, "name": "sampleStats"}, {"default": {}, "type": {"values": "VariantSetStats",
"type": "map"}, "name": "cohortStats"}], "type": "record", "name": "VariantStudyStats"}], "name":
"stats"}, {"default": {}, "doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}], "type": "record", "name": "VariantStudyMetadata"}, "type": "array"}, "name":
"studies"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'species': Species,
            'studies': VariantStudyMetadata,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'species': Species,
            'studies': VariantStudyMetadata,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'creationDate', 'description', 'species', 'studies', 'version'
    ]

    def __init__(self, **kwargs):
        self.creationDate = kwargs.get(
            'creationDate', None)
        self.description = kwargs.get(
            'description', None)
        self.species = kwargs.get(
            'species', None)
        self.studies = kwargs.get(
            'studies', [])
        self.version = kwargs.get(
            'version', 'v1.0.0')


class VariantRepresentation(ProtocolElement):
    """
    A variant represented in a given assembly
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "VariantRepresentation",
"fields": [{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "namespace":
"org.gel.models.report.avro", "type": "enum", "name": "Assembly", "doc": ""}, "name": "assembly"},
{"doc": "", "type": ["null", "string"], "name": "annotatorVersion"}, {"doc": "", "type": ["null",
"string"], "name": "annotationsVersion"}, {"doc": "", "type": {"namespace":
"org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantAvro", "fields":
[{"doc": "", "type": ["null", "string"], "name": "id"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "names"}, {"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc": "",
"type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"default": null, "doc": "", "type": ["null", "string"], "name": "strand"}, {"default": null, "doc":
"", "type": ["null", {"fields": [{"type": ["null", "int"], "name": "ciStartLeft"}, {"type": ["null",
"int"], "name": "ciStartRight"}, {"type": ["null", "int"], "name": "ciEndLeft"}, {"type": ["null",
"int"], "name": "ciEndRight"}, {"doc": "", "type": ["null", "int"], "name": "copyNumber"}, {"doc":
"", "type": ["null", "string"], "name": "leftSvInsSeq"}, {"type": ["null", "string"], "name":
"rightSvInsSeq"}, {"doc": "", "type": ["null", {"symbols": ["COPY_NUMBER_GAIN", "COPY_NUMBER_LOSS",
"TANDEM_DUPLICATION"], "doc": "", "type": "enum", "name": "StructuralVariantType"}], "name":
"type"}], "type": "record", "name": "StructuralVariation"}], "name": "sv"}, {"doc": "", "type":
"int", "name": "length"}, {"doc": "", "type": {"symbols": ["SNV", "SNP", "MNV", "MNP", "INDEL",
"SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV", "DUPLICATION", "BREAKEND",
"NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name": "VariantType"}, "name":
"type"}, {"default": null, "doc": "", "type": ["null", {"values": {"items": "string", "type":
"array"}, "type": "map"}], "name": "hgvs"}, {"doc": "", "type": {"items": {"fields": [{"doc": "",
"type": ["null", "string"], "name": "studyId"}, {"default": [], "doc": "", "type": {"items":
{"fields": [{"doc": "", "type": ["null", "string"], "name": "fileId"}, {"doc": "", "type": ["null",
"string"], "name": "call"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}], "type": "record", "name": "FileEntry"}, "type": "array"}, "name": "files"},
{"default": null, "doc": "", "type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"doc": "", "type": ["null", "int"], "name": "start"}, {"doc": "", "type":
["null", "int"], "name": "end"}, {"doc": "", "type": ["null", "string"], "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"type": "VariantType", "name": "type"}],
"type": "record", "name": "AlternateCoordinate"}, "type": "array"}], "name": "secondaryAlternates"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name": "format"}, {"doc": "", "type":
{"items": {"items": "string", "type": "array"}, "type": "array"}, "name": "samplesData"}, {"doc":
"", "type": {"values": {"fields": [{"type": ["null", "string"], "name": "refAllele"}, {"type":
["null", "string"], "name": "altAllele"}, {"type": ["null", "int"], "name": "refAlleleCount"},
{"type": ["null", "int"], "name": "altAlleleCount"}, {"type": {"values": "int", "type": "map",
"java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesCount"}, {"type":
{"values": "float", "type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"},
"name": "genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"}, {"type": ["null",
"int"], "name": "missingGenotypes"}, {"type": ["null", "float"], "name": "refAlleleFreq"}, {"type":
["null", "float"], "name": "altAlleleFreq"}, {"type": ["null", "float"], "name": "maf"}, {"type":
["null", "float"], "name": "mgf"}, {"type": ["null", "string"], "name": "mafAllele"}, {"type":
["null", "string"], "name": "mgfGenotype"}, {"type": ["null", "boolean"], "name": "passedFilters"},
{"type": ["null", "int"], "name": "mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name": "controlsPercentDominant"}, {"type":
["null", "float"], "name": "casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name": "quality"}, {"type": ["null",
"int"], "name": "numSamples"}, {"default": null, "type": ["null", "VariantType"], "name":
"variantType"}, {"default": null, "type": ["null", {"fields": [{"type": ["null", "float"], "name":
"chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null", "int"], "name": "n"},
{"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"], "name": "n_Aa_10"}, {"type":
["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"], "name": "e_AA_11"}, {"type":
["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"], "name": "e_aa_00"}, {"type":
["null", "float"], "name": "p"}, {"type": ["null", "float"], "name": "q"}], "type": "record",
"name": "VariantHardyWeinbergStats"}], "name": "hw"}], "type": "record", "name": "VariantStats"},
"type": "map"}, "name": "stats"}], "type": "record", "name": "StudyEntry"}, "type": "array"},
"name": "studies"}, {"default": null, "doc": "", "type": ["null", {"fields": [{"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "string"], "name": "reference"}, {"type": ["null",
"string"], "name": "alternate"}, {"type": ["null", "string"], "name": "ancestralAllele"}, {"type":
["null", "string"], "name": "id"}, {"type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "id"}, {"type": ["null", "string"], "name": "source"}], "type": "record", "name":
"Xref"}, "type": "array"}], "name": "xrefs"}, {"type": ["null", {"items": "string", "type":
"array"}], "name": "hgvs"}, {"type": ["null", "string"], "name": "displayConsequenceType"},
{"default": [], "type": {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"},
{"type": ["null", "string"], "name": "ensemblGeneId"}, {"type": ["null", "string"], "name":
"ensemblTranscriptId"}, {"type": ["null", "string"], "name": "strand"}, {"type": ["null", "string"],
"name": "biotype"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name":
"number"}, {"type": ["null", "float"], "name": "percentage"}], "type": "record", "name":
"ExonOverlap"}, "type": "array"}], "name": "exonOverlap"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "transcriptAnnotationFlags"}, {"type": ["null", "int"], "name":
"cdnaPosition"}, {"type": ["null", "int"], "name": "cdsPosition"}, {"type": ["null", "string"],
"name": "codon"}, {"type": ["null", {"fields": [{"default": null, "type": ["null", "string"],
"name": "uniprotAccession"}, {"default": null, "type": ["null", "string"], "name": "uniprotName"},
{"type": "int", "name": "position"}, {"type": ["null", "string"], "name": "reference"}, {"type":
["null", "string"], "name": "alternate"}, {"type": ["null", "string"], "name": "uniprotVariantId"},
{"type": ["null", "string"], "name": "functionalDescription"}, {"type": ["null", {"items":
{"fields": [{"type": "double", "name": "score"}, {"type": "string", "name": "source"}, {"type":
["null", "string"], "name": "description"}], "type": "record", "name": "Score"}, "type": "array"}],
"name": "substitutionScores"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"keywords"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"},
{"type": "int", "name": "start"}, {"type": "int", "name": "end"}, {"type": ["null", "string"],
"name": "type"}, {"type": ["null", "string"], "name": "description"}], "type": "record", "name":
"ProteinFeature"}, "type": "array"}], "name": "features"}], "type": "record", "name":
"ProteinVariantAnnotation"}], "name": "proteinVariantAnnotation"}, {"type": {"items": {"fields":
[{"type": "string", "name": "accession"}, {"type": "string", "name": "name"}], "type": "record",
"name": "SequenceOntologyTerm"}, "type": "array"}, "name": "sequenceOntologyTerms"}], "type":
"record", "name": "ConsequenceType"}, "type": "array"}, "name": "consequenceTypes"}, {"type":
["null", {"items": {"fields": [{"type": "string", "name": "study"}, {"type": "string", "name":
"population"}, {"type": "string", "name": "refAllele"}, {"type": "string", "name": "altAllele"},
{"type": "float", "name": "refAlleleFreq"}, {"type": "float", "name": "altAlleleFreq"}, {"type":
["null", "float"], "name": "refHomGenotypeFreq"}, {"type": ["null", "float"], "name":
"hetGenotypeFreq"}, {"type": ["null", "float"], "name": "altHomGenotypeFreq"}], "type": "record",
"name": "PopulationFrequency"}, "type": "array"}], "name": "populationFrequencies"}, {"type":
["null", "string"], "name": "minorAllele"}, {"type": ["null", "float"], "name": "minorAlleleFreq"},
{"type": ["null", {"items": "Score", "type": "array"}], "name": "conservation"}, {"type": ["null",
{"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"],
"name": "transcriptId"}, {"type": ["null", "string"], "name": "experimentalFactor"}, {"type":
["null", "string"], "name": "factorValue"}, {"type": ["null", "string"], "name": "experimentId"},
{"type": ["null", "string"], "name": "technologyPlatform"}, {"type": ["null", {"symbols": ["UP",
"DOWN"], "type": "enum", "name": "ExpressionCall"}], "name": "expression"}, {"type": ["null",
"float"], "name": "pvalue"}], "type": "record", "name": "Expression"}, "type": "array"}], "name":
"geneExpression"}, {"type": ["null", {"items": {"fields": [{"type": "string", "name": "id"},
{"type": "string", "name": "name"}, {"type": ["null", "string"], "name": "hpo"}, {"type": ["null",
"float"], "name": "score"}, {"type": ["null", "int"], "name": "numberOfPubmeds"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "associationTypes"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "sources"}, {"type": "string", "name": "source"}], "type":
"record", "name": "GeneTraitAssociation"}, "type": "array"}], "name": "geneTraitAssociation"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "geneName"}, {"type":
["null", "string"], "name": "drugName"}, {"type": ["null", "string"], "name": "source"}, {"type":
["null", "string"], "name": "studyType"}, {"type": ["null", "string"], "name": "type"}], "type":
"record", "name": "GeneDrugInteraction"}, "type": "array"}], "name": "geneDrugInteraction"},
{"type": ["null", {"fields": [{"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"}, {"type":
["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null", {"items":
"string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}], "type": "record", "name": "VariantTraitAssociation"}], "name":
"variantTraitAssociation"}, {"type": ["null", {"items": {"doc": "", "type": "record", "name":
"EvidenceEntry", "fields": [{"doc": "", "type": {"doc": "", "type": "record", "name":
"EvidenceSource", "fields": [{"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "",
"type": ["null", "string"], "name": "version"}, {"doc": "", "type": ["null", "string"], "name":
"date"}]}, "name": "source"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "EvidenceSubmission", "fields": [{"doc": "", "type": ["null", "string"], "name":
"submitter"}, {"doc": "", "type": ["null", "string"], "name": "date"}, {"doc": "", "type": ["null",
"string"], "name": "id"}]}, "type": "array"}, "name": "submissions"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "SomaticInformation", "fields": [{"doc": "", "type": ["null",
"string"], "name": "primarySite"}, {"doc": "", "type": ["null", "string"], "name": "siteSubtype"},
{"doc": "", "type": ["null", "string"], "name": "primaryHistology"}, {"doc": "", "type": ["null",
"string"], "name": "histologySubtype"}, {"doc": "", "type": ["null", "string"], "name":
"tumourOrigin"}, {"doc": "", "type": ["null", "string"], "name": "sampleSource"}]}], "name":
"somaticInformation"}, {"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type":
["null", "string"], "name": "id"}, {"doc": "", "type": ["null", "string"], "name": "assembly"},
{"doc": "", "type": ["null", {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}], "name":
"alleleOrigin"}, {"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"HeritableTrait", "fields": [{"doc": "", "type": ["null", "string"], "name": "trait"}, {"doc": "",
"type": ["null", {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown", "NA"], "doc": "", "type": "enum", "name":
"ModeOfInheritance"}], "name": "inheritanceMode"}]}, "type": "array"}, "name": "heritableTraits"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type": "record", "name": "GenomicFeature",
"fields": [{"doc": "", "type": ["null", {"symbols": ["regulatory_region", "gene", "transcript",
"protein"], "doc": "", "type": "enum", "name": "FeatureTypes"}], "name": "featureType"}, {"doc": "",
"type": ["null", "string"], "name": "ensemblId"}, {"doc": "", "type": ["null", {"values": "string",
"type": "map"}], "name": "xrefs"}]}, "type": "array"}, "name": "genomicFeatures"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "doc": "", "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "doc": "", "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "doc": "", "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"},
{"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "doc": "", "type":
"enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "",
"type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "doc": "",
"type": "enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"symbols": ["very_strong", "strong",
"moderate", "supporting", "stand_alone"], "doc": "", "type": "enum", "name": "EvidenceImpact"}],
"name": "impact"}, {"doc": "", "type": ["null", {"symbols": ["low_confidence_level",
"medium_confidence_level", "high_confidence_level", "rejected"], "doc": "", "type": "enum", "name":
"Confidence"}], "name": "confidence"}, {"doc": "", "type": ["null", {"symbols": ["congruent",
"conflict", "weakly_conflicting", "strongly_conflicting"], "doc": "", "type": "enum", "name":
"ConsistencyStatus"}], "name": "consistencyStatus"}, {"doc": "", "type": {"symbols": ["D", "E", "F",
"G", "A", "B", "C", "L", "M", "N", "H", "J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum",
"name": "EthnicCategory"}, "name": "ethnicity"}, {"doc": "", "type": ["null", {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}], "name":
"penetrance"}, {"doc": "", "type": ["null", "boolean"], "name": "variableExpressivity"}, {"doc": "",
"type": ["null", "string"], "name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Property", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": ["null", "string"], "name": "name"}, {"doc": "", "type": ["null",
"string"], "name": "value"}]}, "type": "array"}, "name": "additionalProperties"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name": "bibliography"}]}, "type":
"array"}], "name": "traitAssociation"}, {"type": ["null", {"items": "Score", "type": "array"}],
"name": "functionalScore"}, {"type": ["null", {"items": {"fields": [{"type": ["null", "string"],
"name": "chromosome"}, {"type": ["null", "string"], "name": "stain"}, {"type": ["null", "string"],
"name": "name"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null", "int"], "name":
"end"}], "type": "record", "name": "Cytoband"}, "type": "array"}], "name": "cytoband"}, {"type":
["null", {"items": {"fields": [{"type": ["null", "string"], "name": "id"}, {"type": ["null",
"string"], "name": "chromosome"}, {"type": ["null", "int"], "name": "start"}, {"type": ["null",
"int"], "name": "end"}, {"type": ["null", "int"], "name": "period"}, {"type": ["null", "int"],
"name": "consensusSize"}, {"type": ["null", "float"], "name": "copyNumber"}, {"type": ["null",
"float"], "name": "percentageMatch"}, {"type": ["null", "float"], "name": "score"}, {"type":
["null", "string"], "name": "sequence"}, {"type": ["null", "string"], "name": "source"}], "type":
"record", "name": "Repeat"}, "type": "array"}], "name": "repeat"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "therapeuticContext"}, {"type": ["null", "string"],
"name": "pathway"}, {"type": ["null", "string"], "name": "effect"}, {"type": ["null", "string"],
"name": "association"}, {"type": ["null", "string"], "name": "status"}, {"type": ["null", "string"],
"name": "evidence"}, {"type": ["null", {"items": "string", "type": "array"}], "name":
"bibliography"}], "type": "record", "name": "Drug"}, "type": "array"}], "name": "drugs"},
{"default": null, "type": ["null", {"values": {"fields": [{"type": {"values": "string", "type":
"map"}, "name": "attribute"}], "type": "record", "name": "AdditionalAttribute"}, "type": "map"}],
"name": "additionalAttributes"}], "type": "record", "name": "VariantAnnotation"}], "name":
"annotation"}]}, "name": "variant"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "annotationsVersion",
        "annotatorVersion",
        "assembly",
        "variant",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variant': VariantAvro,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variant': VariantAvro,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'annotationsVersion', 'annotatorVersion', 'assembly',
        'variant'
    ]

    def __init__(self, **kwargs):
        self.annotationsVersion = kwargs.get(
            'annotationsVersion', None)
        self.annotatorVersion = kwargs.get(
            'annotatorVersion', None)
        self.assembly = kwargs.get(
            'assembly', None)
        self.variant = kwargs.get(
            'variant', VariantAvro())


class VariantSetStats(ProtocolElement):
    """
    Variant statistics for a set of variants.      The variants set
    can be contain a whole study, a cohort, a sample, a region, ...
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantSetStats", "fields": [{"doc": "", "type": "int", "name": "numVariants"}, {"doc": "", "type":
"int", "name": "numSamples"}, {"doc": "", "type": "int", "name": "numPass"}, {"doc": "", "type":
"float", "name": "tiTvRatio"}, {"doc": "", "type": "float", "name": "meanQuality"}, {"doc": "",
"type": "float", "name": "stdDevQuality"}, {"default": [], "doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "VariantsByFrequency", "fields": [{"doc": "", "type": "float", "name":
"startFrequency"}, {"doc": "", "type": "float", "name": "endFrequency"}, {"doc": "", "type": "int",
"name": "count"}]}, "type": "array"}, "name": "numRareVariants"}, {"default": {}, "doc": "", "type":
{"values": "int", "type": "map"}, "name": "variantTypeCounts"}, {"default": {}, "doc": "", "type":
{"values": "int", "type": "map"}, "name": "variantBiotypeCounts"}, {"default": {}, "doc": "",
"type": {"values": "int", "type": "map"}, "name": "consequenceTypesCounts"}, {"default": {}, "doc":
"", "type": {"values": {"fields": [{"doc": "", "type": "int", "name": "count"}, {"doc": "", "type":
"float", "name": "density"}], "type": "record", "name": "ChromosomeStats"}, "type": "map"}, "name":
"chromosomeStats"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "meanQuality",
        "numPass",
        "numSamples",
        "numVariants",
        "stdDevQuality",
        "tiTvRatio",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chromosomeStats': ChromosomeStats,
            'numRareVariants': VariantsByFrequency,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chromosomeStats': ChromosomeStats,
            'numRareVariants': VariantsByFrequency,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chromosomeStats', 'consequenceTypesCounts', 'meanQuality',
        'numPass', 'numRareVariants', 'numSamples', 'numVariants',
        'stdDevQuality', 'tiTvRatio', 'variantBiotypeCounts',
        'variantTypeCounts'
    ]

    def __init__(self, **kwargs):
        self.chromosomeStats = kwargs.get(
            'chromosomeStats', {})
        self.consequenceTypesCounts = kwargs.get(
            'consequenceTypesCounts', {})
        self.meanQuality = kwargs.get(
            'meanQuality', None)
        self.numPass = kwargs.get(
            'numPass', None)
        self.numRareVariants = kwargs.get(
            'numRareVariants', [])
        self.numSamples = kwargs.get(
            'numSamples', None)
        self.numVariants = kwargs.get(
            'numVariants', None)
        self.stdDevQuality = kwargs.get(
            'stdDevQuality', None)
        self.tiTvRatio = kwargs.get(
            'tiTvRatio', None)
        self.variantBiotypeCounts = kwargs.get(
            'variantBiotypeCounts', {})
        self.variantTypeCounts = kwargs.get(
            'variantTypeCounts', {})


class VariantSource(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro.legacy", "type": "record", "name":
"VariantSource", "fields": [{"type": "string", "name": "fileId"}, {"type": "string", "name":
"studyId"}, {"default": null, "type": ["null", "string"], "name": "fileName"}, {"default": null,
"type": ["null", "string"], "name": "studyName"}, {"default": [], "type": {"items": "string",
"type": "array"}, "name": "samples"}, {"type": "string", "name": "aggregation"}, {"type": ["null",
{"fields": [{"type": "int", "name": "numRecords"}, {"type": "int", "name": "samplesCount"}, {"type":
"int", "name": "passCount"}, {"type": "int", "name": "transitionsCount"}, {"type": "int", "name":
"transversionsCount"}, {"type": "double", "name": "meanQuality"}, {"type": {"values": "int", "type":
"map"}, "name": "variantTypeCounts"}, {"type": {"values": "int", "type": "map"}, "name":
"chromosomeCounts"}, {"type": {"values": "int", "type": "map"}, "name": "consequenceTypesCount"}],
"type": "record", "name": "VariantGlobalStats"}], "name": "stats"}, {"type": {"values": ["string",
{"fields": [{"type": "string", "name": "fileFormat"}, {"type": {"values": {"items": ["string",
{"values": "string", "type": "map"}], "type": "array"}, "type": "map"}, "name": "meta"}], "type":
"record", "name": "VcfHeader"}], "type": "map"}, "name": "metadata"}, {"type": ["null",
"VcfHeader"], "name": "header"}, {"type": "null", "name": "pedigree"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "aggregation",
        "fileId",
        "header",
        "metadata",
        "pedigree",
        "stats",
        "studyId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'header': VcfHeader,
            'stats': VariantGlobalStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'header': VcfHeader,
            'stats': VariantGlobalStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'aggregation', 'fileId', 'fileName', 'header', 'metadata',
        'pedigree', 'samples', 'stats', 'studyId', 'studyName'
    ]

    def __init__(self, **kwargs):
        self.aggregation = kwargs.get(
            'aggregation', None)
        self.fileId = kwargs.get(
            'fileId', None)
        self.fileName = kwargs.get(
            'fileName', None)
        self.header = kwargs.get(
            'header', None)
        self.metadata = kwargs.get(
            'metadata', None)
        self.pedigree = kwargs.get(
            'pedigree', None)
        self.samples = kwargs.get(
            'samples', [])
        self.stats = kwargs.get(
            'stats', None)
        self.studyId = kwargs.get(
            'studyId', None)
        self.studyName = kwargs.get(
            'studyName', None)


class VariantStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "VariantStats",
"fields": [{"type": ["null", "string"], "name": "refAllele"}, {"type": ["null", "string"], "name":
"altAllele"}, {"type": ["null", "int"], "name": "refAlleleCount"}, {"type": ["null", "int"], "name":
"altAlleleCount"}, {"type": {"values": "int", "type": "map", "java-key-class":
"org.opencb.biodata.models.feature.Genotype"}, "name": "genotypesCount"}, {"type": {"values":
"float", "type": "map", "java-key-class": "org.opencb.biodata.models.feature.Genotype"}, "name":
"genotypesFreq"}, {"type": ["null", "int"], "name": "missingAlleles"}, {"type": ["null", "int"],
"name": "missingGenotypes"}, {"type": ["null", "float"], "name": "refAlleleFreq"}, {"type": ["null",
"float"], "name": "altAlleleFreq"}, {"type": ["null", "float"], "name": "maf"}, {"type": ["null",
"float"], "name": "mgf"}, {"type": ["null", "string"], "name": "mafAllele"}, {"type": ["null",
"string"], "name": "mgfGenotype"}, {"type": ["null", "boolean"], "name": "passedFilters"}, {"type":
["null", "int"], "name": "mendelianErrors"}, {"type": ["null", "float"], "name":
"casesPercentDominant"}, {"type": ["null", "float"], "name": "controlsPercentDominant"}, {"type":
["null", "float"], "name": "casesPercentRecessive"}, {"type": ["null", "float"], "name":
"controlsPercentRecessive"}, {"type": ["null", "float"], "name": "quality"}, {"type": ["null",
"int"], "name": "numSamples"}, {"default": null, "type": ["null", {"symbols": ["SNV", "SNP", "MNV",
"MNP", "INDEL", "SV", "INSERTION", "DELETION", "TRANSLOCATION", "INVERSION", "CNV", "DUPLICATION",
"BREAKEND", "NO_VARIATION", "SYMBOLIC", "MIXED"], "doc": "", "type": "enum", "name":
"VariantType"}], "name": "variantType"}, {"default": null, "type": ["null", {"fields": [{"type":
["null", "float"], "name": "chi2"}, {"type": ["null", "float"], "name": "pValue"}, {"type": ["null",
"int"], "name": "n"}, {"type": ["null", "int"], "name": "n_AA_11"}, {"type": ["null", "int"],
"name": "n_Aa_10"}, {"type": ["null", "int"], "name": "n_aa_00"}, {"type": ["null", "float"],
"name": "e_AA_11"}, {"type": ["null", "float"], "name": "e_Aa_10"}, {"type": ["null", "float"],
"name": "e_aa_00"}, {"type": ["null", "float"], "name": "p"}, {"type": ["null", "float"], "name":
"q"}], "type": "record", "name": "VariantHardyWeinbergStats"}], "name": "hw"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "altAllele",
        "altAlleleCount",
        "altAlleleFreq",
        "casesPercentDominant",
        "casesPercentRecessive",
        "controlsPercentDominant",
        "controlsPercentRecessive",
        "genotypesCount",
        "genotypesFreq",
        "maf",
        "mafAllele",
        "mendelianErrors",
        "mgf",
        "mgfGenotype",
        "missingAlleles",
        "missingGenotypes",
        "numSamples",
        "passedFilters",
        "quality",
        "refAllele",
        "refAlleleCount",
        "refAlleleFreq",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'hw': VariantHardyWeinbergStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'hw': VariantHardyWeinbergStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'altAllele', 'altAlleleCount', 'altAlleleFreq',
        'casesPercentDominant', 'casesPercentRecessive',
        'controlsPercentDominant', 'controlsPercentRecessive',
        'genotypesCount', 'genotypesFreq', 'hw', 'maf', 'mafAllele',
        'mendelianErrors', 'mgf', 'mgfGenotype', 'missingAlleles',
        'missingGenotypes', 'numSamples', 'passedFilters', 'quality',
        'refAllele', 'refAlleleCount', 'refAlleleFreq', 'variantType'
    ]

    def __init__(self, **kwargs):
        self.altAllele = kwargs.get(
            'altAllele', None)
        self.altAlleleCount = kwargs.get(
            'altAlleleCount', None)
        self.altAlleleFreq = kwargs.get(
            'altAlleleFreq', None)
        self.casesPercentDominant = kwargs.get(
            'casesPercentDominant', None)
        self.casesPercentRecessive = kwargs.get(
            'casesPercentRecessive', None)
        self.controlsPercentDominant = kwargs.get(
            'controlsPercentDominant', None)
        self.controlsPercentRecessive = kwargs.get(
            'controlsPercentRecessive', None)
        self.genotypesCount = kwargs.get(
            'genotypesCount', None)
        self.genotypesFreq = kwargs.get(
            'genotypesFreq', None)
        self.hw = kwargs.get(
            'hw', None)
        self.maf = kwargs.get(
            'maf', None)
        self.mafAllele = kwargs.get(
            'mafAllele', None)
        self.mendelianErrors = kwargs.get(
            'mendelianErrors', None)
        self.mgf = kwargs.get(
            'mgf', None)
        self.mgfGenotype = kwargs.get(
            'mgfGenotype', None)
        self.missingAlleles = kwargs.get(
            'missingAlleles', None)
        self.missingGenotypes = kwargs.get(
            'missingGenotypes', None)
        self.numSamples = kwargs.get(
            'numSamples', None)
        self.passedFilters = kwargs.get(
            'passedFilters', None)
        self.quality = kwargs.get(
            'quality', None)
        self.refAllele = kwargs.get(
            'refAllele', None)
        self.refAlleleCount = kwargs.get(
            'refAlleleCount', None)
        self.refAlleleFreq = kwargs.get(
            'refAlleleFreq', None)
        self.variantType = kwargs.get(
            'variantType', None)


class VariantStudyMetadata(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantStudyMetadata", "fields": [{"doc": "", "type": "string", "name": "id"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "description"}, {"default": "NONE", "doc": "",
"type": {"symbols": ["NONE", "BASIC", "EVS", "EXAC"], "doc": "", "type": "enum", "name":
"Aggregation"}, "name": "aggregation"}, {"default": null, "doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "VariantFileHeader", "fields": [{"type": "string", "name": "version"},
{"default": [], "doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name":
"key"}, {"doc": "", "type": "string", "name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}, {"default": null, "doc": "", "type": ["null", "string"], "name":
"number"}, {"default": null, "doc": "", "type": ["null", "string"], "name": "type"}, {"default": {},
"doc": "", "type": {"values": "string", "type": "map"}, "name": "genericFields"}], "type": "record",
"name": "VariantFileHeaderComplexLine"}, "type": "array"}, "name": "complexLines"}, {"default": [],
"doc": "", "type": {"items": {"fields": [{"doc": "", "type": "string", "name": "key"}, {"doc": "",
"type": "string", "name": "value"}], "type": "record", "name": "VariantFileHeaderSimpleLine"},
"type": "array"}, "name": "simpleLines"}]}], "name": "aggregatedHeader"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"doc": "", "type": "string", "name": "id"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "path"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "sampleIds"}, {"default": null, "doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantSetStats", "fields": [{"doc": "", "type": "int",
"name": "numVariants"}, {"doc": "", "type": "int", "name": "numSamples"}, {"doc": "", "type": "int",
"name": "numPass"}, {"doc": "", "type": "float", "name": "tiTvRatio"}, {"doc": "", "type": "float",
"name": "meanQuality"}, {"doc": "", "type": "float", "name": "stdDevQuality"}, {"default": [],
"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantsByFrequency", "fields":
[{"doc": "", "type": "float", "name": "startFrequency"}, {"doc": "", "type": "float", "name":
"endFrequency"}, {"doc": "", "type": "int", "name": "count"}]}, "type": "array"}, "name":
"numRareVariants"}, {"default": {}, "doc": "", "type": {"values": "int", "type": "map"}, "name":
"variantTypeCounts"}, {"default": {}, "doc": "", "type": {"values": "int", "type": "map"}, "name":
"variantBiotypeCounts"}, {"default": {}, "doc": "", "type": {"values": "int", "type": "map"},
"name": "consequenceTypesCounts"}, {"default": {}, "doc": "", "type": {"values": {"fields": [{"doc":
"", "type": "int", "name": "count"}, {"doc": "", "type": "float", "name": "density"}], "type":
"record", "name": "ChromosomeStats"}, "type": "map"}, "name": "chromosomeStats"}]}], "name":
"stats"}, {"default": null, "doc": "", "type": ["null", "VariantFileHeader"], "name": "header"},
{"default": {}, "doc": "", "type": {"values": "string", "type": "map"}, "name": "attributes"}],
"type": "record", "name": "VariantFileMetadata"}, "type": "array"}, "name": "files"}, {"default":
[], "doc": "", "type": {"items": {"namespace": "org.opencb.biodata.models.metadata", "type":
"record", "name": "Individual", "fields": [{"doc": "", "type": "string", "name": "id"}, {"default":
null, "type": ["null", "string"], "name": "family"}, {"default": null, "type": ["null", "string"],
"name": "father"}, {"default": null, "type": ["null", "string"], "name": "mother"}, {"default":
null, "type": ["null", "string"], "name": "sex"}, {"default": null, "type": ["null", "string"],
"name": "phenotype"}, {"default": [], "type": {"items": {"fields": [{"doc": "", "type": "string",
"name": "id"}, {"default": {}, "doc": "", "type": {"values": "string", "type": "map"}, "name":
"annotations"}], "type": "record", "name": "Sample"}, "type": "array"}, "name": "samples"}]},
"type": "array"}, "name": "individuals"}, {"default": [], "doc": "", "type": {"items": {"namespace":
"org.opencb.biodata.models.metadata", "type": "record", "name": "Cohort", "fields": [{"type":
"string", "name": "id"}, {"default": [], "type": {"items": "string", "type": "array"}, "name":
"sampleIds"}, {"type": {"symbols": ["CASE_CONTROL", "CASE_SET", "CONTROL_SET", "PAIRED",
"TIME_SERIES", "FAMILY", "TRIO", "MISCELLANEOUS", "UNKNOWN"], "type": "enum", "name":
"SampleSetType"}, "name": "sampleSetType"}]}, "type": "array"}, "name": "cohorts"}, {"doc": "",
"type": "org.opencb.biodata.models.metadata.SampleSetType", "name": "sampleSetType"}, {"default":
null, "doc": "", "type": ["null", {"fields": [{"default": {}, "type": {"values": "VariantSetStats",
"type": "map"}, "name": "sampleStats"}, {"default": {}, "type": {"values": "VariantSetStats",
"type": "map"}, "name": "cohortStats"}], "type": "record", "name": "VariantStudyStats"}], "name":
"stats"}, {"default": {}, "doc": "", "type": {"values": "string", "type": "map"}, "name":
"attributes"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "sampleSetType",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'aggregatedHeader': VariantFileHeader,
            'cohorts': Cohort,
            'files': VariantFileMetadata,
            'individuals': Individual,
            'stats': VariantStudyStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'aggregatedHeader': VariantFileHeader,
            'cohorts': Cohort,
            'files': VariantFileMetadata,
            'individuals': Individual,
            'stats': VariantStudyStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'aggregatedHeader', 'aggregation', 'attributes', 'cohorts',
        'description', 'files', 'id', 'individuals', 'sampleSetType',
        'stats'
    ]

    def __init__(self, **kwargs):
        self.aggregatedHeader = kwargs.get(
            'aggregatedHeader', None)
        self.aggregation = kwargs.get(
            'aggregation', NONE)
        self.attributes = kwargs.get(
            'attributes', {})
        self.cohorts = kwargs.get(
            'cohorts', [])
        self.description = kwargs.get(
            'description', None)
        self.files = kwargs.get(
            'files', [])
        self.id = kwargs.get(
            'id', None)
        self.individuals = kwargs.get(
            'individuals', [])
        self.sampleSetType = kwargs.get(
            'sampleSetType', None)
        self.stats = kwargs.get(
            'stats', None)


class VariantStudyStats(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantStudyStats", "fields": [{"default": {}, "type": {"values": {"doc": "", "type": "record",
"name": "VariantSetStats", "fields": [{"doc": "", "type": "int", "name": "numVariants"}, {"doc": "",
"type": "int", "name": "numSamples"}, {"doc": "", "type": "int", "name": "numPass"}, {"doc": "",
"type": "float", "name": "tiTvRatio"}, {"doc": "", "type": "float", "name": "meanQuality"}, {"doc":
"", "type": "float", "name": "stdDevQuality"}, {"default": [], "doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantsByFrequency", "fields": [{"doc": "", "type": "float", "name":
"startFrequency"}, {"doc": "", "type": "float", "name": "endFrequency"}, {"doc": "", "type": "int",
"name": "count"}]}, "type": "array"}, "name": "numRareVariants"}, {"default": {}, "doc": "", "type":
{"values": "int", "type": "map"}, "name": "variantTypeCounts"}, {"default": {}, "doc": "", "type":
{"values": "int", "type": "map"}, "name": "variantBiotypeCounts"}, {"default": {}, "doc": "",
"type": {"values": "int", "type": "map"}, "name": "consequenceTypesCounts"}, {"default": {}, "doc":
"", "type": {"values": {"fields": [{"doc": "", "type": "int", "name": "count"}, {"doc": "", "type":
"float", "name": "density"}], "type": "record", "name": "ChromosomeStats"}, "type": "map"}, "name":
"chromosomeStats"}]}, "type": "map"}, "name": "sampleStats"}, {"default": {}, "type": {"values":
"VariantSetStats", "type": "map"}, "name": "cohortStats"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cohortStats': VariantSetStats,
            'sampleStats': VariantSetStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cohortStats': VariantSetStats,
            'sampleStats': VariantSetStats,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'cohortStats', 'sampleStats'
    ]

    def __init__(self, **kwargs):
        self.cohortStats = kwargs.get(
            'cohortStats', {})
        self.sampleStats = kwargs.get(
            'sampleStats', {})


class VariantTraitAssociation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name":
"VariantTraitAssociation", "fields": [{"type": ["null", {"items": {"fields": [{"type": ["null",
"string"], "name": "accession"}, {"type": ["null", "string"], "name": "clinicalSignificance"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "geneNames"}, {"type": ["null", "string"], "name":
"reviewStatus"}], "type": "record", "name": "ClinVar"}, "type": "array"}], "name": "clinvar"},
{"type": ["null", {"items": {"fields": [{"type": ["null", "string"], "name": "snpIdCurrent"},
{"type": ["null", {"items": "string", "type": "array"}], "name": "traits"}, {"type": ["null",
"double"], "name": "riskAlleleFrequency"}, {"type": ["null", "string"], "name": "reportedGenes"}],
"type": "record", "name": "Gwas"}, "type": "array"}], "name": "gwas"}, {"type": ["null", {"items":
{"fields": [{"type": ["null", "string"], "name": "mutationId"}, {"type": ["null", "string"], "name":
"primarySite"}, {"type": ["null", "string"], "name": "siteSubtype"}, {"type": ["null", "string"],
"name": "primaryHistology"}, {"type": ["null", "string"], "name": "histologySubtype"}, {"type":
["null", "string"], "name": "sampleSource"}, {"type": ["null", "string"], "name": "tumourOrigin"},
{"type": ["null", "string"], "name": "geneName"}, {"type": ["null", "string"], "name":
"mutationSomaticStatus"}], "type": "record", "name": "Cosmic"}, "type": "array"}], "name":
"cosmic"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "clinvar",
        "cosmic",
        "gwas",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinvar': ClinVar,
            'cosmic': Cosmic,
            'gwas': Gwas,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'clinvar': ClinVar,
            'cosmic': Cosmic,
            'gwas': Gwas,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'clinvar', 'cosmic', 'gwas'
    ]

    def __init__(self, **kwargs):
        self.clinvar = kwargs.get(
            'clinvar', None)
        self.cosmic = kwargs.get(
            'cosmic', None)
        self.gwas = kwargs.get(
            'gwas', None)


class VariantType(object):
    """
    * Type of variation, which depends mostly on its length.      *
    <ul>      * <li>SNVs involve a single nucleotide, without changes
    in length</li>      * <li>MNVs involve multiple nucleotides,
    without changes in length</li>      * <li>Indels are insertions or
    deletions of less than SV_THRESHOLD (50) nucleotides</li>      *
    <li>Structural variations are large changes of more than
    SV_THRESHOLD nucleotides</li>      * <li>Copy-number variations
    alter the number of copies of a region</li>      * </ul>
    """
    SNV = "SNV"
    SNP = "SNP"
    MNV = "MNV"
    MNP = "MNP"
    INDEL = "INDEL"
    SV = "SV"
    INSERTION = "INSERTION"
    DELETION = "DELETION"
    TRANSLOCATION = "TRANSLOCATION"
    INVERSION = "INVERSION"
    CNV = "CNV"
    DUPLICATION = "DUPLICATION"
    BREAKEND = "BREAKEND"
    NO_VARIATION = "NO_VARIATION"
    SYMBOLIC = "SYMBOLIC"
    MIXED = "MIXED"

    def __hash__(self):
        return str(self).__hash__()


class VariantsByFrequency(ProtocolElement):
    """
    Counts the number of variants within a certain frequency range.
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.metadata", "type": "record", "name":
"VariantsByFrequency", "fields": [{"doc": "", "type": "float", "name": "startFrequency"}, {"doc":
"", "type": "float", "name": "endFrequency"}, {"doc": "", "type": "int", "name": "count"}], "doc":
""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "count",
        "endFrequency",
        "startFrequency",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'count', 'endFrequency', 'startFrequency'
    ]

    def __init__(self, **kwargs):
        self.count = kwargs.get(
            'count', None)
        self.endFrequency = kwargs.get(
            'endFrequency', None)
        self.startFrequency = kwargs.get(
            'startFrequency', None)


class VariantsCoordinates(ProtocolElement):
    """
    A list of variant coordinates
    """
    _schemaSource = """
{"namespace": "org.gel.models.cva.avro", "type": "record", "name": "VariantsCoordinates", "fields":
[{"default": [], "type": {"items": {"namespace": "org.gel.models.report.avro", "type": "record",
"name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}], "doc": ""}, "type":
"array"}, "name": "variants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': VariantCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': VariantCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'variants'
    ]

    def __init__(self, **kwargs):
        self.variants = kwargs.get(
            'variants', [])


class VcfHeader(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro.legacy", "type": "record", "name":
"VcfHeader", "fields": [{"type": "string", "name": "fileFormat"}, {"type": {"values": {"items":
["string", {"values": "string", "type": "map"}], "type": "array"}, "type": "map"}, "name": "meta"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "fileFormat",
        "meta",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fileFormat', 'meta'
    ]

    def __init__(self, **kwargs):
        self.fileFormat = kwargs.get(
            'fileFormat', None)
        self.meta = kwargs.get(
            'meta', None)


class VersionControl(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "VersionControl",
"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name": "GitVersionControl"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'GitVersionControl'
    ]

    def __init__(self, **kwargs):
        self.GitVersionControl = kwargs.get(
            'GitVersionControl', '1.1.0')


class Xref(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.opencb.biodata.models.variant.avro", "type": "record", "name": "Xref", "fields":
[{"type": ["null", "string"], "name": "id"}, {"type": ["null", "string"], "name": "source"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'source'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.source = kwargs.get(
            'source', None)


class Zygosity(object):
    """
    It is a representation of the zygosity  * `reference_homozygous`:
    0/0, 0|0 * `heterozygous`: 0/1, 1/0, 1|0, 0|1 *
    `alternate_homozygous`: 1/1, 1|1 * `missing`: ./., .|. *
    `half_missing_reference`: ./0, 0/., 0|., .|0 *
    `half_missing_alternate`: ./1, 1/., 1|., .|1 *
    `alternate_hemizigous`: 1 * `reference_hemizigous`: 0 * `unk`:
    Anything unexpected
    """
    reference_homozygous = "reference_homozygous"
    heterozygous = "heterozygous"
    alternate_homozygous = "alternate_homozygous"
    missing = "missing"
    half_missing_reference = "half_missing_reference"
    half_missing_alternate = "half_missing_alternate"
    alternate_hemizigous = "alternate_hemizigous"
    reference_hemizigous = "reference_hemizigous"
    unk = "unk"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class diseaseType(object):
    """
    No documentation
    """
    ADULT_GLIOMA = "ADULT_GLIOMA"
    BLADDER = "BLADDER"
    BREAST = "BREAST"
    CARCINOMA_OF_UNKNOWN_PRIMARY = "CARCINOMA_OF_UNKNOWN_PRIMARY"
    CHILDHOOD = "CHILDHOOD"
    COLORECTAL = "COLORECTAL"
    ENDOMETRIAL_CARCINOMA = "ENDOMETRIAL_CARCINOMA"
    HAEMONC = "HAEMONC"
    HEPATOPANCREATOBILIARY = "HEPATOPANCREATOBILIARY"
    LUNG = "LUNG"
    MALIGNANT_MELANOMA = "MALIGNANT_MELANOMA"
    NASOPHARYNGEAL = "NASOPHARYNGEAL"
    ORAL_OROPHARYNGEAL = "ORAL_OROPHARYNGEAL"
    OVARIAN = "OVARIAN"
    PROSTATE = "PROSTATE"
    RENAL = "RENAL"
    SARCOMA = "SARCOMA"
    SINONASAL = "SINONASAL"
    TESTICULAR_GERM_CELL_TUMOURS = "TESTICULAR_GERM_CELL_TUMOURS"
    UPPER_GASTROINTESTINAL = "UPPER_GASTROINTESTINAL"
    NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE = "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE"
    CLASSICAL_HODGKINS = "CLASSICAL_HODGKINS"
    NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS = "NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS"
    T_CELL_LYMPHOMA = "T_CELL_LYMPHOMA"

    def __hash__(self):
        return str(self).__hash__()
