"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse
from protocols.protocol import avro_parse

import avro.schema

version = '0.1.0'


class AnalysisParameters(ProtocolElement):
    """
    The configuration parameters used for the analysis
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "AnalysisParameters",
"fields": [{"doc": "", "type": "boolean", "name": "coding_region_stats_enabled"}, {"doc": "",
"type": "boolean", "name": "exon_stats_enabled"}, {"doc": "", "type": "boolean", "name":
"wg_stats_enabled"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"gene_list"}, {"doc": "", "type": ["null", "string"], "name": "panel"}, {"doc": "", "type": ["null",
"string"], "name": "panel_version"}, {"doc": "", "type": ["null", "string"], "name":
"panelapp_host"}, {"doc": "", "type": ["null", "string"], "name": "panelapp_gene_confidence"},
{"doc": "", "type": "string", "name": "transcript_filtering_biotypes"}, {"doc": "", "type":
"string", "name": "transcript_filtering_flags"}, {"doc": "", "type": "string", "name":
"cellbase_host"}, {"doc": "", "type": "string", "name": "cellbase_version"}, {"doc": "", "type":
"string", "name": "grch37"}, {"doc": "", "type": "string", "name": "species"}, {"doc": "", "type":
"int", "name": "exon_padding"}, {"doc": "", "type": "int", "name": "gap_coverage_threshold"},
{"doc": "", "type": "int", "name": "gap_length_threshold"}, {"doc": "", "type": "string", "name":
"input_file"}, {"doc": "", "type": "string", "name": "configuration_file"}, {"doc": "", "type":
["null", "string"], "name": "wg_regions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "cellbase_host",
        "cellbase_version",
        "coding_region_stats_enabled",
        "configuration_file",
        "exon_padding",
        "exon_stats_enabled",
        "gap_coverage_threshold",
        "gap_length_threshold",
        "gene_list",
        "grch37",
        "input_file",
        "panel",
        "panel_version",
        "panelapp_gene_confidence",
        "panelapp_host",
        "species",
        "transcript_filtering_biotypes",
        "transcript_filtering_flags",
        "wg_regions",
        "wg_stats_enabled",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'cellbase_host', 'cellbase_version',
        'coding_region_stats_enabled', 'configuration_file',
        'exon_padding', 'exon_stats_enabled',
        'gap_coverage_threshold', 'gap_length_threshold', 'gene_list',
        'grch37', 'input_file', 'panel', 'panel_version',
        'panelapp_gene_confidence', 'panelapp_host', 'species',
        'transcript_filtering_biotypes', 'transcript_filtering_flags',
        'wg_regions', 'wg_stats_enabled'
    ]

    def __init__(self, **kwargs):
        self.cellbase_host = kwargs.get(
            'cellbase_host', None)
        self.cellbase_version = kwargs.get(
            'cellbase_version', None)
        self.coding_region_stats_enabled = kwargs.get(
            'coding_region_stats_enabled', None)
        self.configuration_file = kwargs.get(
            'configuration_file', None)
        self.exon_padding = kwargs.get(
            'exon_padding', None)
        self.exon_stats_enabled = kwargs.get(
            'exon_stats_enabled', None)
        self.gap_coverage_threshold = kwargs.get(
            'gap_coverage_threshold', None)
        self.gap_length_threshold = kwargs.get(
            'gap_length_threshold', None)
        self.gene_list = kwargs.get(
            'gene_list', None)
        self.grch37 = kwargs.get(
            'grch37', None)
        self.input_file = kwargs.get(
            'input_file', None)
        self.panel = kwargs.get(
            'panel', None)
        self.panel_version = kwargs.get(
            'panel_version', None)
        self.panelapp_gene_confidence = kwargs.get(
            'panelapp_gene_confidence', None)
        self.panelapp_host = kwargs.get(
            'panelapp_host', None)
        self.species = kwargs.get(
            'species', None)
        self.transcript_filtering_biotypes = kwargs.get(
            'transcript_filtering_biotypes', None)
        self.transcript_filtering_flags = kwargs.get(
            'transcript_filtering_flags', None)
        self.wg_regions = kwargs.get(
            'wg_regions', None)
        self.wg_stats_enabled = kwargs.get(
            'wg_stats_enabled', None)


class AnalysisResults(ProtocolElement):
    """
    The output of a coverage analysis
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "AnalysisResults", "fields":
[{"doc": "", "type": {"doc": "", "type": "record", "name": "CoverageAnalysisResults", "fields":
[{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "Gene", "fields": [{"doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "Transcript", "fields": [{"doc": "", "type":
"string", "name": "id"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"RegionStatistics", "fields": [{"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type":
"float", "name": "sd"}, {"doc": "", "type": "float", "name": "med"}, {"doc": "", "type": ["null",
"float"], "name": "gc"}, {"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type": "float",
"name": "pct25"}, {"doc": "", "type": ["null", "int"], "name": "bases"}, {"doc": "", "type":
["null", "int"], "name": "bases_lt_15x"}, {"doc": "", "type": ["null", "int"], "name":
"bases_gte_15x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_30x"}, {"doc": "", "type":
["null", "int"], "name": "bases_gte_50x"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "name":
"stats"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "Exon",
"fields": [{"doc": "", "type": "string", "name": "exon"}, {"doc": "", "type": "int", "name": "s"},
{"doc": "", "type": ["null", "int"], "name": "padded_s"}, {"doc": "", "type": "int", "name": "e"},
{"doc": "", "type": ["null", "int"], "name": "padded_e"}, {"doc": "", "type": ["null", "int"],
"name": "l"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "CoverageGap",
"fields": [{"doc": "", "type": "int", "name": "s"}, {"doc": "", "type": "int", "name": "e"}, {"doc":
"", "type": ["null", "int"], "name": "l"}]}, "type": "array"}, "name": "gaps"}, {"doc": "", "type":
"RegionStatistics", "name": "stats"}]}, "type": "array"}], "name": "exons"}]}, "type": "array"},
"name": "trs"}, {"doc": "", "type": "Transcript", "name": "union_tr"}, {"doc": "", "type": "string",
"name": "name"}, {"doc": "", "type": "string", "name": "chr"}]}, "type": "array"}, "name": "genes"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "CodingRegion", "fields":
[{"doc": "", "type": "RegionStatistics", "name": "stats"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "Chromosome", "fields": [{"doc": "", "type": "string", "name": "chr"},
{"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"}, {"doc": "",
"type": "float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"}, {"doc": "",
"type": "float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"}, {"doc": "",
"type": "int", "name": "bases"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc": "", "type":
"float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "", "type":
"float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "type":
"array"}, "name": "chrs"}]}], "name": "coding_region"}, {"doc": "", "type": ["null", {"fields":
[{"doc": "", "type": "RegionStatistics", "name": "stats"}, {"doc": "", "type": {"items":
"Chromosome", "type": "array"}, "name": "chrs"}], "type": "record", "name": "WholeGenome"}], "name":
"whole_genome"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"UncoveredGene", "fields": [{"doc": "", "type": "string", "name": "chr"}, {"doc": "", "type":
"string", "name": "name"}, {"doc": "", "type": ["null", "int"], "name": "s"}, {"doc": "", "type":
["null", "int"], "name": "e"}]}, "type": "array"}, "name": "uncovered_genes"}]}, "name": "results"},
{"doc": "", "type": {"doc": "", "type": "record", "name": "AnalysisParameters", "fields": [{"doc":
"", "type": "boolean", "name": "coding_region_stats_enabled"}, {"doc": "", "type": "boolean",
"name": "exon_stats_enabled"}, {"doc": "", "type": "boolean", "name": "wg_stats_enabled"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name": "gene_list"}, {"doc": "",
"type": ["null", "string"], "name": "panel"}, {"doc": "", "type": ["null", "string"], "name":
"panel_version"}, {"doc": "", "type": ["null", "string"], "name": "panelapp_host"}, {"doc": "",
"type": ["null", "string"], "name": "panelapp_gene_confidence"}, {"doc": "", "type": "string",
"name": "transcript_filtering_biotypes"}, {"doc": "", "type": "string", "name":
"transcript_filtering_flags"}, {"doc": "", "type": "string", "name": "cellbase_host"}, {"doc": "",
"type": "string", "name": "cellbase_version"}, {"doc": "", "type": "string", "name": "grch37"},
{"doc": "", "type": "string", "name": "species"}, {"doc": "", "type": "int", "name":
"exon_padding"}, {"doc": "", "type": "int", "name": "gap_coverage_threshold"}, {"doc": "", "type":
"int", "name": "gap_length_threshold"}, {"doc": "", "type": "string", "name": "input_file"}, {"doc":
"", "type": "string", "name": "configuration_file"}, {"doc": "", "type": ["null", "string"], "name":
"wg_regions"}]}, "name": "parameters"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "parameters",
        "results",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'parameters': AnalysisParameters,
            'results': CoverageAnalysisResults,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'parameters': AnalysisParameters,
            'results': CoverageAnalysisResults,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'parameters', 'results'
    ]

    def __init__(self, **kwargs):
        self.parameters = kwargs.get(
            'parameters', AnalysisParameters())
        self.results = kwargs.get(
            'results', CoverageAnalysisResults())


class Chromosome(ProtocolElement):
    """
    All coverage information about a given chromosome
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "Chromosome", "fields":
[{"doc": "", "type": "string", "name": "chr"}, {"doc": "", "type": "float", "name": "avg"}, {"doc":
"", "type": "float", "name": "sd"}, {"doc": "", "type": "float", "name": "med"}, {"doc": "", "type":
["null", "float"], "name": "gc"}, {"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type":
"float", "name": "pct25"}, {"doc": "", "type": "int", "name": "bases"}, {"doc": "", "type": "float",
"name": "gte50x"}, {"doc": "", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float",
"name": "gte15x"}, {"doc": "", "type": "float", "name": "lt15x"}, {"doc": "", "type": ["null",
"float"], "name": "rmsd"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "avg",
        "bases",
        "chr",
        "gc",
        "gte15x",
        "gte30x",
        "gte50x",
        "lt15x",
        "med",
        "pct25",
        "pct75",
        "rmsd",
        "sd",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'avg', 'bases', 'chr', 'gc', 'gte15x', 'gte30x', 'gte50x',
        'lt15x', 'med', 'pct25', 'pct75', 'rmsd', 'sd'
    ]

    def __init__(self, **kwargs):
        self.avg = kwargs.get(
            'avg', None)
        self.bases = kwargs.get(
            'bases', None)
        self.chr = kwargs.get(
            'chr', None)
        self.gc = kwargs.get(
            'gc', None)
        self.gte15x = kwargs.get(
            'gte15x', None)
        self.gte30x = kwargs.get(
            'gte30x', None)
        self.gte50x = kwargs.get(
            'gte50x', None)
        self.lt15x = kwargs.get(
            'lt15x', None)
        self.med = kwargs.get(
            'med', None)
        self.pct25 = kwargs.get(
            'pct25', None)
        self.pct75 = kwargs.get(
            'pct75', None)
        self.rmsd = kwargs.get(
            'rmsd', None)
        self.sd = kwargs.get(
            'sd', None)


class CodingRegion(ProtocolElement):
    """
    All coverage information about the coding region
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "CodingRegion", "fields":
[{"doc": "", "type": {"doc": "", "type": "record", "name": "RegionStatistics", "fields": [{"doc":
"", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"}, {"doc": "", "type":
"float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"}, {"doc": "", "type":
"float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"}, {"doc": "", "type":
["null", "int"], "name": "bases"}, {"doc": "", "type": ["null", "int"], "name": "bases_lt_15x"},
{"doc": "", "type": ["null", "int"], "name": "bases_gte_15x"}, {"doc": "", "type": ["null", "int"],
"name": "bases_gte_30x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_50x"}, {"doc": "",
"type": "float", "name": "gte50x"}, {"doc": "", "type": "float", "name": "gte30x"}, {"doc": "",
"type": "float", "name": "gte15x"}, {"doc": "", "type": "float", "name": "lt15x"}, {"doc": "",
"type": ["null", "float"], "name": "rmsd"}]}, "name": "stats"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Chromosome", "fields": [{"doc": "", "type": "string", "name":
"chr"}, {"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"},
{"doc": "", "type": "float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"},
{"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"},
{"doc": "", "type": "int", "name": "bases"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "type":
"array"}, "name": "chrs"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chrs",
        "stats",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chrs': Chromosome,
            'stats': RegionStatistics,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chrs': Chromosome,
            'stats': RegionStatistics,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chrs', 'stats'
    ]

    def __init__(self, **kwargs):
        self.chrs = kwargs.get(
            'chrs', None)
        self.stats = kwargs.get(
            'stats', RegionStatistics())


class CoverageAnalysisResults(ProtocolElement):
    """
    Coverage analysis results
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "CoverageAnalysisResults",
"fields": [{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "Gene", "fields":
[{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "Transcript", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "RegionStatistics", "fields": [{"doc": "", "type": "float", "name": "avg"}, {"doc": "",
"type": "float", "name": "sd"}, {"doc": "", "type": "float", "name": "med"}, {"doc": "", "type":
["null", "float"], "name": "gc"}, {"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type":
"float", "name": "pct25"}, {"doc": "", "type": ["null", "int"], "name": "bases"}, {"doc": "",
"type": ["null", "int"], "name": "bases_lt_15x"}, {"doc": "", "type": ["null", "int"], "name":
"bases_gte_15x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_30x"}, {"doc": "", "type":
["null", "int"], "name": "bases_gte_50x"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "name":
"stats"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "Exon",
"fields": [{"doc": "", "type": "string", "name": "exon"}, {"doc": "", "type": "int", "name": "s"},
{"doc": "", "type": ["null", "int"], "name": "padded_s"}, {"doc": "", "type": "int", "name": "e"},
{"doc": "", "type": ["null", "int"], "name": "padded_e"}, {"doc": "", "type": ["null", "int"],
"name": "l"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "CoverageGap",
"fields": [{"doc": "", "type": "int", "name": "s"}, {"doc": "", "type": "int", "name": "e"}, {"doc":
"", "type": ["null", "int"], "name": "l"}]}, "type": "array"}, "name": "gaps"}, {"doc": "", "type":
"RegionStatistics", "name": "stats"}]}, "type": "array"}], "name": "exons"}]}, "type": "array"},
"name": "trs"}, {"doc": "", "type": "Transcript", "name": "union_tr"}, {"doc": "", "type": "string",
"name": "name"}, {"doc": "", "type": "string", "name": "chr"}]}, "type": "array"}, "name": "genes"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "CodingRegion", "fields":
[{"doc": "", "type": "RegionStatistics", "name": "stats"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "Chromosome", "fields": [{"doc": "", "type": "string", "name": "chr"},
{"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"}, {"doc": "",
"type": "float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"}, {"doc": "",
"type": "float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"}, {"doc": "",
"type": "int", "name": "bases"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc": "", "type":
"float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "", "type":
"float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "type":
"array"}, "name": "chrs"}]}], "name": "coding_region"}, {"doc": "", "type": ["null", {"fields":
[{"doc": "", "type": "RegionStatistics", "name": "stats"}, {"doc": "", "type": {"items":
"Chromosome", "type": "array"}, "name": "chrs"}], "type": "record", "name": "WholeGenome"}], "name":
"whole_genome"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"UncoveredGene", "fields": [{"doc": "", "type": "string", "name": "chr"}, {"doc": "", "type":
"string", "name": "name"}, {"doc": "", "type": ["null", "int"], "name": "s"}, {"doc": "", "type":
["null", "int"], "name": "e"}]}, "type": "array"}, "name": "uncovered_genes"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "coding_region",
        "genes",
        "uncovered_genes",
        "whole_genome",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'coding_region': CodingRegion,
            'genes': Gene,
            'uncovered_genes': UncoveredGene,
            'whole_genome': WholeGenome,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'coding_region': CodingRegion,
            'genes': Gene,
            'uncovered_genes': UncoveredGene,
            'whole_genome': WholeGenome,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'coding_region', 'genes', 'uncovered_genes', 'whole_genome'
    ]

    def __init__(self, **kwargs):
        self.coding_region = kwargs.get(
            'coding_region', None)
        self.genes = kwargs.get(
            'genes', None)
        self.uncovered_genes = kwargs.get(
            'uncovered_genes', None)
        self.whole_genome = kwargs.get(
            'whole_genome', None)


class CoverageGap(ProtocolElement):
    """
    A gap in coverage. A gap is a contiguous region under a certain
    depth of coverage.     There are two thresholds to define at
    analysis time: * The depth of coverage threshold under which a gap
    is considered * The number of consecutive positions under the
    depth of coverage threshold to call a gap      e.g.: we may
    consider a gap those regions of more than 5 consecutive bp under
    15x
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "CoverageGap", "fields":
[{"doc": "", "type": "int", "name": "s"}, {"doc": "", "type": "int", "name": "e"}, {"doc": "",
"type": ["null", "int"], "name": "l"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "e",
        "l",
        "s",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'e', 'l', 's'
    ]

    def __init__(self, **kwargs):
        self.e = kwargs.get(
            'e', None)
        self.l = kwargs.get(
            'l', None)
        self.s = kwargs.get(
            's', None)


class Exon(ProtocolElement):
    """
    All coverage information about a given exon
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "Exon", "fields": [{"doc":
"", "type": "string", "name": "exon"}, {"doc": "", "type": "int", "name": "s"}, {"doc": "", "type":
["null", "int"], "name": "padded_s"}, {"doc": "", "type": "int", "name": "e"}, {"doc": "", "type":
["null", "int"], "name": "padded_e"}, {"doc": "", "type": ["null", "int"], "name": "l"}, {"doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "CoverageGap", "fields": [{"doc": "",
"type": "int", "name": "s"}, {"doc": "", "type": "int", "name": "e"}, {"doc": "", "type": ["null",
"int"], "name": "l"}]}, "type": "array"}, "name": "gaps"}, {"doc": "", "type": {"doc": "", "type":
"record", "name": "RegionStatistics", "fields": [{"doc": "", "type": "float", "name": "avg"},
{"doc": "", "type": "float", "name": "sd"}, {"doc": "", "type": "float", "name": "med"}, {"doc": "",
"type": ["null", "float"], "name": "gc"}, {"doc": "", "type": "float", "name": "pct75"}, {"doc": "",
"type": "float", "name": "pct25"}, {"doc": "", "type": ["null", "int"], "name": "bases"}, {"doc":
"", "type": ["null", "int"], "name": "bases_lt_15x"}, {"doc": "", "type": ["null", "int"], "name":
"bases_gte_15x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_30x"}, {"doc": "", "type":
["null", "int"], "name": "bases_gte_50x"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "name":
"stats"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "e",
        "exon",
        "gaps",
        "l",
        "padded_e",
        "padded_s",
        "s",
        "stats",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'gaps': CoverageGap,
            'stats': RegionStatistics,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'gaps': CoverageGap,
            'stats': RegionStatistics,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'e', 'exon', 'gaps', 'l', 'padded_e', 'padded_s', 's', 'stats'
    ]

    def __init__(self, **kwargs):
        self.e = kwargs.get(
            'e', None)
        self.exon = kwargs.get(
            'exon', None)
        self.gaps = kwargs.get(
            'gaps', None)
        self.l = kwargs.get(
            'l', None)
        self.padded_e = kwargs.get(
            'padded_e', None)
        self.padded_s = kwargs.get(
            'padded_s', None)
        self.s = kwargs.get(
            's', None)
        self.stats = kwargs.get(
            'stats', RegionStatistics())


class Gene(ProtocolElement):
    """
    All coverage information about a given gene
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "Gene", "fields": [{"doc":
"", "type": {"items": {"doc": "", "type": "record", "name": "Transcript", "fields": [{"doc": "",
"type": "string", "name": "id"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"RegionStatistics", "fields": [{"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type":
"float", "name": "sd"}, {"doc": "", "type": "float", "name": "med"}, {"doc": "", "type": ["null",
"float"], "name": "gc"}, {"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type": "float",
"name": "pct25"}, {"doc": "", "type": ["null", "int"], "name": "bases"}, {"doc": "", "type":
["null", "int"], "name": "bases_lt_15x"}, {"doc": "", "type": ["null", "int"], "name":
"bases_gte_15x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_30x"}, {"doc": "", "type":
["null", "int"], "name": "bases_gte_50x"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "name":
"stats"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "Exon",
"fields": [{"doc": "", "type": "string", "name": "exon"}, {"doc": "", "type": "int", "name": "s"},
{"doc": "", "type": ["null", "int"], "name": "padded_s"}, {"doc": "", "type": "int", "name": "e"},
{"doc": "", "type": ["null", "int"], "name": "padded_e"}, {"doc": "", "type": ["null", "int"],
"name": "l"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "CoverageGap",
"fields": [{"doc": "", "type": "int", "name": "s"}, {"doc": "", "type": "int", "name": "e"}, {"doc":
"", "type": ["null", "int"], "name": "l"}]}, "type": "array"}, "name": "gaps"}, {"doc": "", "type":
"RegionStatistics", "name": "stats"}]}, "type": "array"}], "name": "exons"}]}, "type": "array"},
"name": "trs"}, {"doc": "", "type": "Transcript", "name": "union_tr"}, {"doc": "", "type": "string",
"name": "name"}, {"doc": "", "type": "string", "name": "chr"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chr",
        "name",
        "trs",
        "union_tr",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'trs': Transcript,
            'union_tr': Transcript,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'trs': Transcript,
            'union_tr': Transcript,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chr', 'name', 'trs', 'union_tr'
    ]

    def __init__(self, **kwargs):
        self.chr = kwargs.get(
            'chr', None)
        self.name = kwargs.get(
            'name', None)
        self.trs = kwargs.get(
            'trs', None)
        self.union_tr = kwargs.get(
            'union_tr', Transcript())


class RegionStatistics(ProtocolElement):
    """
    Represents a group of coverage statistics over a genomic region
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "RegionStatistics",
"fields": [{"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"},
{"doc": "", "type": "float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"},
{"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"},
{"doc": "", "type": ["null", "int"], "name": "bases"}, {"doc": "", "type": ["null", "int"], "name":
"bases_lt_15x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_15x"}, {"doc": "", "type":
["null", "int"], "name": "bases_gte_30x"}, {"doc": "", "type": ["null", "int"], "name":
"bases_gte_50x"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc": "", "type": "float",
"name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "", "type": "float",
"name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "avg",
        "bases",
        "bases_gte_15x",
        "bases_gte_30x",
        "bases_gte_50x",
        "bases_lt_15x",
        "gc",
        "gte15x",
        "gte30x",
        "gte50x",
        "lt15x",
        "med",
        "pct25",
        "pct75",
        "rmsd",
        "sd",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'avg', 'bases', 'bases_gte_15x', 'bases_gte_30x',
        'bases_gte_50x', 'bases_lt_15x', 'gc', 'gte15x', 'gte30x',
        'gte50x', 'lt15x', 'med', 'pct25', 'pct75', 'rmsd', 'sd'
    ]

    def __init__(self, **kwargs):
        self.avg = kwargs.get(
            'avg', None)
        self.bases = kwargs.get(
            'bases', None)
        self.bases_gte_15x = kwargs.get(
            'bases_gte_15x', None)
        self.bases_gte_30x = kwargs.get(
            'bases_gte_30x', None)
        self.bases_gte_50x = kwargs.get(
            'bases_gte_50x', None)
        self.bases_lt_15x = kwargs.get(
            'bases_lt_15x', None)
        self.gc = kwargs.get(
            'gc', None)
        self.gte15x = kwargs.get(
            'gte15x', None)
        self.gte30x = kwargs.get(
            'gte30x', None)
        self.gte50x = kwargs.get(
            'gte50x', None)
        self.lt15x = kwargs.get(
            'lt15x', None)
        self.med = kwargs.get(
            'med', None)
        self.pct25 = kwargs.get(
            'pct25', None)
        self.pct75 = kwargs.get(
            'pct75', None)
        self.rmsd = kwargs.get(
            'rmsd', None)
        self.sd = kwargs.get(
            'sd', None)


class Transcript(ProtocolElement):
    """
    All coverage information about a given transcript
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "Transcript", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "RegionStatistics", "fields": [{"doc": "", "type": "float", "name": "avg"}, {"doc": "",
"type": "float", "name": "sd"}, {"doc": "", "type": "float", "name": "med"}, {"doc": "", "type":
["null", "float"], "name": "gc"}, {"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type":
"float", "name": "pct25"}, {"doc": "", "type": ["null", "int"], "name": "bases"}, {"doc": "",
"type": ["null", "int"], "name": "bases_lt_15x"}, {"doc": "", "type": ["null", "int"], "name":
"bases_gte_15x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_30x"}, {"doc": "", "type":
["null", "int"], "name": "bases_gte_50x"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "name":
"stats"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "Exon",
"fields": [{"doc": "", "type": "string", "name": "exon"}, {"doc": "", "type": "int", "name": "s"},
{"doc": "", "type": ["null", "int"], "name": "padded_s"}, {"doc": "", "type": "int", "name": "e"},
{"doc": "", "type": ["null", "int"], "name": "padded_e"}, {"doc": "", "type": ["null", "int"],
"name": "l"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "CoverageGap",
"fields": [{"doc": "", "type": "int", "name": "s"}, {"doc": "", "type": "int", "name": "e"}, {"doc":
"", "type": ["null", "int"], "name": "l"}]}, "type": "array"}, "name": "gaps"}, {"doc": "", "type":
"RegionStatistics", "name": "stats"}]}, "type": "array"}], "name": "exons"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "exons",
        "id",
        "stats",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'exons': Exon,
            'stats': RegionStatistics,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'exons': Exon,
            'stats': RegionStatistics,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'exons', 'id', 'stats'
    ]

    def __init__(self, **kwargs):
        self.exons = kwargs.get(
            'exons', None)
        self.id = kwargs.get(
            'id', None)
        self.stats = kwargs.get(
            'stats', RegionStatistics())


class UncoveredGene(ProtocolElement):
    """
    A gene for which there is no information about coverage. A low
    covered gene will not be identified in this list,     only genes
    for which there is no coverage data.
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "UncoveredGene", "fields":
[{"doc": "", "type": "string", "name": "chr"}, {"doc": "", "type": "string", "name": "name"},
{"doc": "", "type": ["null", "int"], "name": "s"}, {"doc": "", "type": ["null", "int"], "name":
"e"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chr",
        "e",
        "name",
        "s",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chr', 'e', 'name', 's'
    ]

    def __init__(self, **kwargs):
        self.chr = kwargs.get(
            'chr', None)
        self.e = kwargs.get(
            'e', None)
        self.name = kwargs.get(
            'name', None)
        self.s = kwargs.get(
            's', None)


class WholeGenome(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.coverage.avro", "type": "record", "name": "WholeGenome", "fields":
[{"doc": "", "type": {"doc": "", "type": "record", "name": "RegionStatistics", "fields": [{"doc":
"", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"}, {"doc": "", "type":
"float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"}, {"doc": "", "type":
"float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"}, {"doc": "", "type":
["null", "int"], "name": "bases"}, {"doc": "", "type": ["null", "int"], "name": "bases_lt_15x"},
{"doc": "", "type": ["null", "int"], "name": "bases_gte_15x"}, {"doc": "", "type": ["null", "int"],
"name": "bases_gte_30x"}, {"doc": "", "type": ["null", "int"], "name": "bases_gte_50x"}, {"doc": "",
"type": "float", "name": "gte50x"}, {"doc": "", "type": "float", "name": "gte30x"}, {"doc": "",
"type": "float", "name": "gte15x"}, {"doc": "", "type": "float", "name": "lt15x"}, {"doc": "",
"type": ["null", "float"], "name": "rmsd"}]}, "name": "stats"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "Chromosome", "fields": [{"doc": "", "type": "string", "name":
"chr"}, {"doc": "", "type": "float", "name": "avg"}, {"doc": "", "type": "float", "name": "sd"},
{"doc": "", "type": "float", "name": "med"}, {"doc": "", "type": ["null", "float"], "name": "gc"},
{"doc": "", "type": "float", "name": "pct75"}, {"doc": "", "type": "float", "name": "pct25"},
{"doc": "", "type": "int", "name": "bases"}, {"doc": "", "type": "float", "name": "gte50x"}, {"doc":
"", "type": "float", "name": "gte30x"}, {"doc": "", "type": "float", "name": "gte15x"}, {"doc": "",
"type": "float", "name": "lt15x"}, {"doc": "", "type": ["null", "float"], "name": "rmsd"}]}, "type":
"array"}, "name": "chrs"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chrs",
        "stats",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chrs': Chromosome,
            'stats': RegionStatistics,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chrs': Chromosome,
            'stats': RegionStatistics,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chrs', 'stats'
    ]

    def __init__(self, **kwargs):
        self.chrs = kwargs.get(
            'chrs', None)
        self.stats = kwargs.get(
            'stats', RegionStatistics())
