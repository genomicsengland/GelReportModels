"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse
from protocols.protocol import avro_parse

import avro.schema

version = '5.0.0'


class ACMGClassification(object):
    """
    No documentation
    """
    pathogenic_variant = "pathogenic_variant"
    likely_pathogenic_variant = "likely_pathogenic_variant"
    variant_of_unknown_clinical_significance = "variant_of_unknown_clinical_significance"
    likely_benign_variant = "likely_benign_variant"
    benign_variant = "benign_variant"
    not_assessed = "not_assessed"

    def __hash__(self):
        return str(self).__hash__()


class Action(ProtocolElement):
    """
    A clinical action
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "Action", "fields": [{"doc":
"", "type": ["null", {"symbols": ["therapy", "therapeutic", "prognosis", "diagnosis"], "doc": "",
"type": "enum", "name": "ActionType"}], "name": "actionType"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type": ["null",
{"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name": "ActionStatus"}],
"name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type":
["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"},
{"doc": "", "type": "string", "name": "source"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionType",
        "evidenceType",
        "references",
        "source",
        "status",
        "url",
        "variantActionable",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionType', 'evidenceType', 'references', 'source',
        'status', 'url', 'variantActionable'
    ]

    def __init__(self, **kwargs):
        self.actionType = kwargs.get(
            'actionType', None)
        self.evidenceType = kwargs.get(
            'evidenceType', None)
        self.references = kwargs.get(
            'references', None)
        self.source = kwargs.get(
            'source', None)
        self.status = kwargs.get(
            'status', None)
        self.url = kwargs.get(
            'url', None)
        self.variantActionable = kwargs.get(
            'variantActionable', None)


class ActionStatus(object):
    """
    Clinical status of an action
    """
    clinical = "clinical"
    pre_clinical = "pre_clinical"

    def __hash__(self):
        return str(self).__hash__()


class ActionType(object):
    """
    Type of clinical action on a variant
    """
    therapy = "therapy"
    therapeutic = "therapeutic"
    prognosis = "prognosis"
    diagnosis = "diagnosis"

    def __hash__(self):
        return str(self).__hash__()


class Actionability(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    not_yet = "not_yet"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class AdditionalAnalysisPanel(ProtocolElement):
    """
    A panel of genes and the specific disease that it assesses
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AdditionalAnalysisPanel",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": {"doc": "", "type": "record",
"name": "GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "",
"type": ["null", "string"], "name": "panelVersion"}]}, "name": "panel"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "panel",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'panel': GenePanel,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'panel': GenePanel,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'panel', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.panel = kwargs.get(
            'panel', GenePanel())
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class AdditionalVariantsQuestions(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AdditionalVariantsQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
{"symbols": ["germline_susceptibility", "predicts_therapeutic_response", "prognostic",
"defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type": "enum", "name":
"CancerActionability"}, "type": "array"}, "name": "variantActionability"}, {"type": ["null",
"string"], "name": "otherVariantActionability"}, {"doc": "", "type": {"symbols":
["already_actioned", "actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum",
"name": "CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga", "na"], "doc": "", "type": "enum", "name":
"CancerTestedAdditional"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "otherVariantActionability",
        "validationAssayType",
        "variantActionability",
        "variantDetails",
        "variantTested",
        "variantUsability",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'otherVariantActionability', 'validationAssayType',
        'variantActionability', 'variantDetails', 'variantTested',
        'variantUsability'
    ]

    def __init__(self, **kwargs):
        self.otherVariantActionability = kwargs.get(
            'otherVariantActionability', None)
        self.validationAssayType = kwargs.get(
            'validationAssayType', None)
        self.variantActionability = kwargs.get(
            'variantActionability', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)
        self.variantTested = kwargs.get(
            'variantTested', None)
        self.variantUsability = kwargs.get(
            'variantUsability', None)


class AdoptedStatus(object):
    """
    adoptedin means adopted into the family     adoptedout means child
    belonged to the family and was adopted out
    """
    notadopted = "notadopted"
    adoptedin = "adoptedin"
    adoptedout = "adoptedout"

    def __hash__(self):
        return str(self).__hash__()


class AffectionStatus(object):
    """
    Affection Status
    """
    UNAFFECTED = "UNAFFECTED"
    AFFECTED = "AFFECTED"
    UNCERTAIN = "UNCERTAIN"

    def __hash__(self):
        return str(self).__hash__()


class AgeOfOnset(object):
    """
    No documentation
    """
    EMBRYONAL_ONSET = "EMBRYONAL_ONSET"
    FETAL_ONSET = "FETAL_ONSET"
    NEONATAL_ONSET = "NEONATAL_ONSET"
    INFANTILE_ONSET = "INFANTILE_ONSET"
    CHILDHOOD_ONSET = "CHILDHOOD_ONSET"
    JUVENILE_ONSET = "JUVENILE_ONSET"
    YOUNG_ADULT_ONSET = "YOUNG_ADULT_ONSET"
    LATE_ONSET = "LATE_ONSET"
    MIDDLE_AGE_ONSET = "MIDDLE_AGE_ONSET"

    def __hash__(self):
        return str(self).__hash__()


class AlleleFrequency(ProtocolElement):
    """
    The population allele frequency of a given variant in a given
    study and optionally population
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AlleleFrequency", "fields":
[{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type": "string", "name":
"population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternateFrequency",
        "population",
        "study",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternateFrequency', 'population', 'study'
    ]

    def __init__(self, **kwargs):
        self.alternateFrequency = kwargs.get(
            'alternateFrequency', None)
        self.population = kwargs.get(
            'population', None)
        self.study = kwargs.get(
            'study', None)


class AlleleOrigin(object):
    """
    Allele origin.  * `SO_0001781`: de novo variant.
    http://purl.obolibrary.org/obo/SO_0001781 * `SO_0001778`: germline
    variant. http://purl.obolibrary.org/obo/SO_0001778 * `SO_0001775`:
    maternal variant. http://purl.obolibrary.org/obo/SO_0001775 *
    `SO_0001776`: paternal variant.
    http://purl.obolibrary.org/obo/SO_0001776 * `SO_0001779`: pedigree
    specific variant. http://purl.obolibrary.org/obo/SO_0001779 *
    `SO_0001780`: population specific variant.
    http://purl.obolibrary.org/obo/SO_0001780 * `SO_0001777`: somatic
    variant. http://purl.obolibrary.org/obo/SO_0001777
    """
    de_novo_variant = "de_novo_variant"
    germline_variant = "germline_variant"
    maternal_variant = "maternal_variant"
    paternal_variant = "paternal_variant"
    pedigree_specific_variant = "pedigree_specific_variant"
    population_specific_variant = "population_specific_variant"
    somatic_variant = "somatic_variant"

    def __hash__(self):
        return str(self).__hash__()


class AnalysisPanel(ProtocolElement):
    """
    An analysis panel
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "AnalysisPanel",
"fields": [{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": "string",
"name": "panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}, {"doc": "",
"type": "string", "name": "reviewOutcome"}, {"doc": "", "type": "string", "name":
"multipleGeneticOrigins"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "multipleGeneticOrigins",
        "panelName",
        "panelVersion",
        "reviewOutcome",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'multipleGeneticOrigins', 'panelName', 'panelVersion',
        'reviewOutcome', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.multipleGeneticOrigins = kwargs.get(
            'multipleGeneticOrigins', None)
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)
        self.reviewOutcome = kwargs.get(
            'reviewOutcome', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class Ancestries(ProtocolElement):
    """
    Ancestries, defined as Ethnic category(ies) and Chi-square test
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Ancestries", "fields":
[{"doc": "", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H",
"J", "K", "P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chiSquare1KGenomesPhase3Pop",
        "fathersEthnicOrigin",
        "fathersOtherRelevantAncestry",
        "mothersEthnicOrigin",
        "mothersOtherRelevantAncestry",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chiSquare1KGenomesPhase3Pop': ChiSquare1KGenomesPhase3Pop,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'chiSquare1KGenomesPhase3Pop': ChiSquare1KGenomesPhase3Pop,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'chiSquare1KGenomesPhase3Pop', 'fathersEthnicOrigin',
        'fathersOtherRelevantAncestry', 'mothersEthnicOrigin',
        'mothersOtherRelevantAncestry'
    ]

    def __init__(self, **kwargs):
        self.chiSquare1KGenomesPhase3Pop = kwargs.get(
            'chiSquare1KGenomesPhase3Pop', None)
        self.fathersEthnicOrigin = kwargs.get(
            'fathersEthnicOrigin', None)
        self.fathersOtherRelevantAncestry = kwargs.get(
            'fathersOtherRelevantAncestry', None)
        self.mothersEthnicOrigin = kwargs.get(
            'mothersEthnicOrigin', None)
        self.mothersOtherRelevantAncestry = kwargs.get(
            'mothersOtherRelevantAncestry', None)


class Assembly(object):
    """
    The reference genome assembly
    """
    GRCh38 = "GRCh38"
    GRCh37 = "GRCh37"

    def __hash__(self):
        return str(self).__hash__()


class AuditLog(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "AuditLog", "fields": [{"doc":
"", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "string", "name":
"interpretationRequestVersion"}, {"type": {"symbols": ["C0", "C1", "C2", "C3", "C4", "C5", "C6",
"C7"], "doc": "", "type": "enum", "name": "Code"}, "name": "code"}, {"type": ["null", {"fields":
[{"type": {"items": "string", "type": "array"}, "name": "previousGroups"}, {"type": {"items":
"string", "type": "array"}, "name": "modifiedGroups"}], "type": "record", "name": "CaseShared"}],
"name": "caseShared"}, {"type": ["null", {"fields": [{"type": {"items": "string", "type": "array"},
"name": "previousSupportingEvidences"}, {"type": {"items": "string", "type": "array"}, "name":
"modifiedSupportingEvidences"}], "type": "record", "name": "SupportingEvidences"}], "name":
"supportingEvidences"}, {"type": ["null", {"items": {"fields": [{"type": {"doc": "", "type":
"record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type": "record",
"name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name": "reference"},
{"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38",
"GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"},
"name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "name":
"previousVariant"}, {"type": "ReportedVariant", "name": "modifiedVariant"}], "type": "record",
"name": "ModifiedVariant"}, "type": "array"}], "name": "modifiedVariants"}, {"type": ["null",
{"items": "ReportedVariant", "type": "array"}], "name": "addedVariants"}, {"type": ["null",
{"items": "ReportedVariant", "type": "array"}], "name": "removedVariants"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "addedVariants",
        "caseShared",
        "code",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "modifiedVariants",
        "removedVariants",
        "supportingEvidences",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'addedVariants': ReportedVariant,
            'caseShared': CaseShared,
            'modifiedVariants': ModifiedVariant,
            'removedVariants': ReportedVariant,
            'supportingEvidences': SupportingEvidences,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'addedVariants': ReportedVariant,
            'caseShared': CaseShared,
            'modifiedVariants': ModifiedVariant,
            'removedVariants': ReportedVariant,
            'supportingEvidences': SupportingEvidences,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'addedVariants', 'caseShared', 'code',
        'interpretationRequestId', 'interpretationRequestVersion',
        'modifiedVariants', 'removedVariants', 'supportingEvidences'
    ]

    def __init__(self, **kwargs):
        self.addedVariants = kwargs.get(
            'addedVariants', None)
        self.caseShared = kwargs.get(
            'caseShared', None)
        self.code = kwargs.get(
            'code', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.modifiedVariants = kwargs.get(
            'modifiedVariants', None)
        self.removedVariants = kwargs.get(
            'removedVariants', None)
        self.supportingEvidences = kwargs.get(
            'supportingEvidences', None)


class CancerActionability(object):
    """
    An enumeration Variant Actionability:       *
    `predicts_therapeutic_response`: Predicts therapeutic response
    * `prognostic`: Prognostic       * `defines_diagnosis_group`:
    Defines diagnosis group       * `eligibility_for_trial`:
    Eligibility for trial       * `germline_susceptibility`: Germline
    susceptibility       * `other`:  Other (please specify)
    """
    germline_susceptibility = "germline_susceptibility"
    predicts_therapeutic_response = "predicts_therapeutic_response"
    prognostic = "prognostic"
    defines_diagnosis_group = "defines_diagnosis_group"
    eligibility_for_trial = "eligibility_for_trial"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class CancerActionabilitySomatic(object):
    """
    The variant actionabilities: * `predicts_therapeutic_response`:
    Predicts therapeutic response * `prognostic`: Prognostic *
    `defines_diagnosis_group`: Defines diagnosis group *
    `eligibility_for_trial`: Eligibility for trial * `other`:  Other
    (please specify)
    """
    predicts_therapeutic_response = "predicts_therapeutic_response"
    prognostic = "prognostic"
    defines_diagnosis_group = "defines_diagnosis_group"
    eligibility_for_trial = "eligibility_for_trial"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class CancerActionableVariants(object):
    """
    Are the variants actionable? * `yes`: yes * `no`: no
    """
    yes = "yes"
    no = "no"

    def __hash__(self):
        return str(self).__hash__()


class CancerCaseLevelQuestions(ProtocolElement):
    """
    The questions for the cancer program exit questionnaire at case
    level
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerCaseLevelQuestions",
"fields": [{"doc": "", "type": "double", "name": "total_review_time"}, {"doc": "", "type": "double",
"name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name": "mdt2_time"}, {"doc": "",
"type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "", "type": ["null",
"double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"], "name":
"analytical_validation_time"}, {"doc": "", "type": "double", "name": "primary_reporting_time"},
{"doc": "", "type": "double", "name": "primary_authorisation_time"}, {"doc": "", "type": "double",
"name": "report_distribution_time"}, {"doc": "", "type": "double", "name": "total_time"}, {"doc":
"", "type": {"symbols": ["domain_1", "domain_1_and_2", "domain_1_2_and_suplementary"], "doc": "",
"type": "enum", "name": "ReviewedParts"}, "name": "reviewedInMdtWga"}, {"doc": "", "type":
{"symbols": ["yes", "no"], "doc": "", "type": "enum", "name": "CancerActionableVariants"}, "name":
"actionableVariants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionableVariants",
        "analytical_validation_time",
        "mdt1_time",
        "mdt2_time",
        "primary_authorisation_time",
        "primary_reporting_time",
        "report_distribution_time",
        "reviewedInMdtWga",
        "total_review_time",
        "total_time",
        "validation_assay_time",
        "wet_validation_time",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionableVariants', 'analytical_validation_time',
        'mdt1_time', 'mdt2_time', 'primary_authorisation_time',
        'primary_reporting_time', 'report_distribution_time',
        'reviewedInMdtWga', 'total_review_time', 'total_time',
        'validation_assay_time', 'wet_validation_time'
    ]

    def __init__(self, **kwargs):
        self.actionableVariants = kwargs.get(
            'actionableVariants', None)
        self.analytical_validation_time = kwargs.get(
            'analytical_validation_time', None)
        self.mdt1_time = kwargs.get(
            'mdt1_time', None)
        self.mdt2_time = kwargs.get(
            'mdt2_time', None)
        self.primary_authorisation_time = kwargs.get(
            'primary_authorisation_time', None)
        self.primary_reporting_time = kwargs.get(
            'primary_reporting_time', None)
        self.report_distribution_time = kwargs.get(
            'report_distribution_time', None)
        self.reviewedInMdtWga = kwargs.get(
            'reviewedInMdtWga', None)
        self.total_review_time = kwargs.get(
            'total_review_time', None)
        self.total_time = kwargs.get(
            'total_time', None)
        self.validation_assay_time = kwargs.get(
            'validation_assay_time', None)
        self.wet_validation_time = kwargs.get(
            'wet_validation_time', None)


class CancerExitQuestionnaire(ProtocolElement):
    """
    The cancer program exit questionnaire
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerExitQuestionnaire",
"fields": [{"doc": "", "type": "string", "name": "eventDate"}, {"doc": "", "type": "string", "name":
"reporter"}, {"doc": "", "type": {"doc": "", "type": "record", "name": "CancerCaseLevelQuestions",
"fields": [{"doc": "", "type": "double", "name": "total_review_time"}, {"doc": "", "type": "double",
"name": "mdt1_time"}, {"doc": "", "type": ["null", "double"], "name": "mdt2_time"}, {"doc": "",
"type": ["null", "double"], "name": "validation_assay_time"}, {"doc": "", "type": ["null",
"double"], "name": "wet_validation_time"}, {"doc": "", "type": ["null", "double"], "name":
"analytical_validation_time"}, {"doc": "", "type": "double", "name": "primary_reporting_time"},
{"doc": "", "type": "double", "name": "primary_authorisation_time"}, {"doc": "", "type": "double",
"name": "report_distribution_time"}, {"doc": "", "type": "double", "name": "total_time"}, {"doc":
"", "type": {"symbols": ["domain_1", "domain_1_and_2", "domain_1_2_and_suplementary"], "doc": "",
"type": "enum", "name": "ReviewedParts"}, "name": "reviewedInMdtWga"}, {"doc": "", "type":
{"symbols": ["yes", "no"], "doc": "", "type": "enum", "name": "CancerActionableVariants"}, "name":
"actionableVariants"}]}, "name": "caseLevelQuestions"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "CancerSomaticVariantLevelQuestions", "fields": [{"doc": "",
"type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items": {"symbols":
["predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionabilitySomatic"}, "type": "array"},
"name": "variantActionability"}, {"doc": "", "type": ["null", "string"], "name":
"otherVariantActionability"}, {"doc": "", "type": {"symbols": ["already_actioned",
"actioned_result_of_this_wga", "not_yet_actioned"], "doc": "", "type": "enum", "name":
"CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type": {"symbols":
["not_indicated_for_patient_care", "no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga"], "doc": "", "type": "enum", "name": "CancerTested"}, "name":
"variantTested"}, {"doc": "", "type": "string", "name": "validationAssayType"}]}, "type": "array"}],
"name": "somaticVariantLevelQuestions"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string",
"name": "variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
"CancerTested", "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}]}, "type": "array"}], "name": "germlineVariantLevelQuestions"}, {"doc": "",
"type": ["null", "string"], "name": "additionalComments"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"items":
"CancerActionability", "type": "array"}, "name": "variantActionability"}, {"type": ["null",
"string"], "name": "otherVariantActionability"}, {"doc": "", "type": "CancerUsabilitySomatic",
"name": "variantUsability"}, {"doc": "", "type": {"symbols": ["not_indicated_for_patient_care",
"no_orthologous_test_available", "test_performed_prior_to_wga",
"technical_validation_following_wga", "na"], "doc": "", "type": "enum", "name":
"CancerTestedAdditional"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "type": "record", "name": "AdditionalVariantsQuestions"}, "type":
"array"}], "name": "otherActionableVariants"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "caseLevelQuestions",
        "eventDate",
        "germlineVariantLevelQuestions",
        "otherActionableVariants",
        "reporter",
        "somaticVariantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'caseLevelQuestions': CancerCaseLevelQuestions,
            'germlineVariantLevelQuestions': CancerGermlineVariantLevelQuestions,
            'otherActionableVariants': AdditionalVariantsQuestions,
            'somaticVariantLevelQuestions': CancerSomaticVariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'caseLevelQuestions': CancerCaseLevelQuestions,
            'germlineVariantLevelQuestions': CancerGermlineVariantLevelQuestions,
            'otherActionableVariants': AdditionalVariantsQuestions,
            'somaticVariantLevelQuestions': CancerSomaticVariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'caseLevelQuestions', 'eventDate',
        'germlineVariantLevelQuestions', 'otherActionableVariants',
        'reporter', 'somaticVariantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.caseLevelQuestions = kwargs.get(
            'caseLevelQuestions', CancerCaseLevelQuestions())
        self.eventDate = kwargs.get(
            'eventDate', None)
        self.germlineVariantLevelQuestions = kwargs.get(
            'germlineVariantLevelQuestions', None)
        self.otherActionableVariants = kwargs.get(
            'otherActionableVariants', None)
        self.reporter = kwargs.get(
            'reporter', None)
        self.somaticVariantLevelQuestions = kwargs.get(
            'somaticVariantLevelQuestions', None)


class CancerGermlineVariantLevelQuestions(ProtocolElement):
    """
    The questions for the cancer program exit questionnaire for
    germline variants
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerGermlineVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["germline_susceptibility",
"predicts_therapeutic_response", "prognostic", "defines_diagnosis_group", "eligibility_for_trial",
"other"], "doc": "", "type": "enum", "name": "CancerActionability"}, "type": "array"}, "name":
"variantActionability"}, {"type": ["null", "string"], "name": "otherVariantActionability"}, {"doc":
"", "type": {"symbols": ["already_actioned", "actioned_result_of_this_wga"], "doc": "", "type":
"enum", "name": "CancerUsabilityGermline"}, "name": "variantUsability"}, {"doc": "", "type":
{"symbols": ["not_indicated_for_patient_care", "no_orthologous_test_available",
"test_performed_prior_to_wga", "technical_validation_following_wga"], "doc": "", "type": "enum",
"name": "CancerTested"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "otherVariantActionability",
        "validationAssayType",
        "variantActionability",
        "variantDetails",
        "variantTested",
        "variantUsability",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'otherVariantActionability', 'validationAssayType',
        'variantActionability', 'variantDetails', 'variantTested',
        'variantUsability'
    ]

    def __init__(self, **kwargs):
        self.otherVariantActionability = kwargs.get(
            'otherVariantActionability', None)
        self.validationAssayType = kwargs.get(
            'validationAssayType', None)
        self.variantActionability = kwargs.get(
            'variantActionability', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)
        self.variantTested = kwargs.get(
            'variantTested', None)
        self.variantUsability = kwargs.get(
            'variantUsability', None)


class CancerInterpretationRequest(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretationRequest",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "genomeAssembly"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name":
"workspace"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "File",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"},
{"doc": "", "type": "string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF",
"VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null",
"string"], "name": "md5Sum"}]}, "type": "array"}], "name": "bams"}, {"doc": "", "type": ["null",
{"items": "File", "type": "array"}], "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File",
"type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name":
"annotationFile"}, {"doc": "", "type": ["null", {"values": "File", "type": "map"}], "name":
"otherFiles"}, {"doc": "", "type": ["null", {"namespace": "org.gel.models.participant.avro", "type":
"record", "name": "CancerParticipant", "fields": [{"doc": "", "type": ["null", "int"], "name":
"yearOfBirth"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"morphology"}, {"doc": "", "type": "boolean", "name": "readyForAnalysis"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default": false, "doc":
"", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "primaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", "string"],
"name": "center"}, {"doc": "", "type": "string", "name": "individualId"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisDisease"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisSubDisease"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "assignedICD10"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"TumourSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL",
"IIP", "MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"},
{"doc": "", "type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST",
"CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC",
"HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL",
"OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS",
"UPPER_GASTROINTESTINAL", "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}]}, "type": "array"}, "name":
"tumourSamples"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GermlineSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
["null", "SampleSource"], "name": "source"}, {"doc": "", "type": ["null", "Product"], "name":
"product"}, {"doc": "", "type": ["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc":
"", "type": ["null", "ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null",
"string"], "name": "clinicalSampleDateTime"}]}, "type": "array"}, "name": "germlineSamples"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "MatchedSamples", "fields":
[{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type": ["null",
"string"], "name": "tumourSampleId"}]}, "type": "array"}, "name": "matchedSamples"}, {"doc": "",
"type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"}],
"doc": ""}], "name": "cancerParticipant"}, {"doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name": "otherFamilyHistory"},
{"doc": "", "type": ["null", {"values": {"values": {"values": "float", "type": "map"}, "type":
"map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "InterpretationFlag", "fields": [{"doc": "", "type":
{"symbols": ["mixed_chemistries", "mixedLab_preparation", "low_tumour_purity",
"uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype", "high_cnv_count",
"high_estimate_human_contamination_fraction", "mixed_recruiting_gmc", "suspected_mosaicism",
"low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}]}, "type": "array"}], "name": "interpretationFlags"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "annotationFile",
        "bams",
        "bigWigs",
        "cancerParticipant",
        "genePanelsCoverage",
        "genomeAssembly",
        "internalStudyId",
        "interpretationFlags",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "otherFamilyHistory",
        "otherFiles",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'cancerParticipant': CancerParticipant,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'cancerParticipant': CancerParticipant,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'annotationFile', 'bams', 'bigWigs',
        'cancerParticipant', 'genePanelsCoverage', 'genomeAssembly',
        'internalStudyId', 'interpretationFlags',
        'interpretationRequestId', 'interpretationRequestVersion',
        'otherFamilyHistory', 'otherFiles', 'vcfs', 'versionControl',
        'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.cancerParticipant = kwargs.get(
            'cancerParticipant', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomeAssembly = kwargs.get(
            'genomeAssembly', None)
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.interpretationFlags = kwargs.get(
            'interpretationFlags', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class CancerInterpretedGenome(ProtocolElement):
    """
    A interpreted genome for the cancer program. This holds the list
    of candidate variants reported by an interpretation     service
    together with all the relevant information that identify the case
    and how these conclusions were reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CancerInterpretedGenome",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "", "type": {"doc": "",
"type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols":
["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"ReportEventCancer", "fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "",
"type": {"symbols": ["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type":
"enum", "name": "GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name":
"ensemblId"}, {"doc": "", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name":
"genomicEntities"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type":
["null", "string"], "name": "name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "",
"type": ["null", {"items": {"doc": "", "type": "record", "name": "Action", "fields": [{"doc": "",
"type": ["null", {"symbols": ["therapy", "therapeutic", "prognosis", "diagnosis"], "doc": "",
"type": "enum", "name": "ActionType"}], "name": "actionType"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type": ["null",
{"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name": "ActionStatus"}],
"name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"}, {"doc": "", "type":
["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"},
{"doc": "", "type": "string", "name": "source"}]}, "type": "array"}], "name": "actions"}, {"doc":
"", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"],
"name": "eventJustification"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc":
"", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic",
"pathogenic", "uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"items": {"symbols": ["oncogene",
"tumor_suppressor_gene", "both"], "doc": "", "type": "enum", "name": "RoleInCancer"}, "type":
"array"}], "name": "roleInCancer"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1",
"TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]},
"type": "array"}, "name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name":
"ihp"}, {"doc": "", "type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type":
["null", "string"], "name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string",
"name": "study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float",
"name": "alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "",
"type": ["null", {"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "comments"}, {"doc": "", "type": {"items": "AlleleOrigin", "type": "array"},
"name": "alleleOrigins"}]}, "type": "array"}, "name": "variants"}, {"doc": "", "type": {"values":
"string", "type": "map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values":
"string", "type": "map"}, "name": "softwareVersions"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "comments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "comments",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "interpretationService",
        "referenceDatabasesVersions",
        "reportUrl",
        "softwareVersions",
        "variants",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'comments', 'interpretationRequestId',
        'interpretationRequestVersion', 'interpretationService',
        'referenceDatabasesVersions', 'reportUrl', 'softwareVersions',
        'variants', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.comments = kwargs.get(
            'comments', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.interpretationService = kwargs.get(
            'interpretationService', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportUrl = kwargs.get(
            'reportUrl', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.variants = kwargs.get(
            'variants', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())


class CancerParticipant(ProtocolElement):
    """
    This defines a Cancer Participant
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "CancerParticipant",
"fields": [{"doc": "", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "morphology"}, {"doc": "", "type": "boolean", "name":
"readyForAnalysis"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"ConsentStatus", "fields": [{"default": false, "doc": "", "type": "boolean", "name":
"programmeConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"primaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean", "name":
"carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", "string"],
"name": "center"}, {"doc": "", "type": "string", "name": "individualId"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisDisease"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "primaryDiagnosisSubDisease"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "assignedICD10"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"TumourSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL",
"IIP", "MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"},
{"doc": "", "type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST",
"CARCINOMA_OF_UNKNOWN_PRIMARY", "CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC",
"HEPATOPANCREATOBILIARY", "LUNG", "MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL",
"OVARIAN", "PROSTATE", "RENAL", "SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS",
"UPPER_GASTROINTESTINAL", "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}]}, "type": "array"}, "name":
"tumourSamples"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GermlineSample", "fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
"int", "name": "labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type":
["null", "SampleSource"], "name": "source"}, {"doc": "", "type": ["null", "Product"], "name":
"product"}, {"doc": "", "type": ["null", "PreparationMethod"], "name": "preparationMethod"}, {"doc":
"", "type": ["null", "ProgrammePhase"], "name": "programmePhase"}, {"doc": "", "type": ["null",
"string"], "name": "clinicalSampleDateTime"}]}, "type": "array"}, "name": "germlineSamples"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "MatchedSamples", "fields":
[{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type": ["null",
"string"], "name": "tumourSampleId"}]}, "type": "array"}, "name": "matchedSamples"}, {"doc": "",
"type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInformation",
        "assignedICD10",
        "center",
        "consentStatus",
        "germlineSamples",
        "individualId",
        "matchedSamples",
        "morphology",
        "primaryDiagnosisDisease",
        "primaryDiagnosisSubDisease",
        "readyForAnalysis",
        "sex",
        "tumourSamples",
        "versionControl",
        "yearOfBirth",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
            'germlineSamples': GermlineSample,
            'matchedSamples': MatchedSamples,
            'tumourSamples': TumourSample,
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
            'germlineSamples': GermlineSample,
            'matchedSamples': MatchedSamples,
            'tumourSamples': TumourSample,
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInformation', 'assignedICD10', 'center',
        'consentStatus', 'germlineSamples', 'individualId',
        'matchedSamples', 'morphology', 'primaryDiagnosisDisease',
        'primaryDiagnosisSubDisease', 'readyForAnalysis', 'sex',
        'tumourSamples', 'versionControl', 'yearOfBirth'
    ]

    def __init__(self, **kwargs):
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.assignedICD10 = kwargs.get(
            'assignedICD10', None)
        self.center = kwargs.get(
            'center', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.germlineSamples = kwargs.get(
            'germlineSamples', None)
        self.individualId = kwargs.get(
            'individualId', None)
        self.matchedSamples = kwargs.get(
            'matchedSamples', None)
        self.morphology = kwargs.get(
            'morphology', None)
        self.primaryDiagnosisDisease = kwargs.get(
            'primaryDiagnosisDisease', None)
        self.primaryDiagnosisSubDisease = kwargs.get(
            'primaryDiagnosisSubDisease', None)
        self.readyForAnalysis = kwargs.get(
            'readyForAnalysis', None)
        self.sex = kwargs.get(
            'sex', None)
        self.tumourSamples = kwargs.get(
            'tumourSamples', None)
        self.versionControl = kwargs.get(
            'versionControl', None)
        self.yearOfBirth = kwargs.get(
            'yearOfBirth', None)


class CancerSomaticVariantLevelQuestions(ProtocolElement):
    """
    The questions for the cancer program exit questionnaire for
    somatic variants
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"CancerSomaticVariantLevelQuestions", "fields": [{"doc": "", "type": "string", "name":
"variantDetails"}, {"doc": "", "type": {"items": {"symbols": ["predicts_therapeutic_response",
"prognostic", "defines_diagnosis_group", "eligibility_for_trial", "other"], "doc": "", "type":
"enum", "name": "CancerActionabilitySomatic"}, "type": "array"}, "name": "variantActionability"},
{"doc": "", "type": ["null", "string"], "name": "otherVariantActionability"}, {"doc": "", "type":
{"symbols": ["already_actioned", "actioned_result_of_this_wga", "not_yet_actioned"], "doc": "",
"type": "enum", "name": "CancerUsabilitySomatic"}, "name": "variantUsability"}, {"doc": "", "type":
{"symbols": ["not_indicated_for_patient_care", "no_orthologous_test_available",
"test_performed_prior_to_wga", "technical_validation_following_wga"], "doc": "", "type": "enum",
"name": "CancerTested"}, "name": "variantTested"}, {"doc": "", "type": "string", "name":
"validationAssayType"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "otherVariantActionability",
        "validationAssayType",
        "variantActionability",
        "variantDetails",
        "variantTested",
        "variantUsability",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'otherVariantActionability', 'validationAssayType',
        'variantActionability', 'variantDetails', 'variantTested',
        'variantUsability'
    ]

    def __init__(self, **kwargs):
        self.otherVariantActionability = kwargs.get(
            'otherVariantActionability', None)
        self.validationAssayType = kwargs.get(
            'validationAssayType', None)
        self.variantActionability = kwargs.get(
            'variantActionability', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)
        self.variantTested = kwargs.get(
            'variantTested', None)
        self.variantUsability = kwargs.get(
            'variantUsability', None)


class CancerTested(object):
    """
    Was the variant validated with an orthogonal technology? *
    `not_indicated_for_patient_care`: No: not indicated for patient
    care at this time * `no_orthologous_test_available`: No: no
    orthologous test available * `test_performed_prior_to_wga`: Yes:
    test performed prior to receiving WGA (eg using standard-of-care
    assay such as panel testing, or sanger sequencing) *
    `technical_validation_following_WGA`: Yes: technical validation
    performed/planned following receiving this WGA
    """
    not_indicated_for_patient_care = "not_indicated_for_patient_care"
    no_orthologous_test_available = "no_orthologous_test_available"
    test_performed_prior_to_wga = "test_performed_prior_to_wga"
    technical_validation_following_wga = "technical_validation_following_wga"

    def __hash__(self):
        return str(self).__hash__()


class CancerTestedAdditional(object):
    """
    An enumeration Variant tested:       *
    `not_indicated_for_patient_care`: No: not indicated for patient
    care at this time       * `no_orthologous_test_available`: No: no
    orthologous test available       * `test_performed_prior_to_wga`:
    Yes: test performed prior to receiving WGA (eg using
    standard-of-care assay such as panel testing, or sanger
    sequencing)       * `technical_validation_following_wga`: Yes:
    technical validation performed/planned following receiving this
    WGA       * `na`: N/A
    """
    not_indicated_for_patient_care = "not_indicated_for_patient_care"
    no_orthologous_test_available = "no_orthologous_test_available"
    test_performed_prior_to_wga = "test_performed_prior_to_wga"
    technical_validation_following_wga = "technical_validation_following_wga"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class CancerUsabilityGermline(object):
    """
    Variant usability for germline variants: * `already_actioned`:
    Already actioned (i.e. prior to receiving this WGA) *
    `actioned_result_of_this_wga`: actioned as a result of receiving
    this WGA
    """
    already_actioned = "already_actioned"
    actioned_result_of_this_wga = "actioned_result_of_this_wga"

    def __hash__(self):
        return str(self).__hash__()


class CancerUsabilitySomatic(object):
    """
    Variant usability for somatic variants: * `already_actioned`:
    Already actioned (i.e. prior to receiving this WGA) *
    `actioned_result_of_this_wga`: actioned as a result of receiving
    this WGA * `not_yet_actioned`: not yet actioned, but potentially
    actionable in the future
    """
    already_actioned = "already_actioned"
    actioned_result_of_this_wga = "actioned_result_of_this_wga"
    not_yet_actioned = "not_yet_actioned"

    def __hash__(self):
        return str(self).__hash__()


class CaseShared(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "CaseShared", "fields":
[{"type": {"items": "string", "type": "array"}, "name": "previousGroups"}, {"type": {"items":
"string", "type": "array"}, "name": "modifiedGroups"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedGroups",
        "previousGroups",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedGroups', 'previousGroups'
    ]

    def __init__(self, **kwargs):
        self.modifiedGroups = kwargs.get(
            'modifiedGroups', None)
        self.previousGroups = kwargs.get(
            'previousGroups', None)


class CaseSolvedFamily(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    partially = "partially"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class ChiSquare1KGenomesPhase3Pop(ProtocolElement):
    """
    Chi-square test for goodness of fit of this sample to 1000 Genomes
    Phase 3 populations
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name":
"ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR", "AMR", "EAS",
"EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "chiSquare",
        "kgPopCategory",
        "kgSuperPopCategory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'chiSquare', 'kgPopCategory', 'kgSuperPopCategory'
    ]

    def __init__(self, **kwargs):
        self.chiSquare = kwargs.get(
            'chiSquare', None)
        self.kgPopCategory = kwargs.get(
            'kgPopCategory', None)
        self.kgSuperPopCategory = kwargs.get(
            'kgSuperPopCategory', None)


class ClinicalReportCancer(ProtocolElement):
    """
    A clinical report for the cancer program. This holds the list of
    reported variants by a GMC together with all     the relevant
    information that identify the case and how these conclusions were
    reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportCancer",
"fields": [{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type":
"int", "name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name":
"reportingDate"}, {"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null",
{"items": {"doc": "", "type": "record", "name": "ReportedVariantCancer", "fields": [{"doc": "",
"type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type":
"string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "",
"type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name":
"assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name":
"dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}],
"name": "variants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type":
{"values": "string", "type": "map"}, "name": "softwareVersions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "genomicInterpretation",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "referenceDatabasesVersions",
        "references",
        "reportingDate",
        "softwareVersions",
        "user",
        "variants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariantCancer,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'genomicInterpretation', 'interpretationRequestId',
        'interpretationRequestVersion', 'referenceDatabasesVersions',
        'references', 'reportingDate', 'softwareVersions', 'user',
        'variants'
    ]

    def __init__(self, **kwargs):
        self.genomicInterpretation = kwargs.get(
            'genomicInterpretation', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.references = kwargs.get(
            'references', None)
        self.reportingDate = kwargs.get(
            'reportingDate', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.user = kwargs.get(
            'user', None)
        self.variants = kwargs.get(
            'variants', None)


class ClinicalReportRD(ProtocolElement):
    """
    A clinical report for the rare disease program. This holds the
    list of reported variants by a GMC together with all     the
    relevant information that identify the case and how these
    conclusions were reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ClinicalReportRD", "fields":
[{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int",
"name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "reportingDate"},
{"doc": "", "type": "string", "name": "user"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols":
["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"},
"name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}],
"name": "variants"}, {"doc": "", "type": "string", "name": "genomicInterpretation"}, {"doc": "",
"type": ["null", {"items": {"doc": "", "type": "record", "name": "AdditionalAnalysisPanel",
"fields": [{"type": "string", "name": "specificDisease"}, {"type": "GenePanel", "name": "panel"}]},
"type": "array"}], "name": "additionalAnalysisPanels"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "references"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type":
"map"}, "name": "softwareVersions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalAnalysisPanels",
        "genomicInterpretation",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "referenceDatabasesVersions",
        "references",
        "reportingDate",
        "softwareVersions",
        "user",
        "variants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAnalysisPanels': AdditionalAnalysisPanel,
            'variants': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'additionalAnalysisPanels': AdditionalAnalysisPanel,
            'variants': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalAnalysisPanels', 'genomicInterpretation',
        'interpretationRequestId', 'interpretationRequestVersion',
        'referenceDatabasesVersions', 'references', 'reportingDate',
        'softwareVersions', 'user', 'variants'
    ]

    def __init__(self, **kwargs):
        self.additionalAnalysisPanels = kwargs.get(
            'additionalAnalysisPanels', None)
        self.genomicInterpretation = kwargs.get(
            'genomicInterpretation', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.references = kwargs.get(
            'references', None)
        self.reportingDate = kwargs.get(
            'reportingDate', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.user = kwargs.get(
            'user', None)
        self.variants = kwargs.get(
            'variants', None)


class ClinicalSignificance(object):
    """
    No documentation
    """
    benign = "benign"
    likely_benign = "likely_benign"
    VUS = "VUS"
    likely_pathogenic = "likely_pathogenic"
    pathogenic = "pathogenic"
    uncertain_significance = "uncertain_significance"

    def __hash__(self):
        return str(self).__hash__()


class ClinicalUtility(object):
    """
    No documentation
    """
    none = "none"
    change_in_medication = "change_in_medication"
    surgical_option = "surgical_option"
    additional_surveillance_for_proband_or_relatives = "additional_surveillance_for_proband_or_relatives"
    clinical_trial_eligibility = "clinical_trial_eligibility"
    informs_reproductive_choice = "informs_reproductive_choice"
    unknown = "unknown"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class Code(object):
    """
    This code define the change type, it can define a general change
    in the case as CLOSED or can define a change in one or more
    variants:  * `C0`: **Case Closed successfully**: Clinical Report
    was generated with **one or more Candidate Variants**. * `C1`:
    **Case Closed unsuccessfully**: Clinical Report couldn't be
    generated because **no Candidate Variants were found**. * `C2`:
    **Case Blocked**: Errors were found in this cases and was sent to
    quarantine for further investigation * `C3`: **Case Shared**: This
    cases was shared with other group of users. * `C4`: **Supporting
    evidence change**: One or More supporting evidence were modified
    to the cases __(See ClinicalReport)__. * `C5`: **Variant added**:
    One or more variant were selected as Candidate Variants. * `C6`:
    **Variant removed**: One or more variant were removed as Candidate
    Variants. * `C7`: **Variant modified**: One or more Candidate
    Variants were modified __(Any change or comment over this variants
    should be capture)__.
    """
    C0 = "C0"
    C1 = "C1"
    C2 = "C2"
    C3 = "C3"
    C4 = "C4"
    C5 = "C5"
    C6 = "C6"
    C7 = "C7"

    def __hash__(self):
        return str(self).__hash__()


class ConfirmationDecision(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ConfirmationOutcome(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ConsentStatus(ProtocolElement):
    """
    Consent Status
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "ConsentStatus",
"fields": [{"default": false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'carrierStatusConsent', 'primaryFindingConsent',
        'programmeConsent', 'secondaryFindingConsent'
    ]

    def __init__(self, **kwargs):
        self.carrierStatusConsent = kwargs.get(
            'carrierStatusConsent', False)
        self.primaryFindingConsent = kwargs.get(
            'primaryFindingConsent', False)
        self.programmeConsent = kwargs.get(
            'programmeConsent', False)
        self.secondaryFindingConsent = kwargs.get(
            'secondaryFindingConsent', False)


class DiseasePenetrance(ProtocolElement):
    """
    A disease penetrance definition
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "DiseasePenetrance",
"fields": [{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "penetrance",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'penetrance', 'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class Disorder(ProtocolElement):
    """
    This is quite GEL specific. This is the way is stored in
    ModelCatalogue and PanelApp.     Currently all specific disease
    titles are assigned to a disease subgroup so really only
    specificDisease needs to be     completed but we add the others
    for generality
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Disorder", "fields":
[{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"}, {"doc": "", "type": ["null",
"string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null", "string"], "name":
"specificDisease"}, {"doc": "", "type": ["null", "float"], "name": "ageOfOnset"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "diseaseGroup",
        "diseaseSubGroup",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'diseaseGroup', 'diseaseSubGroup',
        'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.diseaseGroup = kwargs.get(
            'diseaseGroup', None)
        self.diseaseSubGroup = kwargs.get(
            'diseaseSubGroup', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class DrugResponseClassification(object):
    """
    No documentation
    """
    responsive = "responsive"
    resistant = "resistant"
    toxicity = "toxicity"
    indication = "indication"
    contraindication = "contraindication"
    dosing = "dosing"
    increased_monitoring = "increased_monitoring"
    efficacy = "efficacy"

    def __hash__(self):
        return str(self).__hash__()


class EthnicCategory(object):
    """
    This is the list of ethnicities in ONS16      * `D`:  Mixed: White
    and Black Caribbean     * `E`:  Mixed: White and Black African
    * `F`:  Mixed: White and Asian     * `G`:  Mixed: Any other mixed
    background     * `A`:  White: British     * `B`:  White: Irish
    * `C`:  White: Any other White background     * `L`:  Asian or
    Asian British: Any other Asian background     * `M`:  Black or
    Black British: Caribbean     * `N`:  Black or Black British:
    African     * `H`:  Asian or Asian British: Indian     * `J`:
    Asian or Asian British: Pakistani     * `K`:  Asian or Asian
    British: Bangladeshi     * `P`:  Black or Black British: Any other
    Black background     * `S`:  Other Ethnic Groups: Any other ethnic
    group     * `R`:  Other Ethnic Groups: Chinese     * `Z`:  Not
    stated
    """
    D = "D"
    E = "E"
    F = "F"
    G = "G"
    A = "A"
    B = "B"
    C = "C"
    L = "L"
    M = "M"
    N = "N"
    H = "H"
    J = "J"
    K = "K"
    P = "P"
    S = "S"
    R = "R"
    Z = "Z"

    def __hash__(self):
        return str(self).__hash__()


class FamiliarRelationship(object):
    """
    Familiar relationship from pedrigree
    """
    TwinsMonozygous = "TwinsMonozygous"
    TwinsDizygous = "TwinsDizygous"
    TwinsUnknown = "TwinsUnknown"
    FullSibling = "FullSibling"
    FullSiblingF = "FullSiblingF"
    FullSiblingM = "FullSiblingM"
    Mother = "Mother"
    Father = "Father"
    Son = "Son"
    Daughter = "Daughter"
    ChildOfUnknownSex = "ChildOfUnknownSex"
    MaternalAunt = "MaternalAunt"
    MaternalUncle = "MaternalUncle"
    MaternalUncleOrAunt = "MaternalUncleOrAunt"
    PaternalAunt = "PaternalAunt"
    PaternalUncle = "PaternalUncle"
    PaternalUncleOrAunt = "PaternalUncleOrAunt"
    MaternalGrandmother = "MaternalGrandmother"
    PaternalGrandmother = "PaternalGrandmother"
    MaternalGrandfather = "MaternalGrandfather"
    PaternalGrandfather = "PaternalGrandfather"
    DoubleFirstCousin = "DoubleFirstCousin"
    MaternalCousinSister = "MaternalCousinSister"
    PaternalCousinSister = "PaternalCousinSister"
    MaternalCousinBrother = "MaternalCousinBrother"
    PaternalCousinBrother = "PaternalCousinBrother"
    Cousin = "Cousin"
    Spouse = "Spouse"
    Other = "Other"
    RelationIsNotClear = "RelationIsNotClear"
    Unknown = "Unknown"

    def __hash__(self):
        return str(self).__hash__()


class FamilyLevelQuestions(ProtocolElement):
    """
    The family level questions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "FamilyLevelQuestions",
"fields": [{"doc": "", "type": {"symbols": ["yes", "no", "partially", "unknown"], "type": "enum",
"name": "CaseSolvedFamily"}, "name": "caseSolvedFamily"}, {"doc": "", "type": {"symbols": ["yes",
"no"], "type": "enum", "name": "SegregationQuestion"}, "name": "segregationQuestion"}, {"doc": "",
"type": "string", "name": "additionalComments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalComments",
        "caseSolvedFamily",
        "segregationQuestion",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalComments', 'caseSolvedFamily',
        'segregationQuestion'
    ]

    def __init__(self, **kwargs):
        self.additionalComments = kwargs.get(
            'additionalComments', None)
        self.caseSolvedFamily = kwargs.get(
            'caseSolvedFamily', None)
        self.segregationQuestion = kwargs.get(
            'segregationQuestion', None)


class FamilyQCState(object):
    """
    FamilyQCState
    """
    noState = "noState"
    passedMedicalReviewReadyForInterpretation = "passedMedicalReviewReadyForInterpretation"
    passedMedicalReviewNotReadyForInterpretation = "passedMedicalReviewNotReadyForInterpretation"
    queryToGel = "queryToGel"
    queryToGMC = "queryToGMC"
    failed = "failed"

    def __hash__(self):
        return str(self).__hash__()


class File(ProtocolElement):
    """
    This defines a file     This record is uniquely defined by the
    sample identfier and an URI     Currently sample identifier can be
    a single string or a list of strings if multiple samples are
    associated with the same file     *
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "File", "fields": [{"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"}, {"doc": "", "type":
"string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF", "VCF_small",
"VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV", "VCF_SV_CNV", "SVG",
"ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES", "COVERAGE"], "type":
"enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null", "string"], "name":
"md5Sum"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "fileType",
        "md5Sum",
        "sampleId",
        "uriFile",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fileType', 'md5Sum', 'sampleId', 'uriFile'
    ]

    def __init__(self, **kwargs):
        self.fileType = kwargs.get(
            'fileType', None)
        self.md5Sum = kwargs.get(
            'md5Sum', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.uriFile = kwargs.get(
            'uriFile', None)


class FileType(object):
    """
    No documentation
    """
    BAM = "BAM"
    gVCF = "gVCF"
    VCF_small = "VCF_small"
    VCF_somatic_small = "VCF_somatic_small"
    VCF_CNV = "VCF_CNV"
    VCF_somatic_CNV = "VCF_somatic_CNV"
    VCF_SV = "VCF_SV"
    VCF_somatic_SV = "VCF_somatic_SV"
    VCF_SV_CNV = "VCF_SV_CNV"
    SVG = "SVG"
    ANN = "ANN"
    BigWig = "BigWig"
    MD5Sum = "MD5Sum"
    ROH = "ROH"
    OTHER = "OTHER"
    PARTITION = "PARTITION"
    VARIANT_FREQUENCIES = "VARIANT_FREQUENCIES"
    COVERAGE = "COVERAGE"

    def __hash__(self):
        return str(self).__hash__()


class GenePanel(ProtocolElement):
    """
    A panel of genes
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "GenePanel", "fields":
[{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "panelName",
        "panelVersion",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'panelName', 'panelVersion'
    ]

    def __init__(self, **kwargs):
        self.panelName = kwargs.get(
            'panelName', None)
        self.panelVersion = kwargs.get(
            'panelVersion', None)


class GenomicEntity(ProtocolElement):
    """
    A genomic feature
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "GenomicEntity", "fields":
[{"doc": "", "type": {"symbols": ["regulatory_region", "gene", "transcript", "intergenic"], "doc":
"", "type": "enum", "name": "GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string",
"name": "ensemblId"}, {"doc": "", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "otherIds"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ensemblId",
        "geneSymbol",
        "otherIds",
        "type",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ensemblId', 'geneSymbol', 'otherIds', 'type'
    ]

    def __init__(self, **kwargs):
        self.ensemblId = kwargs.get(
            'ensemblId', None)
        self.geneSymbol = kwargs.get(
            'geneSymbol', None)
        self.otherIds = kwargs.get(
            'otherIds', None)
        self.type = kwargs.get(
            'type', None)


class GenomicEntityType(object):
    """
    Types of genomic features:  * `regulatory_region`: a regulatory
    region * `gene`: a gene * `transcript`: a transcript *
    `intergenic`: an intergenic region
    """
    regulatory_region = "regulatory_region"
    gene = "gene"
    transcript = "transcript"
    intergenic = "intergenic"

    def __hash__(self):
        return str(self).__hash__()


class GermlineSample(ProtocolElement):
    """
    A germline sample
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "GermlineSample",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type": ["null",
{"symbols": ["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS",
"BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type":
"enum", "name": "SampleSource"}], "name": "source"}, {"doc": "", "type": ["null", {"symbols":
["DNA", "RNA"], "type": "enum", "name": "Product"}], "name": "product"}, {"doc": "", "type":
["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE", "CD128_SORTED_CELLS", "ASPIRATE"], "type":
"enum", "name": "PreparationMethod"}], "name": "preparationMethod"}, {"doc": "", "type": ["null",
{"symbols": ["CRUK", "OXFORD", "CLL", "IIP", "MAIN", "EXPT"], "type": "enum", "name":
"ProgrammePhase"}], "name": "programmePhase"}, {"doc": "", "type": ["null", "string"], "name":
"clinicalSampleDateTime"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "clinicalSampleDateTime",
        "labSampleId",
        "preparationMethod",
        "product",
        "programmePhase",
        "sampleId",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'clinicalSampleDateTime', 'labSampleId',
        'preparationMethod', 'product', 'programmePhase', 'sampleId',
        'source'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.clinicalSampleDateTime = kwargs.get(
            'clinicalSampleDateTime', None)
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.programmePhase = kwargs.get(
            'programmePhase', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)


class HpoTerm(ProtocolElement):
    """
    This defines an HPO term and its modifiers (possibly multiple)
    If HPO term presence is unknown we don't have a entry on the list
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "HpoTerm", "fields":
[{"doc": "", "type": "string", "name": "term"}, {"doc": "", "type": ["null", {"symbols": ["yes",
"no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "termPresence"},
{"doc": "", "type": ["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null",
{"fields": [{"type": ["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type":
"enum", "name": "Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "hpoBuildNumber",
        "modifiers",
        "term",
        "termPresence",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiers': HpoTermModifiers,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiers': HpoTermModifiers,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'hpoBuildNumber', 'modifiers', 'term',
        'termPresence'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.hpoBuildNumber = kwargs.get(
            'hpoBuildNumber', None)
        self.modifiers = kwargs.get(
            'modifiers', None)
        self.term = kwargs.get(
            'term', None)
        self.termPresence = kwargs.get(
            'termPresence', None)


class HpoTermModifiers(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "HpoTermModifiers",
"fields": [{"type": ["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type":
"enum", "name": "Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "laterality",
        "progression",
        "severity",
        "spatialPattern",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'laterality', 'progression', 'severity', 'spatialPattern'
    ]

    def __init__(self, **kwargs):
        self.laterality = kwargs.get(
            'laterality', None)
        self.progression = kwargs.get(
            'progression', None)
        self.severity = kwargs.get(
            'severity', None)
        self.spatialPattern = kwargs.get(
            'spatialPattern', None)


class InbreedingCoefficient(ProtocolElement):
    """
    Inbreeding coefficient
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "coefficient",
        "estimationMethod",
        "program",
        "sampleId",
        "standardError",
        "version",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'coefficient', 'estimationMethod', 'program', 'sampleId',
        'standardError', 'version'
    ]

    def __init__(self, **kwargs):
        self.coefficient = kwargs.get(
            'coefficient', None)
        self.estimationMethod = kwargs.get(
            'estimationMethod', None)
        self.program = kwargs.get(
            'program', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.standardError = kwargs.get(
            'standardError', None)
        self.version = kwargs.get(
            'version', None)


class InterpretationData(ProtocolElement):
    """
    Represents the set of all interpretation data (excluding file
    contents) to be stored in MDT for one TieringResult. Semantic
    restrictions (not automatically verifiable):  * All
    InterpretedGenomesRD in interpretationResults refer to the
    TieringResult tieringResult. * All InterpretedGenomesRD in
    interpretationResults have passed the QC stage and have been
    approved by the originating GMCs
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationData",
"fields": [{"type": {"doc": "", "type": "record", "name": "InterpretationRequestRD", "fields":
[{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "genomeAssembly"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name":
"workspace"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "File",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"},
{"doc": "", "type": "string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF",
"VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null",
"string"], "name": "md5Sum"}]}, "type": "array"}], "name": "bams"}, {"doc": "", "type": ["null",
{"items": "File", "type": "array"}], "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File",
"type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name":
"pedigreeDiagram"}, {"doc": "", "type": ["null", "File"], "name": "annotationFile"}, {"doc": "",
"type": ["null", {"values": "File", "type": "map"}], "name": "otherFiles"}, {"doc": "", "type":
["null", {"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree",
"fields": [{"doc": "", "type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type":
"string", "name": "GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name":
"versionControl"}, {"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"PedigreeMember", "fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "",
"type": ["null", "boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name":
"participantId"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "ParticipantQCState"}],
"name": "participantQCState"}, {"doc": "", "type": ["null", "string"], "name": "gelSuperFamilyId"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"symbols": ["UNKNOWN", "XX", "XY", "XO",
"XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"], "doc": "", "type": "enum", "name":
"PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc": "", "type": ["null", "int"],
"name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name": "fatherId"}, {"doc": "",
"type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null", "int"], "name":
"superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols": ["yes", "no",
"unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "monozygotic"}, {"doc":
"", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"], "doc": "", "type":
"enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type": ["null",
{"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc": "",
"type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}], "name": "pedigree"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float",
"type": "map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "InterpretationFlag", "fields": [{"doc":
"", "type": {"symbols": ["mixed_chemistries", "mixedLab_preparation", "low_tumour_purity",
"uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype", "high_cnv_count",
"high_estimate_human_contamination_fraction", "mixed_recruiting_gmc", "suspected_mosaicism",
"low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}]}, "type": "array"}], "name": "interpretationFlags"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}]}, "name":
"interpretationMetaData"}, {"type": ["null", {"doc": "", "type": "record", "name":
"InterpretedGenomeRD", "fields": [{"doc": "", "type": "ReportVersionControl", "name":
"versionControl"}, {"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "",
"type": "int", "name": "interpretationRequestVersion"}, {"doc": "", "type": "string", "name":
"interpretationService"}, {"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "",
"type": {"items": {"doc": "", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "",
"type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type":
"string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type":
"string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "",
"type": "Assembly", "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type":
["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", "org.gel.models.participant.avro.Penetrance"], "name": "penetrance"},
{"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null", {"values":
"float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type": ["null",
{"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name": "variants"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "referenceDatabasesVersions"},
{"doc": "", "type": {"values": "string", "type": "map"}, "name": "softwareVersions"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "comments"}]}], "name":
"tieringResult"}, {"type": ["null", {"items": "InterpretedGenomeRD", "type": "array"}], "name":
"otherInterpretationResults"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "interpretationMetaData",
        "otherInterpretationResults",
        "tieringResult",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretationMetaData': InterpretationRequestRD,
            'otherInterpretationResults': InterpretedGenomeRD,
            'tieringResult': InterpretedGenomeRD,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'interpretationMetaData': InterpretationRequestRD,
            'otherInterpretationResults': InterpretedGenomeRD,
            'tieringResult': InterpretedGenomeRD,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'interpretationMetaData', 'otherInterpretationResults',
        'tieringResult'
    ]

    def __init__(self, **kwargs):
        self.interpretationMetaData = kwargs.get(
            'interpretationMetaData', InterpretationRequestRD())
        self.otherInterpretationResults = kwargs.get(
            'otherInterpretationResults', None)
        self.tieringResult = kwargs.get(
            'tieringResult', None)


class InterpretationFlag(ProtocolElement):
    """
    A given interpretation flag together with an optional description
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationFlag",
"fields": [{"doc": "", "type": {"symbols": ["mixed_chemistries", "mixedLab_preparation",
"low_tumour_purity", "uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype",
"high_cnv_count", "high_estimate_human_contamination_fraction", "mixed_recruiting_gmc",
"suspected_mosaicism", "low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalDescription",
        "interpretationFlag",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalDescription', 'interpretationFlag'
    ]

    def __init__(self, **kwargs):
        self.additionalDescription = kwargs.get(
            'additionalDescription', None)
        self.interpretationFlag = kwargs.get(
            'interpretationFlag', None)


class InterpretationFlags(object):
    """
    Some flags relevant to the interpretation of a case
    """
    mixed_chemistries = "mixed_chemistries"
    mixedLab_preparation = "mixedLab_preparation"
    low_tumour_purity = "low_tumour_purity"
    uniparental_isodisomy = "uniparental_isodisomy"
    uniparental_heterodisomy = "uniparental_heterodisomy"
    unusual_karyotype = "unusual_karyotype"
    high_cnv_count = "high_cnv_count"
    high_estimate_human_contamination_fraction = "high_estimate_human_contamination_fraction"
    mixed_recruiting_gmc = "mixed_recruiting_gmc"
    suspected_mosaicism = "suspected_mosaicism"
    low_quality_sample = "low_quality_sample"
    ffpe_tumour_sample = "ffpe_tumour_sample"
    ff_nano_tumour_sample = "ff_nano_tumour_sample"
    missing_values_for_proband_in_reported_variant = "missing_values_for_proband_in_reported_variant"
    reissued = "reissued"
    supplementary_report_errors = "supplementary_report_errors"
    internal_use_only = "internal_use_only"
    high_priority = "high_priority"
    other = "other"

    def __hash__(self):
        return str(self).__hash__()


class InterpretationRequestRD(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretationRequestRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "internalStudyId"}, {"doc":
"", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"},
"name": "genomeAssembly"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name":
"workspace"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name": "File",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "sampleId"},
{"doc": "", "type": "string", "name": "uriFile"}, {"doc": "", "type": {"symbols": ["BAM", "gVCF",
"VCF_small", "VCF_somatic_small", "VCF_CNV", "VCF_somatic_CNV", "VCF_SV", "VCF_somatic_SV",
"VCF_SV_CNV", "SVG", "ANN", "BigWig", "MD5Sum", "ROH", "OTHER", "PARTITION", "VARIANT_FREQUENCIES",
"COVERAGE"], "type": "enum", "name": "FileType"}, "name": "fileType"}, {"doc": "", "type": ["null",
"string"], "name": "md5Sum"}]}, "type": "array"}], "name": "bams"}, {"doc": "", "type": ["null",
{"items": "File", "type": "array"}], "name": "vcfs"}, {"doc": "", "type": ["null", {"items": "File",
"type": "array"}], "name": "bigWigs"}, {"doc": "", "type": ["null", "File"], "name":
"pedigreeDiagram"}, {"doc": "", "type": ["null", "File"], "name": "annotationFile"}, {"doc": "",
"type": ["null", {"values": "File", "type": "map"}], "name": "otherFiles"}, {"doc": "", "type":
["null", {"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree",
"fields": [{"doc": "", "type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type":
"string", "name": "GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name":
"versionControl"}, {"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type":
"string", "name": "familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"PedigreeMember", "fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "",
"type": ["null", "boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name":
"participantId"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "ParticipantQCState"}],
"name": "participantQCState"}, {"doc": "", "type": ["null", "string"], "name": "gelSuperFamilyId"},
{"doc": "", "type": {"symbols": ["MALE", "FEMALE", "UNKNOWN"], "doc": "", "type": "enum", "name":
"Sex"}, "name": "sex"}, {"doc": "", "type": ["null", {"symbols": ["UNKNOWN", "XX", "XY", "XO",
"XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"], "doc": "", "type": "enum", "name":
"PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc": "", "type": ["null", "int"],
"name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name": "fatherId"}, {"doc": "",
"type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null", "int"], "name":
"superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols": ["yes", "no",
"unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name": "monozygotic"}, {"doc":
"", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"], "doc": "", "type":
"enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type": ["null",
{"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc": "",
"type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}], "name": "pedigree"}, {"doc": "", "type": ["null", {"doc": "",
"type": "record", "name": "OtherFamilyHistory", "fields": [{"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "maternalFamilyHistory"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}, {"doc": "", "type": ["null", {"values": {"values": {"values": "float",
"type": "map"}, "type": "map"}, "type": "map"}], "name": "genePanelsCoverage"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "InterpretationFlag", "fields": [{"doc":
"", "type": {"symbols": ["mixed_chemistries", "mixedLab_preparation", "low_tumour_purity",
"uniparental_isodisomy", "uniparental_heterodisomy", "unusual_karyotype", "high_cnv_count",
"high_estimate_human_contamination_fraction", "mixed_recruiting_gmc", "suspected_mosaicism",
"low_quality_sample", "ffpe_tumour_sample", "ff_nano_tumour_sample",
"missing_values_for_proband_in_reported_variant", "reissued", "supplementary_report_errors",
"internal_use_only", "high_priority", "other"], "doc": "", "type": "enum", "name":
"InterpretationFlags"}, "name": "interpretationFlag"}, {"doc": "", "type": ["null", "string"],
"name": "additionalDescription"}]}, "type": "array"}], "name": "interpretationFlags"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInfo"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInfo",
        "annotationFile",
        "bams",
        "bigWigs",
        "genePanelsCoverage",
        "genomeAssembly",
        "internalStudyId",
        "interpretationFlags",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "otherFamilyHistory",
        "otherFiles",
        "pedigree",
        "pedigreeDiagram",
        "vcfs",
        "versionControl",
        "workspace",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'annotationFile': File,
            'bams': File,
            'bigWigs': File,
            'interpretationFlags': InterpretationFlag,
            'otherFamilyHistory': OtherFamilyHistory,
            'otherFiles': File,
            'pedigree': Pedigree,
            'pedigreeDiagram': File,
            'vcfs': File,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInfo', 'annotationFile', 'bams', 'bigWigs',
        'genePanelsCoverage', 'genomeAssembly', 'internalStudyId',
        'interpretationFlags', 'interpretationRequestId',
        'interpretationRequestVersion', 'otherFamilyHistory',
        'otherFiles', 'pedigree', 'pedigreeDiagram', 'vcfs',
        'versionControl', 'workspace'
    ]

    def __init__(self, **kwargs):
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.bams = kwargs.get(
            'bams', None)
        self.bigWigs = kwargs.get(
            'bigWigs', None)
        self.genePanelsCoverage = kwargs.get(
            'genePanelsCoverage', None)
        self.genomeAssembly = kwargs.get(
            'genomeAssembly', None)
        self.internalStudyId = kwargs.get(
            'internalStudyId', None)
        self.interpretationFlags = kwargs.get(
            'interpretationFlags', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.otherFiles = kwargs.get(
            'otherFiles', None)
        self.pedigree = kwargs.get(
            'pedigree', None)
        self.pedigreeDiagram = kwargs.get(
            'pedigreeDiagram', None)
        self.vcfs = kwargs.get(
            'vcfs', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())
        self.workspace = kwargs.get(
            'workspace', None)


class InterpretedGenomeRD(ProtocolElement):
    """
    A interpreted genome for the rare disease program. This holds the
    list of candidate variants reported by an     interpretation
    service together with all the relevant information that identify
    the case and how these conclusions were reached.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "InterpretedGenomeRD",
"fields": [{"doc": "", "type": {"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name":
"gitVersionControl"}], "type": "record", "name": "ReportVersionControl"}, "name": "versionControl"},
{"doc": "", "type": "string", "name": "interpretationRequestId"}, {"doc": "", "type": "int", "name":
"interpretationRequestVersion"}, {"doc": "", "type": "string", "name": "interpretationService"},
{"doc": "", "type": ["null", "string"], "name": "reportUrl"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type": {"symbols":
["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name": "assembly"}]}, "name":
"variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name": "dbSnpId"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name": "cosmicIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "VariantCall", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type":
{"symbols": ["reference_homozygous", "heterozygous", "alternate_homozygous", "missing",
"half_missing_reference", "half_missing_alternate", "alternate_hemizigous", "reference_hemizigous",
"unk", "na"], "doc": "", "type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "",
"type": ["null", "int"], "name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name":
"vaf"}, {"doc": "", "type": ["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null",
"int"], "name": "depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant",
"germline_variant", "maternal_variant", "paternal_variant", "pedigree_specific_variant",
"population_specific_variant", "somatic_variant"], "doc": "", "type": "enum", "name":
"AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"}, "name":
"variantCalls"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "ReportEvent",
"fields": [{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"GenePanel", "fields": [{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type":
["null", "string"], "name": "panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type":
{"symbols": ["monoallelic", "monoallelic_not_imprinted", "monoallelic_maternally_imprinted",
"monoallelic_paternally_imprinted", "biallelic", "monoallelic_and_biallelic",
"monoallelic_and_more_severe_biallelic", "xlinked_biallelic", "xlinked_monoallelic",
"mitochondrial", "unknown"], "doc": "", "type": "enum", "name": "ReportedModeOfInheritance"},
"name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": ["null",
{"symbols": ["complete", "incomplete"], "namespace": "org.gel.models.participant.avro", "type":
"enum", "name": "Penetrance", "doc": ""}], "name": "penetrance"}, {"doc": "", "type": ["null",
"float"], "name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}],
"name": "vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", "boolean"], "name": "fullyExplainsPhenotype"}, {"doc": "", "type":
["null", "int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3",
"TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"},
"name": "reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "type": "array"},
"name": "variants"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"referenceDatabasesVersions"}, {"doc": "", "type": {"values": "string", "type": "map"}, "name":
"softwareVersions"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"comments"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "comments",
        "interpretationRequestId",
        "interpretationRequestVersion",
        "interpretationService",
        "referenceDatabasesVersions",
        "reportUrl",
        "softwareVersions",
        "variants",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariant,
            'versionControl': ReportVersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': ReportedVariant,
            'versionControl': ReportVersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'comments', 'interpretationRequestId',
        'interpretationRequestVersion', 'interpretationService',
        'referenceDatabasesVersions', 'reportUrl', 'softwareVersions',
        'variants', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.comments = kwargs.get(
            'comments', None)
        self.interpretationRequestId = kwargs.get(
            'interpretationRequestId', None)
        self.interpretationRequestVersion = kwargs.get(
            'interpretationRequestVersion', None)
        self.interpretationService = kwargs.get(
            'interpretationService', None)
        self.referenceDatabasesVersions = kwargs.get(
            'referenceDatabasesVersions', None)
        self.reportUrl = kwargs.get(
            'reportUrl', None)
        self.softwareVersions = kwargs.get(
            'softwareVersions', None)
        self.variants = kwargs.get(
            'variants', None)
        self.versionControl = kwargs.get(
            'versionControl', ReportVersionControl())


class KgPopCategory(object):
    """
    1K Genomes project populations
    """
    ACB = "ACB"
    ASW = "ASW"
    BEB = "BEB"
    CDX = "CDX"
    CEU = "CEU"
    CHB = "CHB"
    CHS = "CHS"
    CLM = "CLM"
    ESN = "ESN"
    FIN = "FIN"
    GBR = "GBR"
    GIH = "GIH"
    GWD = "GWD"
    IBS = "IBS"
    ITU = "ITU"
    JPT = "JPT"
    KHV = "KHV"
    LWK = "LWK"
    MSL = "MSL"
    MXL = "MXL"
    PEL = "PEL"
    PJL = "PJL"
    PUR = "PUR"
    STU = "STU"
    TSI = "TSI"
    YRI = "YRI"

    def __hash__(self):
        return str(self).__hash__()


class KgSuperPopCategory(object):
    """
    1K Genomes project super populations
    """
    AFR = "AFR"
    AMR = "AMR"
    EAS = "EAS"
    EUR = "EUR"
    SAS = "SAS"

    def __hash__(self):
        return str(self).__hash__()


class Laterality(object):
    """
    No documentation
    """
    RIGHT = "RIGHT"
    UNILATERAL = "UNILATERAL"
    BILATERAL = "BILATERAL"
    LEFT = "LEFT"

    def __hash__(self):
        return str(self).__hash__()


class LifeStatus(object):
    """
    Life Status
    """
    ALIVE = "ALIVE"
    ABORTED = "ABORTED"
    DECEASED = "DECEASED"
    UNBORN = "UNBORN"
    STILLBORN = "STILLBORN"
    MISCARRIAGE = "MISCARRIAGE"

    def __hash__(self):
        return str(self).__hash__()


class MatchedSamples(ProtocolElement):
    """
    This defines a pair of germline and tumor, this pair should/must
    be analyzed together
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "MatchedSamples",
"fields": [{"doc": "", "type": ["null", "string"], "name": "germlineSampleId"}, {"doc": "", "type":
["null", "string"], "name": "tumourSampleId"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "germlineSampleId",
        "tumourSampleId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'germlineSampleId', 'tumourSampleId'
    ]

    def __init__(self, **kwargs):
        self.germlineSampleId = kwargs.get(
            'germlineSampleId', None)
        self.tumourSampleId = kwargs.get(
            'tumourSampleId', None)


class Method(object):
    """
    No documentation
    """
    RESECTION = "RESECTION"
    BIOPSY = "BIOPSY"
    BLOOD = "BLOOD"

    def __hash__(self):
        return str(self).__hash__()


class ModifiedVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ModifiedVariant", "fields":
[{"type": {"doc": "", "type": "record", "name": "ReportedVariant", "fields": [{"doc": "", "type":
{"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc": "", "type": "string",
"name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc": "", "type": "string",
"name": "reference"}, {"doc": "", "type": "string", "name": "alternate"}, {"doc": "", "type":
{"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name": "Assembly"}, "name":
"assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null", "string"], "name":
"dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}]}, "name": "previousVariant"}, {"type":
"ReportedVariant", "name": "modifiedVariant"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedVariant",
        "previousVariant",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiedVariant': ReportedVariant,
            'previousVariant': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'modifiedVariant': ReportedVariant,
            'previousVariant': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedVariant', 'previousVariant'
    ]

    def __init__(self, **kwargs):
        self.modifiedVariant = kwargs.get(
            'modifiedVariant', ReportedVariant())
        self.previousVariant = kwargs.get(
            'previousVariant', ReportedVariant())


class OtherFamilyHistory(ProtocolElement):
    """
    Family history for secondary findings.     Arrays of strings
    describing discrete family history phenotypes.     Usually:
    `EndocrineTumours`, `colorectal`, `BreastOvarian` and `HDOrStroke`
    but can be others
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "OtherFamilyHistory",
"fields": [{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"maternalFamilyHistory"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "paternalFamilyHistory"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "maternalFamilyHistory",
        "paternalFamilyHistory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'maternalFamilyHistory', 'paternalFamilyHistory'
    ]

    def __init__(self, **kwargs):
        self.maternalFamilyHistory = kwargs.get(
            'maternalFamilyHistory', None)
        self.paternalFamilyHistory = kwargs.get(
            'paternalFamilyHistory', None)


class ParticipantQCState(object):
    """
    QCState Status
    """
    noState = "noState"
    passedMedicalReviewReadyForInterpretation = "passedMedicalReviewReadyForInterpretation"
    passedMedicalReviewNotReadyForInterpretation = "passedMedicalReviewNotReadyForInterpretation"
    queryToGel = "queryToGel"
    queryToGMC = "queryToGMC"
    failed = "failed"

    def __hash__(self):
        return str(self).__hash__()


class Pedigree(ProtocolElement):
    """
    This is the concept of a family with associated phenotypes as
    present in the record RDParticipant
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Pedigree", "fields":
[{"doc": "", "type": ["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name":
"familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "analysisPanels",
        "diseasePenetrances",
        "familyId",
        "familyQCState",
        "members",
        "readyForAnalysis",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analysisPanels': AnalysisPanel,
            'diseasePenetrances': DiseasePenetrance,
            'members': PedigreeMember,
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analysisPanels': AnalysisPanel,
            'diseasePenetrances': DiseasePenetrance,
            'members': PedigreeMember,
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'analysisPanels', 'diseasePenetrances', 'familyId',
        'familyQCState', 'members', 'readyForAnalysis',
        'versionControl'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.analysisPanels = kwargs.get(
            'analysisPanels', None)
        self.diseasePenetrances = kwargs.get(
            'diseasePenetrances', None)
        self.familyId = kwargs.get(
            'familyId', None)
        self.familyQCState = kwargs.get(
            'familyQCState', None)
        self.members = kwargs.get(
            'members', None)
        self.readyForAnalysis = kwargs.get(
            'readyForAnalysis', None)
        self.versionControl = kwargs.get(
            'versionControl', None)


class PedigreeMember(ProtocolElement):
    """
    This defines a RD Participant (demographics and pedigree
    information)
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalInformation",
        "adoptedStatus",
        "affectionStatus",
        "ancestries",
        "consanguineousParents",
        "consentStatus",
        "disorderList",
        "fatherId",
        "gelSuperFamilyId",
        "hpoTermList",
        "inbreedingCoefficient",
        "isProband",
        "lifeStatus",
        "monozygotic",
        "motherId",
        "participantId",
        "participantQCState",
        "pedigreeId",
        "personKaryotypicSex",
        "samples",
        "sex",
        "superFatherId",
        "superMotherId",
        "twinGroup",
        "yearOfBirth",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ancestries': Ancestries,
            'consentStatus': ConsentStatus,
            'disorderList': Disorder,
            'hpoTermList': HpoTerm,
            'inbreedingCoefficient': InbreedingCoefficient,
            'samples': Sample,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ancestries': Ancestries,
            'consentStatus': ConsentStatus,
            'disorderList': Disorder,
            'hpoTermList': HpoTerm,
            'inbreedingCoefficient': InbreedingCoefficient,
            'samples': Sample,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInformation', 'adoptedStatus', 'affectionStatus',
        'ancestries', 'consanguineousParents', 'consentStatus',
        'disorderList', 'fatherId', 'gelSuperFamilyId', 'hpoTermList',
        'inbreedingCoefficient', 'isProband', 'lifeStatus',
        'monozygotic', 'motherId', 'participantId',
        'participantQCState', 'pedigreeId', 'personKaryotypicSex',
        'samples', 'sex', 'superFatherId', 'superMotherId',
        'twinGroup', 'yearOfBirth'
    ]

    def __init__(self, **kwargs):
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.adoptedStatus = kwargs.get(
            'adoptedStatus', None)
        self.affectionStatus = kwargs.get(
            'affectionStatus', None)
        self.ancestries = kwargs.get(
            'ancestries', None)
        self.consanguineousParents = kwargs.get(
            'consanguineousParents', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.disorderList = kwargs.get(
            'disorderList', None)
        self.fatherId = kwargs.get(
            'fatherId', None)
        self.gelSuperFamilyId = kwargs.get(
            'gelSuperFamilyId', None)
        self.hpoTermList = kwargs.get(
            'hpoTermList', None)
        self.inbreedingCoefficient = kwargs.get(
            'inbreedingCoefficient', None)
        self.isProband = kwargs.get(
            'isProband', None)
        self.lifeStatus = kwargs.get(
            'lifeStatus', None)
        self.monozygotic = kwargs.get(
            'monozygotic', None)
        self.motherId = kwargs.get(
            'motherId', None)
        self.participantId = kwargs.get(
            'participantId', None)
        self.participantQCState = kwargs.get(
            'participantQCState', None)
        self.pedigreeId = kwargs.get(
            'pedigreeId', None)
        self.personKaryotypicSex = kwargs.get(
            'personKaryotypicSex', None)
        self.samples = kwargs.get(
            'samples', None)
        self.sex = kwargs.get(
            'sex', None)
        self.superFatherId = kwargs.get(
            'superFatherId', None)
        self.superMotherId = kwargs.get(
            'superMotherId', None)
        self.twinGroup = kwargs.get(
            'twinGroup', None)
        self.yearOfBirth = kwargs.get(
            'yearOfBirth', None)


class Penetrance(object):
    """
    Penetrance assumed in the analysis
    """
    complete = "complete"
    incomplete = "incomplete"

    def __hash__(self):
        return str(self).__hash__()


class PersonKaryotipicSex(object):
    """
    Karyotipic Sex
    """
    UNKNOWN = "UNKNOWN"
    XX = "XX"
    XY = "XY"
    XO = "XO"
    XXY = "XXY"
    XXX = "XXX"
    XXYY = "XXYY"
    XXXY = "XXXY"
    XXXX = "XXXX"
    XYY = "XYY"
    OTHER = "OTHER"

    def __hash__(self):
        return str(self).__hash__()


class PhenotypesSolved(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    partially = "partially"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class PreparationMethod(object):
    """
    No documentation
    """
    EDTA = "EDTA"
    ORAGENE = "ORAGENE"
    FF = "FF"
    FFPE = "FFPE"
    CD128_SORTED_CELLS = "CD128_SORTED_CELLS"
    ASPIRATE = "ASPIRATE"

    def __hash__(self):
        return str(self).__hash__()


class Product(object):
    """
    No documentation
    """
    DNA = "DNA"
    RNA = "RNA"

    def __hash__(self):
        return str(self).__hash__()


class Program(object):
    """
    The Genomics England program
    """
    cancer = "cancer"
    rare_disease = "rare_disease"

    def __hash__(self):
        return str(self).__hash__()


class ProgrammePhase(object):
    """
    No documentation
    """
    CRUK = "CRUK"
    OXFORD = "OXFORD"
    CLL = "CLL"
    IIP = "IIP"
    MAIN = "MAIN"
    EXPT = "EXPT"

    def __hash__(self):
        return str(self).__hash__()


class Progression(object):
    """
    No documentation
    """
    PROGRESSIVE = "PROGRESSIVE"
    NONPROGRESSIVE = "NONPROGRESSIVE"

    def __hash__(self):
        return str(self).__hash__()


class RDFamilyChange(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "RDFamilyChange",
"fields": [{"doc": "", "type": "string", "name": "FamilyId"}, {"doc": "", "type": {"symbols":
["FamilyAdded", "FamilyDeleted", "ProbandChanged", "ParticipantAdded", "ParticipantRemoved",
"ConsentStatusChanged", "AffectionStatusChanged", "PanelAssignmentChanged", "SexChanged",
"SampleChanged"], "doc": "", "type": "enum", "name": "RDFamilyChangeCode"}, "name": "code"}, {"doc":
"", "type": {"doc": "", "type": "record", "name": "Pedigree", "fields": [{"doc": "", "type":
["null", {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}], "name": "versionControl"},
{"doc": "", "type": ["null", "string"], "name": "LDPCode"}, {"doc": "", "type": "string", "name":
"familyId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "PedigreeMember",
"fields": [{"doc": "", "type": ["null", "int"], "name": "pedigreeId"}, {"doc": "", "type": ["null",
"boolean"], "name": "isProband"}, {"doc": "", "type": ["null", "string"], "name": "participantId"},
{"doc": "", "type": ["null", {"symbols": ["noState", "passedMedicalReviewReadyForInterpretation",
"passedMedicalReviewNotReadyForInterpretation", "queryToGel", "queryToGMC", "failed"], "doc": "",
"type": "enum", "name": "ParticipantQCState"}], "name": "participantQCState"}, {"doc": "", "type":
["null", "string"], "name": "gelSuperFamilyId"}, {"doc": "", "type": {"symbols": ["MALE", "FEMALE",
"UNKNOWN"], "doc": "", "type": "enum", "name": "Sex"}, "name": "sex"}, {"doc": "", "type": ["null",
{"symbols": ["UNKNOWN", "XX", "XY", "XO", "XXY", "XXX", "XXYY", "XXXY", "XXXX", "XYY", "OTHER"],
"doc": "", "type": "enum", "name": "PersonKaryotipicSex"}], "name": "personKaryotypicSex"}, {"doc":
"", "type": ["null", "int"], "name": "yearOfBirth"}, {"doc": "", "type": ["null", "int"], "name":
"fatherId"}, {"doc": "", "type": ["null", "int"], "name": "motherId"}, {"doc": "", "type": ["null",
"int"], "name": "superFatherId"}, {"doc": "", "type": ["null", "int"], "name": "superMotherId"},
{"doc": "", "type": ["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null", {"symbols":
["yes", "no", "unknown"], "doc": "", "type": "enum", "name": "TernaryOption"}], "name":
"monozygotic"}, {"doc": "", "type": ["null", {"symbols": ["notadopted", "adoptedin", "adoptedout"],
"doc": "", "type": "enum", "name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", {"symbols": ["ALIVE", "ABORTED", "DECEASED", "UNBORN", "STILLBORN", "MISCARRIAGE"], "doc":
"", "type": "enum", "name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type": ["null",
"TernaryOption"], "name": "consanguineousParents"}, {"doc": "", "type": ["null", {"symbols":
["UNAFFECTED", "AFFECTED", "UNCERTAIN"], "doc": "", "type": "enum", "name": "AffectionStatus"}],
"name": "affectionStatus"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name": "diseaseGroup"},
{"doc": "", "type": ["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type": ["null",
"string"], "name": "specificDisease"}, {"doc": "", "type": ["null", "float"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string", "name":
"term"}, {"doc": "", "type": ["null", "TernaryOption"], "name": "termPresence"}, {"doc": "", "type":
["null", "string"], "name": "hpoBuildNumber"}, {"doc": "", "type": ["null", {"fields": [{"type":
["null", {"symbols": ["RIGHT", "UNILATERAL", "BILATERAL", "LEFT"], "type": "enum", "name":
"Laterality"}], "name": "laterality"}, {"type": ["null", {"symbols": ["PROGRESSIVE",
"NONPROGRESSIVE"], "type": "enum", "name": "Progression"}], "name": "progression"}, {"type":
["null", {"symbols": ["BORDERLINE", "MILD", "MODERATE", "SEVERE", "PROFOUND"], "type": "enum",
"name": "Severity"}], "name": "severity"}, {"type": ["null", {"symbols": ["DISTAL", "GENERALIZED",
"LOCALIZED", "PROXIMAL"], "type": "enum", "name": "SpatialPattern"}], "name": "spatialPattern"}],
"type": "record", "name": "HpoTermModifiers"}], "name": "modifiers"}, {"doc": "", "type": ["null",
{"symbols": ["EMBRYONAL_ONSET", "FETAL_ONSET", "NEONATAL_ONSET", "INFANTILE_ONSET",
"CHILDHOOD_ONSET", "JUVENILE_ONSET", "YOUNG_ADULT_ONSET", "LATE_ONSET", "MIDDLE_AGE_ONSET"], "type":
"enum", "name": "AgeOfOnset"}], "name": "ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "Ancestries", "fields": [{"doc":
"", "type": ["null", {"symbols": ["D", "E", "F", "G", "A", "B", "C", "L", "M", "N", "H", "J", "K",
"P", "S", "R", "Z"], "doc": "", "type": "enum", "name": "EthnicCategory"}], "name":
"mothersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"mothersOtherRelevantAncestry"}, {"doc": "", "type": ["null", "EthnicCategory"], "name":
"fathersEthnicOrigin"}, {"doc": "", "type": ["null", "string"], "name":
"fathersOtherRelevantAncestry"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type":
"record", "name": "ChiSquare1KGenomesPhase3Pop", "fields": [{"doc": "", "type": {"symbols": ["AFR",
"AMR", "EAS", "EUR", "SAS"], "doc": "", "type": "enum", "name": "KgSuperPopCategory"}, "name":
"kgSuperPopCategory"}, {"doc": "", "type": ["null", {"symbols": ["ACB", "ASW", "BEB", "CDX", "CEU",
"CHB", "CHS", "CLM", "ESN", "FIN", "GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"], "doc": "", "type": "enum", "name":
"KgPopCategory"}], "name": "kgPopCategory"}, {"doc": "", "type": "double", "name": "chiSquare"}]},
"type": "array"}], "name": "chiSquare1KGenomesPhase3Pop"}]}], "name": "ancestries"}, {"doc": "",
"type": ["null", {"doc": "", "type": "record", "name": "ConsentStatus", "fields": [{"default":
false, "doc": "", "type": "boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "secondaryFindingConsent"}, {"default": false, "doc": "", "type": "boolean",
"name": "carrierStatusConsent"}]}], "name": "consentStatus"}, {"doc": "", "type": ["null", {"items":
{"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}], "type": "record", "name": "Sample"}, "type": "array"}], "name": "samples"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "InbreedingCoefficient",
"fields": [{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "string", "name":
"program"}, {"doc": "", "type": "string", "name": "version"}, {"doc": "", "type": "string", "name":
"estimationMethod"}, {"doc": "", "type": "double", "name": "coefficient"}, {"doc": "", "type":
["null", "double"], "name": "standardError"}]}], "name": "inbreedingCoefficient"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "additionalInformation"}]}, "type":
"array"}, "name": "members"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "AnalysisPanel", "fields": [{"doc": "", "type": "string", "name": "specificDisease"},
{"doc": "", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}, {"doc": "", "type": "string", "name": "reviewOutcome"}, {"doc": "", "type":
"string", "name": "multipleGeneticOrigins"}]}, "type": "array"}], "name": "analysisPanels"}, {"doc":
"", "type": ["null", {"items": {"doc": "", "type": "record", "name": "DiseasePenetrance", "fields":
[{"doc": "", "type": "string", "name": "specificDisease"}, {"doc": "", "type": {"symbols":
["complete", "incomplete"], "doc": "", "type": "enum", "name": "Penetrance"}, "name":
"penetrance"}]}, "type": "array"}], "name": "diseasePenetrances"}, {"doc": "", "type": "boolean",
"name": "readyForAnalysis"}, {"doc": "", "type": ["null", {"symbols": ["noState",
"passedMedicalReviewReadyForInterpretation", "passedMedicalReviewNotReadyForInterpretation",
"queryToGel", "queryToGMC", "failed"], "doc": "", "type": "enum", "name": "FamilyQCState"}], "name":
"familyQCState"}]}, "name": "Family"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "Family",
        "FamilyId",
        "code",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'Family': Pedigree,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'Family': Pedigree,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'Family', 'FamilyId', 'code'
    ]

    def __init__(self, **kwargs):
        self.Family = kwargs.get(
            'Family', Pedigree())
        self.FamilyId = kwargs.get(
            'FamilyId', None)
        self.code = kwargs.get(
            'code', None)


class RDFamilyChangeCode(object):
    """
    This code define the change type:      * `FamilyAdded`: This is a
    new family.     * `FamilyDeleted`: This family should be removed.
    * `ProbandChanged`: The proband participant is now a different
    member of the family.     * `ParticipantAdded`: A new participant
    has been sequenced and added to the family.     *
    `ParticipantRemoved`: A participant has been removed.     *
    `ConsentStatusChanged`: One or more participant in this family has
    a different consent status.     * `AffectionStatusChanged`:
    HPOterms or Disorder changed in one or more participants in this
    family.     * `PanelAssignmentChanged`: Gene Panels has changed in
    this family.     * `SexChanged`: Sex has changed for one or more
    participants in this family.     * `SampleChanged`: The sample/s
    associated to one or more participant in this family has changed.
    """
    FamilyAdded = "FamilyAdded"
    FamilyDeleted = "FamilyDeleted"
    ProbandChanged = "ProbandChanged"
    ParticipantAdded = "ParticipantAdded"
    ParticipantRemoved = "ParticipantRemoved"
    ConsentStatusChanged = "ConsentStatusChanged"
    AffectionStatusChanged = "AffectionStatusChanged"
    PanelAssignmentChanged = "PanelAssignmentChanged"
    SexChanged = "SexChanged"
    SampleChanged = "SampleChanged"

    def __hash__(self):
        return str(self).__hash__()


class RareDiseaseExitQuestionnaire(ProtocolElement):
    """
    The rare disease program exit questionnaire
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name":
"RareDiseaseExitQuestionnaire", "fields": [{"doc": "", "type": "string", "name": "eventDate"},
{"doc": "", "type": "string", "name": "reporter"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "FamilyLevelQuestions", "fields": [{"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "CaseSolvedFamily"}, "name": "caseSolvedFamily"},
{"doc": "", "type": {"symbols": ["yes", "no"], "type": "enum", "name": "SegregationQuestion"},
"name": "segregationQuestion"}, {"doc": "", "type": "string", "name": "additionalComments"}]},
"name": "familyLevelQuestions"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantGroupLevelQuestions", "fields": [{"doc": "", "type": "int", "name": "variantGroup"}, {"doc":
"", "type": {"items": {"doc": "", "type": "record", "name": "VariantLevelQuestions", "fields":
[{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes",
"no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name": "confirmationDecision"},
{"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"},
"name": "confirmationOutcome"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ReportingQuestion"}, "name": "reportingQuestion"}, {"doc": "", "type": {"symbols":
["pathogenic_variant", "likely_pathogenic_variant", "variant_of_unknown_clinical_significance",
"likely_benign_variant", "benign_variant", "not_assessed"], "type": "enum", "name":
"ACMGClassification"}, "name": "acmgClassification"}, {"doc": "", "type": "string", "name":
"publications"}]}, "type": "array"}, "name": "variantLevelQuestions"}, {"doc": "", "type":
{"symbols": ["yes", "no", "not_yet", "na"], "type": "enum", "name": "Actionability"}, "name":
"actionability"}, {"doc": "", "type": {"items": {"symbols": ["none", "change_in_medication",
"surgical_option", "additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"phenotypesExplained"}]}, "type": "array"}, "name": "variantGroupLevelQuestions"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "eventDate",
        "familyLevelQuestions",
        "reporter",
        "variantGroupLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'familyLevelQuestions': FamilyLevelQuestions,
            'variantGroupLevelQuestions': VariantGroupLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'eventDate', 'familyLevelQuestions', 'reporter',
        'variantGroupLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.eventDate = kwargs.get(
            'eventDate', None)
        self.familyLevelQuestions = kwargs.get(
            'familyLevelQuestions', FamilyLevelQuestions())
        self.reporter = kwargs.get(
            'reporter', None)
        self.variantGroupLevelQuestions = kwargs.get(
            'variantGroupLevelQuestions', None)


class ReportEvent(ProtocolElement):
    """
    A report event holds all the information about why a given variant
    is relevant to report. The same variant may have     several
    report events. For instance, we may have two report events from
    the tiering process when two panels are     analysed, a positive
    report from a Genomic Medicine Centre (GMC) will correspond to an
    additional report event.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEvent", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "phenotypes"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "",
"type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name": "variantConsequences"},
{"doc": "", "type": ["null", {"doc": "", "type": "record", "name": "GenePanel", "fields": [{"doc":
"", "type": "string", "name": "panelName"}, {"doc": "", "type": ["null", "string"], "name":
"panelVersion"}]}], "name": "genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic",
"monoallelic_not_imprinted", "monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted",
"biallelic", "monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic",
"xlinked_biallelic", "xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum",
"name": "ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "eventJustification",
        "fullyExplainsPhenotype",
        "genePanel",
        "genomicEntities",
        "groupOfVariants",
        "modeOfInheritance",
        "penetrance",
        "phenotypes",
        "reportEventId",
        "score",
        "tier",
        "variantClassification",
        "variantConsequences",
        "vendorSpecificScores",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'genePanel': GenePanel,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'genePanel': GenePanel,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'eventJustification', 'fullyExplainsPhenotype', 'genePanel',
        'genomicEntities', 'groupOfVariants', 'modeOfInheritance',
        'penetrance', 'phenotypes', 'reportEventId', 'score', 'tier',
        'variantClassification', 'variantConsequences',
        'vendorSpecificScores'
    ]

    def __init__(self, **kwargs):
        self.eventJustification = kwargs.get(
            'eventJustification', None)
        self.fullyExplainsPhenotype = kwargs.get(
            'fullyExplainsPhenotype', None)
        self.genePanel = kwargs.get(
            'genePanel', None)
        self.genomicEntities = kwargs.get(
            'genomicEntities', None)
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.modeOfInheritance = kwargs.get(
            'modeOfInheritance', None)
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.phenotypes = kwargs.get(
            'phenotypes', None)
        self.reportEventId = kwargs.get(
            'reportEventId', None)
        self.score = kwargs.get(
            'score', None)
        self.tier = kwargs.get(
            'tier', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)
        self.variantConsequences = kwargs.get(
            'variantConsequences', None)
        self.vendorSpecificScores = kwargs.get(
            'vendorSpecificScores', None)


class ReportEventCancer(ProtocolElement):
    """
    A report event holds all the information about why a given variant
    is relevant to report. This is the report event     corresponding
    to the cancer program
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportEventCancer", "fields":
[{"doc": "", "type": "string", "name": "reportEventId"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "Action", "fields": [{"doc": "", "type": ["null", {"symbols":
["therapy", "therapeutic", "prognosis", "diagnosis"], "doc": "", "type": "enum", "name":
"ActionType"}], "name": "actionType"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "references"}, {"doc": "", "type": ["null", {"symbols": ["clinical",
"pre_clinical"], "doc": "", "type": "enum", "name": "ActionStatus"}], "name": "status"}, {"doc": "",
"type": "boolean", "name": "variantActionable"}, {"doc": "", "type": ["null", "string"], "name":
"url"}, {"doc": "", "type": ["null", "string"], "name": "evidenceType"}, {"doc": "", "type":
"string", "name": "source"}]}, "type": "array"}], "name": "actions"}, {"doc": "", "type": ["null",
"int"], "name": "groupOfVariants"}, {"doc": "", "type": ["null", "string"], "name":
"eventJustification"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "",
"type": ["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"items": {"symbols": ["oncogene",
"tumor_suppressor_gene", "both"], "doc": "", "type": "enum", "name": "RoleInCancer"}, "type":
"array"}], "name": "roleInCancer"}, {"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1",
"TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actions",
        "eventJustification",
        "genomicEntities",
        "groupOfVariants",
        "reportEventId",
        "roleInCancer",
        "score",
        "tier",
        "variantClassification",
        "variantConsequences",
        "vendorSpecificScores",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'actions': Action,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'actions': Action,
            'genomicEntities': GenomicEntity,
            'variantClassification': VariantClassification,
            'variantConsequences': VariantConsequence,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actions', 'eventJustification', 'genomicEntities',
        'groupOfVariants', 'reportEventId', 'roleInCancer', 'score',
        'tier', 'variantClassification', 'variantConsequences',
        'vendorSpecificScores'
    ]

    def __init__(self, **kwargs):
        self.actions = kwargs.get(
            'actions', None)
        self.eventJustification = kwargs.get(
            'eventJustification', None)
        self.genomicEntities = kwargs.get(
            'genomicEntities', None)
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.reportEventId = kwargs.get(
            'reportEventId', None)
        self.roleInCancer = kwargs.get(
            'roleInCancer', None)
        self.score = kwargs.get(
            'score', None)
        self.tier = kwargs.get(
            'tier', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)
        self.variantConsequences = kwargs.get(
            'variantConsequences', None)
        self.vendorSpecificScores = kwargs.get(
            'vendorSpecificScores', None)


class ReportVersionControl(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportVersionControl",
"fields": [{"default": "5.0.0", "doc": "", "type": "string", "name": "gitVersionControl"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'gitVersionControl'
    ]

    def __init__(self, **kwargs):
        self.gitVersionControl = kwargs.get(
            'gitVersionControl', '5.0.0')


class ReportedModeOfInheritance(object):
    """
    An enumeration for the different mode of inheritances:  *
    `monoallelic_not_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, not imprinted *
    `monoallelic_maternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, maternally imprinted (paternal allele expressed)
    * `monoallelic_paternally_imprinted`: MONOALLELIC, autosomal or
    pseudoautosomal, paternally imprinted (maternal allele expressed)
    * `monoallelic`: MONOALLELIC, autosomal or pseudoautosomal,
    imprinted status unknown * `biallelic`: BIALLELIC, autosomal or
    pseudoautosomal * `monoallelic_and_biallelic`: BOTH monoallelic
    and biallelic, autosomal or pseudoautosomal *
    `monoallelic_and_more_severe_biallelic`: BOTH monoallelic and
    biallelic, autosomal or pseudoautosomal (but BIALLELIC mutations
    cause a more SEVERE disease form), autosomal or pseudoautosomal *
    `xlinked_biallelic`: X-LINKED: hemizygous mutation in males,
    biallelic mutations in females * `xlinked_monoallelic`: X linked:
    hemizygous mutation in males, monoallelic mutations in females may
    cause disease (may be less severe, later onset than males) *
    `mitochondrial`: MITOCHONDRIAL * `unknown`: Unknown
    """
    monoallelic = "monoallelic"
    monoallelic_not_imprinted = "monoallelic_not_imprinted"
    monoallelic_maternally_imprinted = "monoallelic_maternally_imprinted"
    monoallelic_paternally_imprinted = "monoallelic_paternally_imprinted"
    biallelic = "biallelic"
    monoallelic_and_biallelic = "monoallelic_and_biallelic"
    monoallelic_and_more_severe_biallelic = "monoallelic_and_more_severe_biallelic"
    xlinked_biallelic = "xlinked_biallelic"
    xlinked_monoallelic = "xlinked_monoallelic"
    mitochondrial = "mitochondrial"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class ReportedVariant(ProtocolElement):
    """
    A reported variant
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedVariant", "fields":
[{"doc": "", "type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields": [{"doc":
"", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc":
"", "type": "string", "name": "reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type": "enum", "name":
"Assembly"}, "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "", "type": ["null",
"string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name":
"proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": "string", "type": "array"}, "name": "phenotypes"},
{"doc": "", "type": {"items": {"doc": "", "type": "record", "name": "VariantConsequence", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"], "name":
"name"}]}, "type": "array"}, "name": "variantConsequences"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "GenePanel", "fields": [{"doc": "", "type": "string", "name":
"panelName"}, {"doc": "", "type": ["null", "string"], "name": "panelVersion"}]}], "name":
"genePanel"}, {"doc": "", "type": {"symbols": ["monoallelic", "monoallelic_not_imprinted",
"monoallelic_maternally_imprinted", "monoallelic_paternally_imprinted", "biallelic",
"monoallelic_and_biallelic", "monoallelic_and_more_severe_biallelic", "xlinked_biallelic",
"xlinked_monoallelic", "mitochondrial", "unknown"], "doc": "", "type": "enum", "name":
"ReportedModeOfInheritance"}, "name": "modeOfInheritance"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "GenomicEntity", "fields": [{"doc": "", "type": {"symbols":
["regulatory_region", "gene", "transcript", "intergenic"], "doc": "", "type": "enum", "name":
"GenomicEntityType"}, "name": "type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc":
"", "type": ["null", "string"], "name": "geneSymbol"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name": "otherIds"}]}, "type": "array"}, "name": "genomicEntities"},
{"doc": "", "type": ["null", {"symbols": ["complete", "incomplete"], "namespace":
"org.gel.models.participant.avro", "type": "enum", "name": "Penetrance", "doc": ""}], "name":
"penetrance"}, {"doc": "", "type": ["null", "float"], "name": "score"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name": "vendorSpecificScores"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "VariantClassification", "fields": [{"doc": "", "type":
["null", {"symbols": ["benign", "likely_benign", "VUS", "likely_pathogenic", "pathogenic",
"uncertain_significance"], "type": "enum", "name": "ClinicalSignificance"}], "name":
"clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols": ["responsive", "resistant",
"toxicity", "indication", "contraindication", "dosing", "increased_monitoring", "efficacy"], "type":
"enum", "name": "DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "",
"type": ["null", {"symbols": ["established_risk_allele", "likely_risk_allele",
"uncertain_risk_allele", "protective"], "type": "enum", "name": "TraitAssociation"}], "name":
"traitAssociation"}, {"doc": "", "type": ["null", {"symbols": ["driver", "passenger", "modifier"],
"type": "enum", "name": "TumorigenesisClassification"}], "name": "tumorigenesisClassification"},
{"doc": "", "type": ["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant",
"lethal_variant", "loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type":
"enum", "name": "VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name":
"variantClassification"}, {"doc": "", "type": ["null", "boolean"], "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc":
"", "type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null",
{"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name": "reportEvents"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name": "additionalTextualVariantAnnotations"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name": "references"}, {"doc":
"", "type": ["null", {"doc": "", "type": "record", "name": "VariantAttributes", "fields": [{"doc":
"", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"], "name":
"recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc": "",
"type": ["null", {"values": "string", "type": "map"}], "name": "others"}]}], "name":
"variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"AlleleFrequency", "fields": [{"doc": "", "type": "string", "name": "study"}, {"doc": "", "type":
"string", "name": "population"}, {"doc": "", "type": "float", "name": "alternateFrequency"}]},
"type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type": ["null", {"values": "float",
"type": "map"}], "name": "additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}, {"doc": "", "type": {"items":
"AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alleleFrequencies",
        "alleleOrigins",
        "cdnaChanges",
        "clinVarIds",
        "comments",
        "cosmicIds",
        "dbSnpId",
        "genomicChanges",
        "proteinChanges",
        "references",
        "reportEvents",
        "variantAttributes",
        "variantCalls",
        "variantCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEvent,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEvent,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alleleFrequencies',
        'alleleOrigins', 'cdnaChanges', 'clinVarIds', 'comments',
        'cosmicIds', 'dbSnpId', 'genomicChanges', 'proteinChanges',
        'references', 'reportEvents', 'variantAttributes',
        'variantCalls', 'variantCoordinates'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alleleFrequencies = kwargs.get(
            'alleleFrequencies', None)
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.cdnaChanges = kwargs.get(
            'cdnaChanges', None)
        self.clinVarIds = kwargs.get(
            'clinVarIds', None)
        self.comments = kwargs.get(
            'comments', None)
        self.cosmicIds = kwargs.get(
            'cosmicIds', None)
        self.dbSnpId = kwargs.get(
            'dbSnpId', None)
        self.genomicChanges = kwargs.get(
            'genomicChanges', None)
        self.proteinChanges = kwargs.get(
            'proteinChanges', None)
        self.references = kwargs.get(
            'references', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)
        self.variantAttributes = kwargs.get(
            'variantAttributes', None)
        self.variantCalls = kwargs.get(
            'variantCalls', None)
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())


class ReportedVariantCancer(ProtocolElement):
    """
    A reported variant in the cancer program
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "ReportedVariantCancer",
"fields": [{"doc": "", "type": {"doc": "", "type": "record", "name": "VariantCoordinates", "fields":
[{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name":
"position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string",
"name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type":
"enum", "name": "Assembly"}, "name": "assembly"}]}, "name": "variantCoordinates"}, {"doc": "",
"type": ["null", "string"], "name": "dbSnpId"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "cosmicIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "clinVarIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "genomicChanges"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "cdnaChanges"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "proteinChanges"}, {"doc": "", "type": {"items": {"doc": "", "type": "record",
"name": "VariantCall", "fields": [{"doc": "", "type": "string", "name": "participantId"}, {"doc":
"", "type": "string", "name": "sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous",
"heterozygous", "alternate_homozygous", "missing", "half_missing_reference",
"half_missing_alternate", "alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "",
"type": "enum", "name": "Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"],
"name": "phaseSet"}, {"doc": "", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type":
["null", "int"], "name": "depthReference"}, {"doc": "", "type": ["null", "int"], "name":
"depthAlternate"}, {"doc": "", "type": {"items": {"symbols": ["de_novo_variant", "germline_variant",
"maternal_variant", "paternal_variant", "pedigree_specific_variant", "population_specific_variant",
"somatic_variant"], "doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name":
"alleleOrigins"}]}, "type": "array"}, "name": "variantCalls"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "ReportEventCancer", "fields": [{"doc": "", "type": "string", "name":
"reportEventId"}, {"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"GenomicEntity", "fields": [{"doc": "", "type": {"symbols": ["regulatory_region", "gene",
"transcript", "intergenic"], "doc": "", "type": "enum", "name": "GenomicEntityType"}, "name":
"type"}, {"doc": "", "type": "string", "name": "ensemblId"}, {"doc": "", "type": ["null", "string"],
"name": "geneSymbol"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"otherIds"}]}, "type": "array"}, "name": "genomicEntities"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantConsequence", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": ["null", "string"], "name": "name"}]}, "type": "array"}, "name":
"variantConsequences"}, {"doc": "", "type": ["null", {"items": {"doc": "", "type": "record", "name":
"Action", "fields": [{"doc": "", "type": ["null", {"symbols": ["therapy", "therapeutic",
"prognosis", "diagnosis"], "doc": "", "type": "enum", "name": "ActionType"}], "name": "actionType"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "references"}, {"doc":
"", "type": ["null", {"symbols": ["clinical", "pre_clinical"], "doc": "", "type": "enum", "name":
"ActionStatus"}], "name": "status"}, {"doc": "", "type": "boolean", "name": "variantActionable"},
{"doc": "", "type": ["null", "string"], "name": "url"}, {"doc": "", "type": ["null", "string"],
"name": "evidenceType"}, {"doc": "", "type": "string", "name": "source"}]}, "type": "array"}],
"name": "actions"}, {"doc": "", "type": ["null", "int"], "name": "groupOfVariants"}, {"doc": "",
"type": ["null", "string"], "name": "eventJustification"}, {"doc": "", "type": ["null", "float"],
"name": "score"}, {"doc": "", "type": ["null", {"values": "float", "type": "map"}], "name":
"vendorSpecificScores"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantClassification", "fields": [{"doc": "", "type": ["null", {"symbols": ["benign",
"likely_benign", "VUS", "likely_pathogenic", "pathogenic", "uncertain_significance"], "type":
"enum", "name": "ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type":
["null", {"symbols": ["responsive", "resistant", "toxicity", "indication", "contraindication",
"dosing", "increased_monitoring", "efficacy"], "type": "enum", "name":
"DrugResponseClassification"}], "name": "drugResponseClassification"}, {"doc": "", "type": ["null",
{"symbols": ["established_risk_allele", "likely_risk_allele", "uncertain_risk_allele",
"protective"], "type": "enum", "name": "TraitAssociation"}], "name": "traitAssociation"}, {"doc":
"", "type": ["null", {"symbols": ["driver", "passenger", "modifier"], "type": "enum", "name":
"TumorigenesisClassification"}], "name": "tumorigenesisClassification"}, {"doc": "", "type":
["null", {"symbols": ["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}]}], "name": "variantClassification"},
{"doc": "", "type": ["null", {"items": {"symbols": ["oncogene", "tumor_suppressor_gene", "both"],
"doc": "", "type": "enum", "name": "RoleInCancer"}, "type": "array"}], "name": "roleInCancer"},
{"doc": "", "type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3", "TIER4", "TIER5"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}, "type": "array"}, "name":
"reportEvents"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null", {"values": "string", "type":
"map"}], "name": "references"}, {"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"VariantAttributes", "fields": [{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "",
"type": ["null", "boolean"], "name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"],
"name": "fdp50"}, {"doc": "", "type": ["null", {"values": "string", "type": "map"}], "name":
"others"}]}], "name": "variantAttributes"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "AlleleFrequency", "fields": [{"doc": "", "type": "string", "name":
"study"}, {"doc": "", "type": "string", "name": "population"}, {"doc": "", "type": "float", "name":
"alternateFrequency"}]}, "type": "array"}], "name": "alleleFrequencies"}, {"doc": "", "type":
["null", {"values": "float", "type": "map"}], "name": "additionalNumericVariantAnnotations"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "comments"}, {"doc": "",
"type": {"items": "AlleleOrigin", "type": "array"}, "name": "alleleOrigins"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alleleFrequencies",
        "alleleOrigins",
        "cdnaChanges",
        "clinVarIds",
        "comments",
        "cosmicIds",
        "dbSnpId",
        "genomicChanges",
        "proteinChanges",
        "references",
        "reportEvents",
        "variantAttributes",
        "variantCalls",
        "variantCoordinates",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEventCancer,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alleleFrequencies': AlleleFrequency,
            'reportEvents': ReportEventCancer,
            'variantAttributes': VariantAttributes,
            'variantCalls': VariantCall,
            'variantCoordinates': VariantCoordinates,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alleleFrequencies',
        'alleleOrigins', 'cdnaChanges', 'clinVarIds', 'comments',
        'cosmicIds', 'dbSnpId', 'genomicChanges', 'proteinChanges',
        'references', 'reportEvents', 'variantAttributes',
        'variantCalls', 'variantCoordinates'
    ]

    def __init__(self, **kwargs):
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alleleFrequencies = kwargs.get(
            'alleleFrequencies', None)
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.cdnaChanges = kwargs.get(
            'cdnaChanges', None)
        self.clinVarIds = kwargs.get(
            'clinVarIds', None)
        self.comments = kwargs.get(
            'comments', None)
        self.cosmicIds = kwargs.get(
            'cosmicIds', None)
        self.dbSnpId = kwargs.get(
            'dbSnpId', None)
        self.genomicChanges = kwargs.get(
            'genomicChanges', None)
        self.proteinChanges = kwargs.get(
            'proteinChanges', None)
        self.references = kwargs.get(
            'references', None)
        self.reportEvents = kwargs.get(
            'reportEvents', None)
        self.variantAttributes = kwargs.get(
            'variantAttributes', None)
        self.variantCalls = kwargs.get(
            'variantCalls', None)
        self.variantCoordinates = kwargs.get(
            'variantCoordinates', VariantCoordinates())


class ReportingQuestion(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class ReviewedParts(object):
    """
    An enumeration for Which parts of the WGA were reviewed?: *
    `domain_1`: Domain 1 only * `domain_1_and_2`: Domains 1 and 2 *
    `domain_1_2_and_suplementary`: Domains 1, 2 and supplementary
    analysis
    """
    domain_1 = "domain_1"
    domain_1_and_2 = "domain_1_and_2"
    domain_1_2_and_suplementary = "domain_1_2_and_suplementary"

    def __hash__(self):
        return str(self).__hash__()


class RoleInCancer(object):
    """
    The role of a given genomic feature in cancer  * `NCIT_C16936`:
    oncogene. A gene that is a mutated (changed) form of a gene
    involved in normal cell growth. Oncogenes may cause the growth of
    cancer cells. Mutations in genes that become oncogenes can be
    inherited or caused by being exposed to substances in the
    environment that cause cancer.
    http://purl.obolibrary.org/obo/NCIT_C16936 * `NCIT_C17362`:
    tumor_suppressor_gene. A type of gene that makes a protein called
    a tumor suppressor protein that helps control cell growth.
    Mutations (changes in DNA) in antioncogenes may lead to cancer.
    http://purl.obolibrary.org/obo/NCIT_C17362
    """
    oncogene = "oncogene"
    tumor_suppressor_gene = "tumor_suppressor_gene"
    both = "both"

    def __hash__(self):
        return str(self).__hash__()


class Sample(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "Sample", "fields":
[{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": ["null", {"symbols": ["TUMOUR",
"BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD", "SALIVA",
"FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name": "source"},
{"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name": "Product"}],
"name": "product"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "labSampleId",
        "preparationMethod",
        "product",
        "sampleId",
        "source",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'labSampleId', 'preparationMethod', 'product', 'sampleId',
        'source'
    ]

    def __init__(self, **kwargs):
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)


class SampleSource(object):
    """
    The source of the sample
    """
    TUMOUR = "TUMOUR"
    BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS = "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS"
    BONE_MARROW_ASPIRATE_TUMOUR_CELLS = "BONE_MARROW_ASPIRATE_TUMOUR_CELLS"
    BLOOD = "BLOOD"
    SALIVA = "SALIVA"
    FIBROBLAST = "FIBROBLAST"
    TISSUE = "TISSUE"

    def __hash__(self):
        return str(self).__hash__()


class SegregationQuestion(object):
    """
    No documentation
    """
    yes = "yes"
    no = "no"

    def __hash__(self):
        return str(self).__hash__()


class SensitiveInformation(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "SensitiveInformation",
"fields": [{"doc": "", "type": {"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name":
"GitVersionControl"}], "type": "record", "name": "VersionControl"}, "name": "versionControl"},
{"type": "string", "name": "gelID"}, {"type": ["null", {"items": "string", "type": "array"}],
"name": "externalIds"}, {"type": ["null", "string"], "name": "genomicMedicineCenter"}, {"type":
["null", "string"], "name": "fullNameOfResponsibleConsultant"}, {"type": ["null", "string"], "name":
"contactNumber"}, {"type": ["null", "string"], "name": "hospitalOfResponsibleConsultant"}, {"type":
["null", "string"], "name": "centerSampleId"}, {"type": ["null", "string"], "name":
"originatingCenter"}, {"type": ["null", "string"], "name": "centerPatientId"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "centerPatientId",
        "centerSampleId",
        "contactNumber",
        "externalIds",
        "fullNameOfResponsibleConsultant",
        "gelID",
        "genomicMedicineCenter",
        "hospitalOfResponsibleConsultant",
        "originatingCenter",
        "versionControl",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'versionControl': VersionControl,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'versionControl': VersionControl,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'centerPatientId', 'centerSampleId', 'contactNumber',
        'externalIds', 'fullNameOfResponsibleConsultant', 'gelID',
        'genomicMedicineCenter', 'hospitalOfResponsibleConsultant',
        'originatingCenter', 'versionControl'
    ]

    def __init__(self, **kwargs):
        self.centerPatientId = kwargs.get(
            'centerPatientId', None)
        self.centerSampleId = kwargs.get(
            'centerSampleId', None)
        self.contactNumber = kwargs.get(
            'contactNumber', None)
        self.externalIds = kwargs.get(
            'externalIds', None)
        self.fullNameOfResponsibleConsultant = kwargs.get(
            'fullNameOfResponsibleConsultant', None)
        self.gelID = kwargs.get(
            'gelID', None)
        self.genomicMedicineCenter = kwargs.get(
            'genomicMedicineCenter', None)
        self.hospitalOfResponsibleConsultant = kwargs.get(
            'hospitalOfResponsibleConsultant', None)
        self.originatingCenter = kwargs.get(
            'originatingCenter', None)
        self.versionControl = kwargs.get(
            'versionControl', VersionControl())


class Severity(object):
    """
    No documentation
    """
    BORDERLINE = "BORDERLINE"
    MILD = "MILD"
    MODERATE = "MODERATE"
    SEVERE = "SEVERE"
    PROFOUND = "PROFOUND"

    def __hash__(self):
        return str(self).__hash__()


class Sex(object):
    """
    Sex
    """
    MALE = "MALE"
    FEMALE = "FEMALE"
    UNKNOWN = "UNKNOWN"

    def __hash__(self):
        return str(self).__hash__()


class SpatialPattern(object):
    """
    No documentation
    """
    DISTAL = "DISTAL"
    GENERALIZED = "GENERALIZED"
    LOCALIZED = "LOCALIZED"
    PROXIMAL = "PROXIMAL"

    def __hash__(self):
        return str(self).__hash__()


class SupportingEvidences(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "SupportingEvidences",
"fields": [{"type": {"items": "string", "type": "array"}, "name": "previousSupportingEvidences"},
{"type": {"items": "string", "type": "array"}, "name": "modifiedSupportingEvidences"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "modifiedSupportingEvidences",
        "previousSupportingEvidences",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'modifiedSupportingEvidences', 'previousSupportingEvidences'
    ]

    def __init__(self, **kwargs):
        self.modifiedSupportingEvidences = kwargs.get(
            'modifiedSupportingEvidences', None)
        self.previousSupportingEvidences = kwargs.get(
            'previousSupportingEvidences', None)


class TernaryOption(object):
    """
    This defines a yes/no/unknown case
    """
    yes = "yes"
    no = "no"
    unknown = "unknown"

    def __hash__(self):
        return str(self).__hash__()


class Tier(object):
    """
    Variant tiers as defined by Genomics England
    """
    NONE = "NONE"
    TIER1 = "TIER1"
    TIER2 = "TIER2"
    TIER3 = "TIER3"
    TIER4 = "TIER4"
    TIER5 = "TIER5"

    def __hash__(self):
        return str(self).__hash__()


class TissueSource(object):
    """
    No documentation
    """
    BMA_TUMOUR_SORTED_CELLS = "BMA_TUMOUR_SORTED_CELLS"
    CT_GUIDED_BIOPSY = "CT_GUIDED_BIOPSY"
    ENDOSCOPIC_BIOPSY = "ENDOSCOPIC_BIOPSY"
    ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY = "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY"
    ENDOSCOPIC_ULTRASOUND_GUIDED_FNA = "ENDOSCOPIC_ULTRASOUND_GUIDED_FNA"
    LAPAROSCOPIC_BIOPSY = "LAPAROSCOPIC_BIOPSY"
    LAPAROSCOPIC_EXCISION = "LAPAROSCOPIC_EXCISION"
    MRI_GUIDED_BIOPSY = "MRI_GUIDED_BIOPSY"
    NON_GUIDED_BIOPSY = "NON_GUIDED_BIOPSY"
    SURGICAL_RESECTION = "SURGICAL_RESECTION"
    STEREOTACTICALLY_GUIDED_BIOPSY = "STEREOTACTICALLY_GUIDED_BIOPSY"
    USS_GUIDED_BIOPSY = "USS_GUIDED_BIOPSY"
    NON_STANDARD_BIOPSY = "NON_STANDARD_BIOPSY"

    def __hash__(self):
        return str(self).__hash__()


class TraitAssociation(object):
    """
    No documentation
    """
    established_risk_allele = "established_risk_allele"
    likely_risk_allele = "likely_risk_allele"
    uncertain_risk_allele = "uncertain_risk_allele"
    protective = "protective"

    def __hash__(self):
        return str(self).__hash__()


class TumorigenesisClassification(object):
    """
    No documentation
    """
    driver = "driver"
    passenger = "passenger"
    modifier = "modifier"

    def __hash__(self):
        return str(self).__hash__()


class TumourContent(object):
    """
    No documentation
    """
    High = "High"
    Medium = "Medium"
    Low = "Low"

    def __hash__(self):
        return str(self).__hash__()


class TumourSample(ProtocolElement):
    """
    A tumour sample
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "TumourSample", "fields":
[{"doc": "", "type": "string", "name": "sampleId"}, {"doc": "", "type": "int", "name":
"labSampleId"}, {"doc": "", "type": "string", "name": "LDPCode"}, {"doc": "", "type": "string",
"name": "tumourId"}, {"doc": "", "type": ["null", {"symbols": ["CRUK", "OXFORD", "CLL", "IIP",
"MAIN", "EXPT"], "type": "enum", "name": "ProgrammePhase"}], "name": "programmePhase"}, {"doc": "",
"type": ["null", {"symbols": ["ADULT_GLIOMA", "BLADDER", "BREAST", "CARCINOMA_OF_UNKNOWN_PRIMARY",
"CHILDHOOD", "COLORECTAL", "ENDOMETRIAL_CARCINOMA", "HAEMONC", "HEPATOPANCREATOBILIARY", "LUNG",
"MALIGNANT_MELANOMA", "NASOPHARYNGEAL", "ORAL_OROPHARYNGEAL", "OVARIAN", "PROSTATE", "RENAL",
"SARCOMA", "SINONASAL", "TESTICULAR_GERM_CELL_TUMOURS", "UPPER_GASTROINTESTINAL",
"NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE", "CLASSICAL_HODGKINS",
"NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS", "T_CELL_LYMPHOMA"], "type": "enum", "name":
"diseaseType"}], "name": "diseaseType"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubType"}, {"doc": "", "type": ["null", "string"], "name": "clinicalSampleDateTime"},
{"doc": "", "type": ["null", {"symbols": ["PRIMARY", "METASTATIC_RECURRENCE",
"RECURRENCE_OF_PRIMARY_TUMOUR", "METASTASES"], "type": "enum", "name": "TumourType"}], "name":
"tumourType"}, {"doc": "", "type": ["null", {"symbols": ["High", "Medium", "Low"], "type": "enum",
"name": "TumourContent"}], "name": "tumourContent"}, {"doc": "", "type": ["null", {"symbols":
["TUMOUR", "BONE_MARROW_ASPIRATE_TUMOUR_SORTED_CELLS", "BONE_MARROW_ASPIRATE_TUMOUR_CELLS", "BLOOD",
"SALIVA", "FIBROBLAST", "TISSUE"], "doc": "", "type": "enum", "name": "SampleSource"}], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["EDTA", "ORAGENE", "FF", "FFPE",
"CD128_SORTED_CELLS", "ASPIRATE"], "type": "enum", "name": "PreparationMethod"}], "name":
"preparationMethod"}, {"doc": "", "type": ["null", {"symbols": ["BMA_TUMOUR_SORTED_CELLS",
"CT_GUIDED_BIOPSY", "ENDOSCOPIC_BIOPSY", "ENDOSCOPIC_ULTRASOUND_GUIDED_BIOPSY",
"ENDOSCOPIC_ULTRASOUND_GUIDED_FNA", "LAPAROSCOPIC_BIOPSY", "LAPAROSCOPIC_EXCISION",
"MRI_GUIDED_BIOPSY", "NON_GUIDED_BIOPSY", "SURGICAL_RESECTION", "STEREOTACTICALLY_GUIDED_BIOPSY",
"USS_GUIDED_BIOPSY", "NON_STANDARD_BIOPSY"], "type": "enum", "name": "TissueSource"}], "name":
"tissueSource"}, {"doc": "", "type": ["null", {"symbols": ["DNA", "RNA"], "type": "enum", "name":
"Product"}], "name": "product"}, {"doc": "", "type": ["null", "string"], "name": "morphologyICD"},
{"doc": "", "type": ["null", "string"], "name": "morphologySnomedCT"}, {"doc": "", "type": ["null",
"string"], "name": "morphologySnomedRT"}, {"doc": "", "type": ["null", "string"], "name":
"topographyICD"}, {"doc": "", "type": ["null", "string"], "name": "topographySnomedCT"}, {"doc": "",
"type": ["null", "string"], "name": "topographySnomedRT"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "LDPCode",
        "clinicalSampleDateTime",
        "diseaseSubType",
        "diseaseType",
        "labSampleId",
        "morphologyICD",
        "morphologySnomedCT",
        "morphologySnomedRT",
        "preparationMethod",
        "product",
        "programmePhase",
        "sampleId",
        "source",
        "tissueSource",
        "topographyICD",
        "topographySnomedCT",
        "topographySnomedRT",
        "tumourContent",
        "tumourId",
        "tumourType",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'LDPCode', 'clinicalSampleDateTime', 'diseaseSubType',
        'diseaseType', 'labSampleId', 'morphologyICD',
        'morphologySnomedCT', 'morphologySnomedRT',
        'preparationMethod', 'product', 'programmePhase', 'sampleId',
        'source', 'tissueSource', 'topographyICD',
        'topographySnomedCT', 'topographySnomedRT', 'tumourContent',
        'tumourId', 'tumourType'
    ]

    def __init__(self, **kwargs):
        self.LDPCode = kwargs.get(
            'LDPCode', None)
        self.clinicalSampleDateTime = kwargs.get(
            'clinicalSampleDateTime', None)
        self.diseaseSubType = kwargs.get(
            'diseaseSubType', None)
        self.diseaseType = kwargs.get(
            'diseaseType', None)
        self.labSampleId = kwargs.get(
            'labSampleId', None)
        self.morphologyICD = kwargs.get(
            'morphologyICD', None)
        self.morphologySnomedCT = kwargs.get(
            'morphologySnomedCT', None)
        self.morphologySnomedRT = kwargs.get(
            'morphologySnomedRT', None)
        self.preparationMethod = kwargs.get(
            'preparationMethod', None)
        self.product = kwargs.get(
            'product', None)
        self.programmePhase = kwargs.get(
            'programmePhase', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.source = kwargs.get(
            'source', None)
        self.tissueSource = kwargs.get(
            'tissueSource', None)
        self.topographyICD = kwargs.get(
            'topographyICD', None)
        self.topographySnomedCT = kwargs.get(
            'topographySnomedCT', None)
        self.topographySnomedRT = kwargs.get(
            'topographySnomedRT', None)
        self.tumourContent = kwargs.get(
            'tumourContent', None)
        self.tumourId = kwargs.get(
            'tumourId', None)
        self.tumourType = kwargs.get(
            'tumourType', None)


class TumourType(object):
    """
    No documentation
    """
    PRIMARY = "PRIMARY"
    METASTATIC_RECURRENCE = "METASTATIC_RECURRENCE"
    RECURRENCE_OF_PRIMARY_TUMOUR = "RECURRENCE_OF_PRIMARY_TUMOUR"
    METASTASES = "METASTASES"

    def __hash__(self):
        return str(self).__hash__()


class VariantAttributes(ProtocolElement):
    """
    Some additional variant attributes
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantAttributes", "fields":
[{"doc": "", "type": ["null", "int"], "name": "ihp"}, {"doc": "", "type": ["null", "boolean"],
"name": "recurrentlyReported"}, {"doc": "", "type": ["null", "string"], "name": "fdp50"}, {"doc":
"", "type": ["null", {"values": "string", "type": "map"}], "name": "others"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "fdp50",
        "ihp",
        "others",
        "recurrentlyReported",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fdp50', 'ihp', 'others', 'recurrentlyReported'
    ]

    def __init__(self, **kwargs):
        self.fdp50 = kwargs.get(
            'fdp50', None)
        self.ihp = kwargs.get(
            'ihp', None)
        self.others = kwargs.get(
            'others', None)
        self.recurrentlyReported = kwargs.get(
            'recurrentlyReported', None)


class VariantCall(ProtocolElement):
    """
    This object holds all the information related to a specific
    variant observation in a given sample, including     zygosity,
    phase, depth of coverage, variant allele frequency and allele
    origins.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantCall", "fields":
[{"doc": "", "type": "string", "name": "participantId"}, {"doc": "", "type": "string", "name":
"sampleId"}, {"doc": "", "type": {"symbols": ["reference_homozygous", "heterozygous",
"alternate_homozygous", "missing", "half_missing_reference", "half_missing_alternate",
"alternate_hemizigous", "reference_hemizigous", "unk", "na"], "doc": "", "type": "enum", "name":
"Zygosity"}, "name": "zygosity"}, {"doc": "", "type": ["null", "int"], "name": "phaseSet"}, {"doc":
"", "type": ["null", "double"], "name": "vaf"}, {"doc": "", "type": ["null", "int"], "name":
"depthReference"}, {"doc": "", "type": ["null", "int"], "name": "depthAlternate"}, {"doc": "",
"type": {"items": {"symbols": ["de_novo_variant", "germline_variant", "maternal_variant",
"paternal_variant", "pedigree_specific_variant", "population_specific_variant", "somatic_variant"],
"doc": "", "type": "enum", "name": "AlleleOrigin"}, "type": "array"}, "name": "alleleOrigins"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alleleOrigins",
        "depthAlternate",
        "depthReference",
        "participantId",
        "phaseSet",
        "sampleId",
        "vaf",
        "zygosity",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alleleOrigins', 'depthAlternate', 'depthReference',
        'participantId', 'phaseSet', 'sampleId', 'vaf', 'zygosity'
    ]

    def __init__(self, **kwargs):
        self.alleleOrigins = kwargs.get(
            'alleleOrigins', None)
        self.depthAlternate = kwargs.get(
            'depthAlternate', None)
        self.depthReference = kwargs.get(
            'depthReference', None)
        self.participantId = kwargs.get(
            'participantId', None)
        self.phaseSet = kwargs.get(
            'phaseSet', None)
        self.sampleId = kwargs.get(
            'sampleId', None)
        self.vaf = kwargs.get(
            'vaf', None)
        self.zygosity = kwargs.get(
            'zygosity', None)


class VariantClassification(ProtocolElement):
    """
    The variant classification according to different properties.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantClassification",
"fields": [{"doc": "", "type": ["null", {"symbols": ["benign", "likely_benign", "VUS",
"likely_pathogenic", "pathogenic", "uncertain_significance"], "type": "enum", "name":
"ClinicalSignificance"}], "name": "clinicalSignificance"}, {"doc": "", "type": ["null", {"symbols":
["responsive", "resistant", "toxicity", "indication", "contraindication", "dosing",
"increased_monitoring", "efficacy"], "type": "enum", "name": "DrugResponseClassification"}], "name":
"drugResponseClassification"}, {"doc": "", "type": ["null", {"symbols": ["established_risk_allele",
"likely_risk_allele", "uncertain_risk_allele", "protective"], "type": "enum", "name":
"TraitAssociation"}], "name": "traitAssociation"}, {"doc": "", "type": ["null", {"symbols":
["driver", "passenger", "modifier"], "type": "enum", "name": "TumorigenesisClassification"}],
"name": "tumorigenesisClassification"}, {"doc": "", "type": ["null", {"symbols":
["dominant_negative_variant", "gain_of_function_variant", "lethal_variant",
"loss_of_function_variant", "loss_of_heterozygosity", "null_variant"], "type": "enum", "name":
"VariantFunctionalEffect"}], "name": "functionalEffect"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "clinicalSignificance",
        "drugResponseClassification",
        "functionalEffect",
        "traitAssociation",
        "tumorigenesisClassification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'clinicalSignificance', 'drugResponseClassification',
        'functionalEffect', 'traitAssociation',
        'tumorigenesisClassification'
    ]

    def __init__(self, **kwargs):
        self.clinicalSignificance = kwargs.get(
            'clinicalSignificance', None)
        self.drugResponseClassification = kwargs.get(
            'drugResponseClassification', None)
        self.functionalEffect = kwargs.get(
            'functionalEffect', None)
        self.traitAssociation = kwargs.get(
            'traitAssociation', None)
        self.tumorigenesisClassification = kwargs.get(
            'tumorigenesisClassification', None)


class VariantConsequence(ProtocolElement):
    """
    A variant consequence as defined by the Sequence Ontology (SO)
    (e.g.: id = SO:0001816 ; name = non synonymous)     NOTE: this
    record is equivalent to OpenCB's `ConsequenceType`, but we want to
    avoid naming collisions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantConsequence",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "", "type": ["null", "string"],
"name": "name"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "id",
        "name",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'id', 'name'
    ]

    def __init__(self, **kwargs):
        self.id = kwargs.get(
            'id', None)
        self.name = kwargs.get(
            'name', None)


class VariantCoordinates(ProtocolElement):
    """
    The variant coordinates representing uniquely a small variant.
    No multi-allelic variant supported, alternate only represents one
    alternate allele.
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantCoordinates",
"fields": [{"doc": "", "type": "string", "name": "chromosome"}, {"doc": "", "type": "int", "name":
"position"}, {"doc": "", "type": "string", "name": "reference"}, {"doc": "", "type": "string",
"name": "alternate"}, {"doc": "", "type": {"symbols": ["GRCh38", "GRCh37"], "doc": "", "type":
"enum", "name": "Assembly"}, "name": "assembly"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "alternate",
        "assembly",
        "chromosome",
        "position",
        "reference",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'alternate', 'assembly', 'chromosome', 'position', 'reference'
    ]

    def __init__(self, **kwargs):
        self.alternate = kwargs.get(
            'alternate', None)
        self.assembly = kwargs.get(
            'assembly', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.position = kwargs.get(
            'position', None)
        self.reference = kwargs.get(
            'reference', None)


class VariantFunctionalEffect(object):
    """
    No documentation
    """
    dominant_negative_variant = "dominant_negative_variant"
    gain_of_function_variant = "gain_of_function_variant"
    lethal_variant = "lethal_variant"
    loss_of_function_variant = "loss_of_function_variant"
    loss_of_heterozygosity = "loss_of_heterozygosity"
    null_variant = "null_variant"

    def __hash__(self):
        return str(self).__hash__()


class VariantGroupLevelQuestions(ProtocolElement):
    """
    The variant group level questions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantGroupLevelQuestions",
"fields": [{"doc": "", "type": "int", "name": "variantGroup"}, {"doc": "", "type": {"items": {"doc":
"", "type": "record", "name": "VariantLevelQuestions", "fields": [{"doc": "", "type": "string",
"name": "variantDetails"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ConfirmationDecision"}, "name": "confirmationDecision"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ConfirmationOutcome"}, "name": "confirmationOutcome"},
{"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"},
"name": "reportingQuestion"}, {"doc": "", "type": {"symbols": ["pathogenic_variant",
"likely_pathogenic_variant", "variant_of_unknown_clinical_significance", "likely_benign_variant",
"benign_variant", "not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name":
"acmgClassification"}, {"doc": "", "type": "string", "name": "publications"}]}, "type": "array"},
"name": "variantLevelQuestions"}, {"doc": "", "type": {"symbols": ["yes", "no", "not_yet", "na"],
"type": "enum", "name": "Actionability"}, "name": "actionability"}, {"doc": "", "type": {"items":
{"symbols": ["none", "change_in_medication", "surgical_option",
"additional_surveillance_for_proband_or_relatives", "clinical_trial_eligibility",
"informs_reproductive_choice", "unknown", "other"], "type": "enum", "name": "ClinicalUtility"},
"type": "array"}, "name": "clinicalUtility"}, {"doc": "", "type": {"symbols": ["yes", "no",
"partially", "unknown"], "type": "enum", "name": "PhenotypesSolved"}, "name": "phenotypesSolved"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}], "name": "phenotypesExplained"}],
"doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "actionability",
        "clinicalUtility",
        "phenotypesExplained",
        "phenotypesSolved",
        "variantGroup",
        "variantLevelQuestions",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantLevelQuestions': VariantLevelQuestions,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantLevelQuestions': VariantLevelQuestions,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'actionability', 'clinicalUtility', 'phenotypesExplained',
        'phenotypesSolved', 'variantGroup', 'variantLevelQuestions'
    ]

    def __init__(self, **kwargs):
        self.actionability = kwargs.get(
            'actionability', None)
        self.clinicalUtility = kwargs.get(
            'clinicalUtility', None)
        self.phenotypesExplained = kwargs.get(
            'phenotypesExplained', None)
        self.phenotypesSolved = kwargs.get(
            'phenotypesSolved', None)
        self.variantGroup = kwargs.get(
            'variantGroup', None)
        self.variantLevelQuestions = kwargs.get(
            'variantLevelQuestions', None)


class VariantLevelQuestions(ProtocolElement):
    """
    The variant level questions
    """
    _schemaSource = """
{"namespace": "org.gel.models.report.avro", "type": "record", "name": "VariantLevelQuestions",
"fields": [{"doc": "", "type": "string", "name": "variantDetails"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ConfirmationDecision"}, "name":
"confirmationDecision"}, {"doc": "", "type": {"symbols": ["yes", "no", "na"], "type": "enum",
"name": "ConfirmationOutcome"}, "name": "confirmationOutcome"}, {"doc": "", "type": {"symbols":
["yes", "no", "na"], "type": "enum", "name": "ReportingQuestion"}, "name": "reportingQuestion"},
{"doc": "", "type": {"symbols": ["pathogenic_variant", "likely_pathogenic_variant",
"variant_of_unknown_clinical_significance", "likely_benign_variant", "benign_variant",
"not_assessed"], "type": "enum", "name": "ACMGClassification"}, "name": "acmgClassification"},
{"doc": "", "type": "string", "name": "publications"}], "doc": ""}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {
        "acmgClassification",
        "confirmationDecision",
        "confirmationOutcome",
        "publications",
        "reportingQuestion",
        "variantDetails",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'acmgClassification', 'confirmationDecision',
        'confirmationOutcome', 'publications', 'reportingQuestion',
        'variantDetails'
    ]

    def __init__(self, **kwargs):
        self.acmgClassification = kwargs.get(
            'acmgClassification', None)
        self.confirmationDecision = kwargs.get(
            'confirmationDecision', None)
        self.confirmationOutcome = kwargs.get(
            'confirmationOutcome', None)
        self.publications = kwargs.get(
            'publications', None)
        self.reportingQuestion = kwargs.get(
            'reportingQuestion', None)
        self.variantDetails = kwargs.get(
            'variantDetails', None)


class VersionControl(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "org.gel.models.participant.avro", "type": "record", "name": "VersionControl",
"fields": [{"default": "1.1.0", "doc": "", "type": "string", "name": "GitVersionControl"}]}
"""
    schema = avro_parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'GitVersionControl'
    ]

    def __init__(self, **kwargs):
        self.GitVersionControl = kwargs.get(
            'GitVersionControl', '1.1.0')


class Zygosity(object):
    """
    It is a representation of the zygosity  * `reference_homozygous`:
    0/0, 0|0 * `heterozygous`: 0/1, 1/0, 1|0, 0|1 *
    `alternate_homozygous`: 1/1, 1|1 * `missing`: ./., .|. *
    `half_missing_reference`: ./0, 0/., 0|., .|0 *
    `half_missing_alternate`: ./1, 1/., 1|., .|1 *
    `alternate_hemizigous`: 1 * `reference_hemizigous`: 0 * `unk`:
    Anything unexpected
    """
    reference_homozygous = "reference_homozygous"
    heterozygous = "heterozygous"
    alternate_homozygous = "alternate_homozygous"
    missing = "missing"
    half_missing_reference = "half_missing_reference"
    half_missing_alternate = "half_missing_alternate"
    alternate_hemizigous = "alternate_hemizigous"
    reference_hemizigous = "reference_hemizigous"
    unk = "unk"
    na = "na"

    def __hash__(self):
        return str(self).__hash__()


class diseaseType(object):
    """
    No documentation
    """
    ADULT_GLIOMA = "ADULT_GLIOMA"
    BLADDER = "BLADDER"
    BREAST = "BREAST"
    CARCINOMA_OF_UNKNOWN_PRIMARY = "CARCINOMA_OF_UNKNOWN_PRIMARY"
    CHILDHOOD = "CHILDHOOD"
    COLORECTAL = "COLORECTAL"
    ENDOMETRIAL_CARCINOMA = "ENDOMETRIAL_CARCINOMA"
    HAEMONC = "HAEMONC"
    HEPATOPANCREATOBILIARY = "HEPATOPANCREATOBILIARY"
    LUNG = "LUNG"
    MALIGNANT_MELANOMA = "MALIGNANT_MELANOMA"
    NASOPHARYNGEAL = "NASOPHARYNGEAL"
    ORAL_OROPHARYNGEAL = "ORAL_OROPHARYNGEAL"
    OVARIAN = "OVARIAN"
    PROSTATE = "PROSTATE"
    RENAL = "RENAL"
    SARCOMA = "SARCOMA"
    SINONASAL = "SINONASAL"
    TESTICULAR_GERM_CELL_TUMOURS = "TESTICULAR_GERM_CELL_TUMOURS"
    UPPER_GASTROINTESTINAL = "UPPER_GASTROINTESTINAL"
    NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE = "NON_HODGKINS_B_CELL_LYMPHOMA_LOW_MOD_GRADE"
    CLASSICAL_HODGKINS = "CLASSICAL_HODGKINS"
    NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS = "NODULAR_LYMPHOCYTE_PREDOMINANT_HODGKINS"
    T_CELL_LYMPHOMA = "T_CELL_LYMPHOMA"

    def __hash__(self):
        return str(self).__hash__()
